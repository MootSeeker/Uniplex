
Uniplex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbdc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be00  0800be00  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be08  0800be08  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be08  0800be08  0001be08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be0c  0800be0c  0001be0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800be10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc4  20000190  0800bfa0  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f54  0800bfa0  00021f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023069  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ced  00000000  00000000  00043229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00047f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  00049b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c35  00000000  00000000  0004b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000268eb  00000000  00000000  000741a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e36a1  00000000  00000000  0009aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007510  00000000  00000000  0017e184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000190 	.word	0x20000190
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800bd58 	.word	0x0800bd58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000194 	.word	0x20000194
 80001d0:	0800bd58 	.word	0x0800bd58

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <MX_CRC_Init+0x3c>)
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <MX_CRC_Init+0x40>)
 80004e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_CRC_Init+0x3c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <MX_CRC_Init+0x3c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_CRC_Init+0x3c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <MX_CRC_Init+0x3c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_CRC_Init+0x3c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <MX_CRC_Init+0x3c>)
 8000502:	f001 f90b 	bl	800171c <HAL_CRC_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800050c:	f000 fb2a 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200001ac 	.word	0x200001ac
 8000518:	40023000 	.word	0x40023000

0800051c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_CRC_MspInit+0x38>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10b      	bne.n	8000546 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_CRC_MspInit+0x3c>)
 8000530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_CRC_MspInit+0x3c>)
 8000534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000538:	6493      	str	r3, [r2, #72]	; 0x48
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_CRC_MspInit+0x3c>)
 800053c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800053e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023000 	.word	0x40023000
 8000558:	40021000 	.word	0x40021000

0800055c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_DMA_Init+0x38>)
 8000564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <MX_DMA_Init+0x38>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6493      	str	r3, [r2, #72]	; 0x48
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_DMA_Init+0x38>)
 8000570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2039      	movs	r0, #57	; 0x39
 8000580:	f001 f895 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000584:	2039      	movs	r0, #57	; 0x39
 8000586:	f001 f8ae 	bl	80016e6 <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b99      	ldr	r3, [pc, #612]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a98      	ldr	r2, [pc, #608]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b96      	ldr	r3, [pc, #600]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b93      	ldr	r3, [pc, #588]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a92      	ldr	r2, [pc, #584]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b90      	ldr	r3, [pc, #576]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b8d      	ldr	r3, [pc, #564]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a8c      	ldr	r2, [pc, #560]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b8a      	ldr	r3, [pc, #552]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b87      	ldr	r3, [pc, #540]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a86      	ldr	r2, [pc, #536]	; (8000814 <MX_GPIO_Init+0x27c>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b84      	ldr	r3, [pc, #528]	; (8000814 <MX_GPIO_Init+0x27c>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	4b81      	ldr	r3, [pc, #516]	; (8000814 <MX_GPIO_Init+0x27c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a80      	ldr	r2, [pc, #512]	; (8000814 <MX_GPIO_Init+0x27c>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b7e      	ldr	r3, [pc, #504]	; (8000814 <MX_GPIO_Init+0x27c>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GRN_Pin|PROBE1_EN_Pin|PROBE2_EN_Pin
 8000626:	2200      	movs	r2, #0
 8000628:	f64d 417c 	movw	r1, #56444	; 0xdc7c
 800062c:	487a      	ldr	r0, [pc, #488]	; (8000818 <MX_GPIO_Init+0x280>)
 800062e:	f001 fcbf 	bl	8001fb0 <HAL_GPIO_WritePin>
                          |FLASH_WP_Pin|FLASH_PW_Pin|CHARG_EN_Pin|LCD_EN_Pin
                          |LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_EN_GPIO_Port, NFC_EN_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2101      	movs	r1, #1
 8000636:	4879      	ldr	r0, [pc, #484]	; (800081c <MX_GPIO_Init+0x284>)
 8000638:	f001 fcba 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PROBE_SW_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2112      	movs	r1, #18
 8000640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000644:	f001 fcb4 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_EN_Pin|TOUCH_RST_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f248 0180 	movw	r1, #32896	; 0x8080
 800064e:	4874      	ldr	r0, [pc, #464]	; (8000820 <MX_GPIO_Init+0x288>)
 8000650:	f001 fcae 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2104      	movs	r1, #4
 8000658:	4872      	ldr	r0, [pc, #456]	; (8000824 <MX_GPIO_Init+0x28c>)
 800065a:	f001 fca9 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000664:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4868      	ldr	r0, [pc, #416]	; (8000818 <MX_GPIO_Init+0x280>)
 8000676:	f001 fb21 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GRN_Pin|PROBE1_EN_Pin|PROBE2_EN_Pin
 800067a:	f64d 437c 	movw	r3, #56444	; 0xdc7c
 800067e:	617b      	str	r3, [r7, #20]
                          |FLASH_WP_Pin|FLASH_PW_Pin|CHARG_EN_Pin|LCD_EN_Pin
                          |LCD_RST_Pin|LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4861      	ldr	r0, [pc, #388]	; (8000818 <MX_GPIO_Init+0x280>)
 8000694:	f001 fb12 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_EN_Pin;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NFC_EN_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	485b      	ldr	r0, [pc, #364]	; (800081c <MX_GPIO_Init+0x284>)
 80006b0:	f001 fb04 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_GPO_Pin;
 80006b4:	2302      	movs	r3, #2
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NFC_GPO_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4854      	ldr	r0, [pc, #336]	; (800081c <MX_GPIO_Init+0x284>)
 80006ca:	f001 faf7 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PROBE_SW_Pin|FLASH_CS_Pin;
 80006ce:	2312      	movs	r3, #18
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f001 fae8 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROBE1_RDY_Pin|PROBE2_RDY_Pin;
 80006ec:	2306      	movs	r3, #6
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4848      	ldr	r0, [pc, #288]	; (8000820 <MX_GPIO_Init+0x288>)
 8000700:	f001 fadc 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4841      	ldr	r0, [pc, #260]	; (8000820 <MX_GPIO_Init+0x288>)
 800071a:	f001 facf 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = _5V_EN_Pin|TOUCH_RST_Pin;
 800071e:	f248 0380 	movw	r3, #32896	; 0x8080
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	483a      	ldr	r0, [pc, #232]	; (8000820 <MX_GPIO_Init+0x288>)
 8000738:	f001 fac0 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHARG_DCT_Pin|SPL_DCT_Pin;
 800073c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4831      	ldr	r0, [pc, #196]	; (8000818 <MX_GPIO_Init+0x280>)
 8000752:	f001 fab3 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	482b      	ldr	r0, [pc, #172]	; (8000818 <MX_GPIO_Init+0x280>)
 800076c:	f001 faa6 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000770:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f001 fa98 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800078c:	2304      	movs	r3, #4
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4820      	ldr	r0, [pc, #128]	; (8000824 <MX_GPIO_Init+0x28c>)
 80007a4:	f001 fa8a 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80007a8:	2340      	movs	r3, #64	; 0x40
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <MX_GPIO_Init+0x288>)
 80007be:	f001 fa7d 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007c2:	2308      	movs	r3, #8
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_GPIO_Init+0x284>)
 80007d6:	f001 fa71 	bl	8001cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2007      	movs	r0, #7
 80007e0:	f000 ff65 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007e4:	2007      	movs	r0, #7
 80007e6:	f000 ff7e 	bl	80016e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2017      	movs	r0, #23
 80007f0:	f000 ff5d 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007f4:	2017      	movs	r0, #23
 80007f6:	f000 ff76 	bl	80016e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f000 ff55 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000804:	2028      	movs	r0, #40	; 0x28
 8000806:	f000 ff6e 	bl	80016e6 <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	48000800 	.word	0x48000800
 800081c:	48001c00 	.word	0x48001c00
 8000820:	48000400 	.word	0x48000400
 8000824:	48000c00 	.word	0x48000c00

08000828 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_I2C1_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_I2C1_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_I2C1_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_I2C1_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_I2C1_Init+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_I2C1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <MX_I2C1_Init+0x74>)
 8000864:	f001 fbdf 	bl	8002026 <HAL_I2C_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086e:	f000 f979 	bl	8000b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_I2C1_Init+0x74>)
 8000876:	f001 fc65 	bl	8002144 <HAL_I2CEx_ConfigAnalogFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 f970 	bl	8000b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_I2C1_Init+0x74>)
 8000888:	f001 fca7 	bl	80021da <HAL_I2CEx_ConfigDigitalFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 f967 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001d0 	.word	0x200001d0
 80008a0:	40005400 	.word	0x40005400
 80008a4:	0010061a 	.word	0x0010061a

080008a8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <MX_I2C4_Init+0x80>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000107;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008b4:	f240 1207 	movw	r2, #263	; 0x107
 80008b8:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008e4:	480f      	ldr	r0, [pc, #60]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008e6:	f001 fb9e 	bl	8002026 <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C4_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f938 	bl	8000b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <MX_I2C4_Init+0x7c>)
 80008f8:	f001 fc24 	bl	8002144 <HAL_I2CEx_ConfigAnalogFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 f92f 	bl	8000b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_I2C4_Init+0x7c>)
 800090a:	f001 fc66 	bl	80021da <HAL_I2CEx_ConfigDigitalFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000914:	f000 f926 	bl	8000b64 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C4);
 8000918:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800091c:	f001 fcaa 	bl	8002274 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000224 	.word	0x20000224
 8000928:	40008400 	.word	0x40008400

0800092c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0a6      	sub	sp, #152	; 0x98
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	2268      	movs	r2, #104	; 0x68
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f00b f9fb 	bl	800bd48 <memset>
  if(i2cHandle->Instance==I2C1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a43      	ldr	r2, [pc, #268]	; (8000a64 <HAL_I2C_MspInit+0x138>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d13d      	bne.n	80009d8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800095c:	2340      	movs	r3, #64	; 0x40
 800095e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4618      	mov	r0, r3
 800096c:	f004 f8da 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000976:	f000 f8f5 	bl	8000b64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a3a      	ldr	r2, [pc, #232]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOUCH_SCL_Pin|TOUCH_SDA_Pin;
 8000992:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099a:	2312      	movs	r3, #18
 800099c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ac:	2304      	movs	r3, #4
 80009ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80009b6:	4619      	mov	r1, r3
 80009b8:	482c      	ldr	r0, [pc, #176]	; (8000a6c <HAL_I2C_MspInit+0x140>)
 80009ba:	f001 f97f 	bl	8001cbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 80009c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80009d6:	e040      	b.n	8000a5a <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C4)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <HAL_I2C_MspInit+0x144>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d13b      	bne.n	8000a5a <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80009e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_HSI;
 80009e8:	2302      	movs	r3, #2
 80009ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 f897 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 80009fc:	f000 f8b2 	bl	8000b64 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = NFC_SCL_Pin|NFC_SDA_Pin;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C4;
 8000a30:	2302      	movs	r3, #2
 8000a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <HAL_I2C_MspInit+0x148>)
 8000a3e:	f001 f93d 	bl	8001cbc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 8000a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_I2C_MspInit+0x13c>)
 8000a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
}
 8000a5a:	bf00      	nop
 8000a5c:	3798      	adds	r7, #152	; 0x98
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40005400 	.word	0x40005400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	40008400 	.word	0x40008400
 8000a74:	48000800 	.word	0x48000800

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fcc7 	bl	800140e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f819 	bl	8000ab6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f7ff fd88 	bl	8000598 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a88:	f7ff fd68 	bl	800055c <MX_DMA_Init>
  MX_CRC_Init();
 8000a8c:	f7ff fd24 	bl	80004d8 <MX_CRC_Init>
  MX_I2C1_Init();
 8000a90:	f7ff feca 	bl	8000828 <MX_I2C1_Init>
  MX_I2C4_Init();
 8000a94:	f7ff ff08 	bl	80008a8 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000a98:	f000 f86a 	bl	8000b70 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000a9c:	f000 f8a6 	bl	8000bec <MX_SPI3_Init>
  MX_TIM3_Init();
 8000aa0:	f000 fa34 	bl	8000f0c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000aa4:	f000 fb02 	bl	80010ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aa8:	f000 fb30 	bl	800110c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000aac:	f000 fb5e 	bl	800116c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000ab0:	f00a fb64 	bl	800b17c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <main+0x3c>

08000ab6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b096      	sub	sp, #88	; 0x58
 8000aba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2244      	movs	r2, #68	; 0x44
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00b f93f 	bl	800bd48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ad8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000adc:	f003 f984 	bl	8003de8 <HAL_PWREx_ControlVoltageScaling>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ae6:	f000 f83d 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000aea:	2312      	movs	r3, #18
 8000aec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2340      	movs	r3, #64	; 0x40
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000b10:	2318      	movs	r3, #24
 8000b12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b14:	2307      	movs	r3, #7
 8000b16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 f9c5 	bl	8003eb4 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b30:	f000 f818 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 fdc5 	bl	80046dc <HAL_RCC_ClockConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b58:	f000 f804 	bl	8000b64 <Error_Handler>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3758      	adds	r7, #88	; 0x58
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b76:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <MX_SPI1_Init+0x78>)
 8000b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bca:	2208      	movs	r2, #8
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bd0:	f004 fb06 	bl	80051e0 <HAL_SPI_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bda:	f7ff ffc3 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000278 	.word	0x20000278
 8000be8:	40013000 	.word	0x40013000

08000bec <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <MX_SPI3_Init+0x78>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c3a:	2207      	movs	r2, #7
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_SPI3_Init+0x74>)
 8000c4c:	f004 fac8 	bl	80051e0 <HAL_SPI_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c56:	f7ff ff85 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200002dc 	.word	0x200002dc
 8000c64:	40003c00 	.word	0x40003c00

08000c68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a47      	ldr	r2, [pc, #284]	; (8000da4 <HAL_SPI_MspInit+0x13c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d129      	bne.n	8000cde <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8e:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c94:	6613      	str	r3, [r2, #96]	; 0x60
 8000c96:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8000cba:	23e0      	movs	r3, #224	; 0xe0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd8:	f000 fff0 	bl	8001cbc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cdc:	e05d      	b.n	8000d9a <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a32      	ldr	r2, [pc, #200]	; (8000dac <HAL_SPI_MspInit+0x144>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d158      	bne.n	8000d9a <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cec:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_SPI_MspInit+0x140>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000d18:	2338      	movs	r3, #56	; 0x38
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d28:	2306      	movs	r3, #6
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	481f      	ldr	r0, [pc, #124]	; (8000db0 <HAL_SPI_MspInit+0x148>)
 8000d34:	f000 ffc2 	bl	8001cbc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <HAL_SPI_MspInit+0x150>)
 8000d3c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d46:	2210      	movs	r2, #16
 8000d48:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d70:	f000 fdbe 	bl	80018f0 <HAL_DMA_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_SPI_MspInit+0x116>
      Error_Handler();
 8000d7a:	f7ff fef3 	bl	8000b64 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d82:	655a      	str	r2, [r3, #84]	; 0x54
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_SPI_MspInit+0x14c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2033      	movs	r0, #51	; 0x33
 8000d90:	f000 fc8d 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d94:	2033      	movs	r0, #51	; 0x33
 8000d96:	f000 fca6 	bl	80016e6 <HAL_NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	3730      	adds	r7, #48	; 0x30
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40003c00 	.word	0x40003c00
 8000db0:	48000400 	.word	0x48000400
 8000db4:	20000340 	.word	0x20000340
 8000db8:	4002041c 	.word	0x4002041c

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_MspInit+0x44>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_MspInit+0x44>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_MspInit+0x44>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_MspInit+0x44>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 fb32 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_GPO_Pin);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f001 f8bf 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8000e6a:	2040      	movs	r0, #64	; 0x40
 8000e6c:	f001 f8b8 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <USART2_IRQHandler+0x10>)
 8000e7a:	f005 fa4d 	bl	8006318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000458 	.word	0x20000458

08000e88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <USART3_IRQHandler+0x10>)
 8000e8e:	f005 fa43 	bl	8006318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200004dc 	.word	0x200004dc

08000e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000ea0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ea4:	f001 f89c 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <SPI3_IRQHandler+0x10>)
 8000eb2:	f004 fa39 	bl	8005328 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200002dc 	.word	0x200002dc

08000ec0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <DMA2_Channel2_IRQHandler+0x10>)
 8000ec6:	f000 fe4a 	bl	8001b5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000340 	.word	0x20000340

08000ed4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <USB_IRQHandler+0x10>)
 8000eda:	f001 fb24 	bl	8002526 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20001a38 	.word	0x20001a38

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f40:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <MX_TIM3_Init+0xec>)
 8000f42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f64:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f66:	f004 fafe 	bl	8005566 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f70:	f7ff fdf8 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f82:	f004 fcbd 	bl	8005900 <HAL_TIM_ConfigClockSource>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f8c:	f7ff fdea 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f90:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f92:	f004 fb3f 	bl	8005614 <HAL_TIM_PWM_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f9c:	f7ff fde2 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000fb0:	f005 f8f6 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fba:	f7ff fdd3 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2360      	movs	r3, #96	; 0x60
 8000fc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000fd6:	f004 fb7f 	bl	80056d8 <HAL_TIM_PWM_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000fe0:	f7ff fdc0 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM3_Init+0xe8>)
 8000fe6:	f000 f829 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000fea:	bf00      	nop
 8000fec:	3738      	adds	r7, #56	; 0x38
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000388 	.word	0x20000388
 8000ff8:	40000400 	.word	0x40000400

08000ffc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_TIM_Base_MspInit+0x38>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10b      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_TIM_Base_MspInit+0x3c>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <HAL_TIM_Base_MspInit+0x3c>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6593      	str	r3, [r2, #88]	; 0x58
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_TIM_Base_MspInit+0x3c>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40000400 	.word	0x40000400
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <HAL_TIM_MspPostInit+0x64>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d11b      	bne.n	8001096 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001076:	2301      	movs	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001086:	2302      	movs	r3, #2
 8001088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_TIM_MspPostInit+0x6c>)
 8001092:	f000 fe13 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40000400 	.word	0x40000400
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000400 	.word	0x48000400

080010ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_USART1_UART_Init+0x5c>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010f0:	f005 f8c4 	bl	800627c <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010fa:	f7ff fd33 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200003d4 	.word	0x200003d4
 8001108:	40013800 	.word	0x40013800

0800110c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_USART2_UART_Init+0x58>)
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_USART2_UART_Init+0x58>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USART2_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_USART2_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USART2_UART_Init+0x58>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USART2_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USART2_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USART2_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USART2_UART_Init+0x58>)
 8001150:	f005 f894 	bl	800627c <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800115a:	f7ff fd03 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000458 	.word	0x20000458
 8001168:	40004400 	.word	0x40004400

0800116c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <MX_USART3_UART_Init+0x5c>)
 8001174:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 8001198:	f44f 7240 	mov.w	r2, #768	; 0x300
 800119c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_USART3_UART_Init+0x58>)
 80011b2:	f005 f863 	bl	800627c <HAL_UART_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80011bc:	f7ff fcd2 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200004dc 	.word	0x200004dc
 80011c8:	40004800 	.word	0x40004800

080011cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0a8      	sub	sp, #160	; 0xa0
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	2268      	movs	r2, #104	; 0x68
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00a fdab 	bl	800bd48 <memset>
  if(uartHandle->Instance==USART1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6c      	ldr	r2, [pc, #432]	; (80013a8 <HAL_UART_MspInit+0x1dc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d13d      	bne.n	8001278 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fc8b 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001214:	f7ff fca6 	bl	8000b64 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 800121a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121c:	4a63      	ldr	r2, [pc, #396]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 800121e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001222:	6613      	str	r3, [r2, #96]	; 0x60
 8001224:	4b61      	ldr	r3, [pc, #388]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 8001226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122c:	623b      	str	r3, [r7, #32]
 800122e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b5e      	ldr	r3, [pc, #376]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	4a5d      	ldr	r2, [pc, #372]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123c:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8001248:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800124c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001262:	2307      	movs	r3, #7
 8001264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f000 fd23 	bl	8001cbc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001276:	e092      	b.n	800139e <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_UART_MspInit+0x1e4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d144      	bne.n	800130c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001282:	2302      	movs	r3, #2
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8001286:	2308      	movs	r3, #8
 8001288:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fc48 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800129a:	f7ff fc63 	bl	8000b64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800129e:	4b43      	ldr	r3, [pc, #268]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	4a42      	ldr	r2, [pc, #264]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	6593      	str	r3, [r2, #88]	; 0x58
 80012aa:	4b40      	ldr	r3, [pc, #256]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a3c      	ldr	r2, [pc, #240]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PROBE_TX_Pin|PROBE_RX_Pin;
 80012ce:	230c      	movs	r3, #12
 80012d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e6:	2307      	movs	r3, #7
 80012e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f000 fce1 	bl	8001cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2026      	movs	r0, #38	; 0x26
 8001300:	f000 f9d5 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001304:	2026      	movs	r0, #38	; 0x26
 8001306:	f000 f9ee 	bl	80016e6 <HAL_NVIC_EnableIRQ>
}
 800130a:	e048      	b.n	800139e <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_UART_MspInit+0x1e8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d143      	bne.n	800139e <HAL_UART_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001316:	2304      	movs	r3, #4
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 800131a:	2320      	movs	r3, #32
 800131c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fbfe 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_UART_MspInit+0x166>
      Error_Handler();
 800132e:	f7ff fc19 	bl	8000b64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_UART_MspInit+0x1e0>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin|BLE_CTS_Pin|BLE_RTS_Pin;
 8001362:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8001366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800137c:	2307      	movs	r3, #7
 800137e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001386:	4619      	mov	r1, r3
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <HAL_UART_MspInit+0x1ec>)
 800138a:	f000 fc97 	bl	8001cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2027      	movs	r0, #39	; 0x27
 8001394:	f000 f98b 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001398:	2027      	movs	r0, #39	; 0x27
 800139a:	f000 f9a4 	bl	80016e6 <HAL_NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	37a0      	adds	r7, #160	; 0xa0
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40004400 	.word	0x40004400
 80013b4:	40004800 	.word	0x40004800
 80013b8:	48000400 	.word	0x48000400

080013bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c0:	f7ff fd92 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LoopForever+0xe>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	; (8001408 <LoopForever+0x16>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ea:	f00a fc89 	bl	800bd00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ee:	f7ff fb43 	bl	8000a78 <main>

080013f2 <LoopForever>:

LoopForever:
    b LoopForever
 80013f2:	e7fe      	b.n	80013f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013f4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001400:	0800be10 	.word	0x0800be10
  ldr r2, =_sbss
 8001404:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001408:	20001f54 	.word	0x20001f54

0800140c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_IRQHandler>

0800140e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f93d 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141e:	200f      	movs	r0, #15
 8001420:	f000 f80e 	bl	8001440 <HAL_InitTick>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e001      	b.n	8001434 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001430:	f7ff fcc4 	bl	8000dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001434:	79fb      	ldrb	r3, [r7, #7]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_InitTick+0x6c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d023      	beq.n	800149c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_InitTick+0x70>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_InitTick+0x6c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f949 	bl	8001702 <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d809      	bhi.n	8001490 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f913 	bl	80016ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_InitTick+0x74>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e007      	b.n	80014a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e004      	b.n	80014a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e001      	b.n	80014a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000560 	.word	0x20000560

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000560 	.word	0x20000560

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	; (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff29 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff3e 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff31 	bl	800155c <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffa2 	bl	8001654 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e054      	b.n	80017d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7f5b      	ldrb	r3, [r3, #29]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7fe feec 	bl	800051c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10c      	bne.n	800176c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_CRC_Init+0xc4>)
 8001758:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0218 	bic.w	r2, r2, #24
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	e00c      	b.n	8001786 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	461a      	mov	r2, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f834 	bl	80017e4 <HAL_CRCEx_Polynomial_Set>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e028      	b.n	80017d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	795b      	ldrb	r3, [r3, #5]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d105      	bne.n	800179a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f04f 32ff 	mov.w	r2, #4294967295
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	e004      	b.n	80017a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6912      	ldr	r2, [r2, #16]
 80017a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	04c11db7 	.word	0x04c11db7

080017e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80017f4:	231f      	movs	r3, #31
 80017f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80017f8:	bf00      	nop
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1e5a      	subs	r2, r3, #1
 80017fe:	613a      	str	r2, [r7, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <HAL_CRCEx_Polynomial_Set+0x34>
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b18      	cmp	r3, #24
 800181c:	d846      	bhi.n	80018ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	080018b3 	.word	0x080018b3
 8001828:	080018ad 	.word	0x080018ad
 800182c:	080018ad 	.word	0x080018ad
 8001830:	080018ad 	.word	0x080018ad
 8001834:	080018ad 	.word	0x080018ad
 8001838:	080018ad 	.word	0x080018ad
 800183c:	080018ad 	.word	0x080018ad
 8001840:	080018ad 	.word	0x080018ad
 8001844:	080018a1 	.word	0x080018a1
 8001848:	080018ad 	.word	0x080018ad
 800184c:	080018ad 	.word	0x080018ad
 8001850:	080018ad 	.word	0x080018ad
 8001854:	080018ad 	.word	0x080018ad
 8001858:	080018ad 	.word	0x080018ad
 800185c:	080018ad 	.word	0x080018ad
 8001860:	080018ad 	.word	0x080018ad
 8001864:	08001895 	.word	0x08001895
 8001868:	080018ad 	.word	0x080018ad
 800186c:	080018ad 	.word	0x080018ad
 8001870:	080018ad 	.word	0x080018ad
 8001874:	080018ad 	.word	0x080018ad
 8001878:	080018ad 	.word	0x080018ad
 800187c:	080018ad 	.word	0x080018ad
 8001880:	080018ad 	.word	0x080018ad
 8001884:	08001889 	.word	0x08001889
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b06      	cmp	r3, #6
 800188c:	d913      	bls.n	80018b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001892:	e010      	b.n	80018b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b07      	cmp	r3, #7
 8001898:	d90f      	bls.n	80018ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800189e:	e00c      	b.n	80018ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2b0f      	cmp	r3, #15
 80018a4:	d90b      	bls.n	80018be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018aa:	e008      	b.n	80018be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	75fb      	strb	r3, [r7, #23]
      break;
 80018b0:	e006      	b.n	80018c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80018b2:	bf00      	nop
 80018b4:	e004      	b.n	80018c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80018b6:	bf00      	nop
 80018b8:	e002      	b.n	80018c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80018ba:	bf00      	nop
 80018bc:	e000      	b.n	80018c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80018be:	bf00      	nop
  }
  if (status == HAL_OK)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 0118 	bic.w	r1, r3, #24
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e098      	b.n	8001a34 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_DMA_Init+0x150>)
 800190a:	429a      	cmp	r2, r3
 800190c:	d80f      	bhi.n	800192e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_DMA_Init+0x154>)
 8001916:	4413      	add	r3, r2
 8001918:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <HAL_DMA_Init+0x158>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	009a      	lsls	r2, r3, #2
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a48      	ldr	r2, [pc, #288]	; (8001a4c <HAL_DMA_Init+0x15c>)
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
 800192c:	e00e      	b.n	800194c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <HAL_DMA_Init+0x160>)
 8001936:	4413      	add	r3, r2
 8001938:	4a43      	ldr	r2, [pc, #268]	; (8001a48 <HAL_DMA_Init+0x158>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	009a      	lsls	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <HAL_DMA_Init+0x164>)
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001966:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019a6:	d039      	beq.n	8001a1c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <HAL_DMA_Init+0x15c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11a      	bne.n	80019e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <HAL_DMA_Init+0x168>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f003 031c 	and.w	r3, r3, #28
 80019be:	210f      	movs	r1, #15
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4924      	ldr	r1, [pc, #144]	; (8001a58 <HAL_DMA_Init+0x168>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_DMA_Init+0x168>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f003 031c 	and.w	r3, r3, #28
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	491d      	ldr	r1, [pc, #116]	; (8001a58 <HAL_DMA_Init+0x168>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
 80019e6:	e019      	b.n	8001a1c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_DMA_Init+0x16c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f003 031c 	and.w	r3, r3, #28
 80019f4:	210f      	movs	r1, #15
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4917      	ldr	r1, [pc, #92]	; (8001a5c <HAL_DMA_Init+0x16c>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_DMA_Init+0x16c>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f003 031c 	and.w	r3, r3, #28
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	4911      	ldr	r1, [pc, #68]	; (8001a5c <HAL_DMA_Init+0x16c>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40020407 	.word	0x40020407
 8001a44:	bffdfff8 	.word	0xbffdfff8
 8001a48:	cccccccd 	.word	0xcccccccd
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	bffdfbf8 	.word	0xbffdfbf8
 8001a54:	40020400 	.word	0x40020400
 8001a58:	400200a8 	.word	0x400200a8
 8001a5c:	400204a8 	.word	0x400204a8

08001a60 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d008      	beq.n	8001a8a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e022      	b.n	8001ad0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 020e 	bic.w	r2, r2, #14
 8001a98:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f003 021c 	and.w	r2, r3, #28
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d005      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2204      	movs	r2, #4
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e029      	b.n	8001b54 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020e 	bic.w	r2, r2, #14
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	f003 021c 	and.w	r2, r3, #28
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
    }
  }
  return status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f003 031c 	and.w	r3, r3, #28
 8001b7e:	2204      	movs	r2, #4
 8001b80:	409a      	lsls	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d026      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x7a>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d021      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0204 	bic.w	r2, r2, #4
 8001bb0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f003 021c 	and.w	r2, r3, #28
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d071      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bd6:	e06c      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	f003 031c 	and.w	r3, r3, #28
 8001be0:	2202      	movs	r2, #2
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d02e      	beq.n	8001c4a <HAL_DMA_IRQHandler+0xec>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d029      	beq.n	8001c4a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020a 	bic.w	r2, r2, #10
 8001c12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f003 021c 	and.w	r2, r3, #28
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2102      	movs	r1, #2
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d038      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c48:	e033      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f003 031c 	and.w	r3, r3, #28
 8001c52:	2208      	movs	r2, #8
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d02a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x156>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d025      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 020e 	bic.w	r2, r2, #14
 8001c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f003 021c 	and.w	r2, r3, #28
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
}
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	e154      	b.n	8001f76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8146 	beq.w	8001f70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d005      	beq.n	8001cfc <HAL_GPIO_Init+0x40>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 0201 	and.w	r2, r3, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d017      	beq.n	8001d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d123      	bne.n	8001dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0203 	and.w	r2, r3, #3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80a0 	beq.w	8001f70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <HAL_GPIO_Init+0x2d8>)
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_GPIO_Init+0x2d8>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3c:	4b55      	ldr	r3, [pc, #340]	; (8001f94 <HAL_GPIO_Init+0x2d8>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e48:	4a53      	ldr	r2, [pc, #332]	; (8001f98 <HAL_GPIO_Init+0x2dc>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e72:	d019      	beq.n	8001ea8 <HAL_GPIO_Init+0x1ec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a49      	ldr	r2, [pc, #292]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a48      	ldr	r2, [pc, #288]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00d      	beq.n	8001ea0 <HAL_GPIO_Init+0x1e4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a47      	ldr	r2, [pc, #284]	; (8001fa4 <HAL_GPIO_Init+0x2e8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x1e0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <HAL_GPIO_Init+0x2ec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_GPIO_Init+0x1dc>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e008      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001e98:	2307      	movs	r3, #7
 8001e9a:	e006      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e004      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e002      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	f002 0203 	and.w	r2, r2, #3
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	4093      	lsls	r3, r2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eba:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_GPIO_Init+0x2dc>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ec8:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f16:	4a25      	ldr	r2, [pc, #148]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f40:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3301      	adds	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f aea3 	bne.w	8001ccc <HAL_GPIO_Init+0x10>
  }
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	48000800 	.word	0x48000800
 8001fa4:	48000c00 	.word	0x48000c00
 8001fa8:	48001000 	.word	0x48001000
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f806 	bl	8002010 <HAL_GPIO_EXTI_Callback>
  }
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40010400 	.word	0x40010400

08002010 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e081      	b.n	800213c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7fe fc6d 	bl	800092c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2224      	movs	r2, #36	; 0x24
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002076:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002086:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	e006      	b.n	80020ae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d104      	bne.n	80020c0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69d9      	ldr	r1, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1a      	ldr	r2, [r3, #32]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	d138      	bne.n	80021cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002164:	2302      	movs	r3, #2
 8002166:	e032      	b.n	80021ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002196:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
  }
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d139      	bne.n	8002264 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e033      	b.n	8002266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2224      	movs	r2, #36	; 0x24
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800222c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_I2CEx_EnableFastModePlus+0x38>)
 800227e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6613      	str	r3, [r2, #96]	; 0x60
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_I2CEx_EnableFastModePlus+0x38>)
 800228a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4905      	ldr	r1, [pc, #20]	; (80022b0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010000 	.word	0x40010000

080022b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b6:	b08b      	sub	sp, #44	; 0x2c
 80022b8:	af06      	add	r7, sp, #24
 80022ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e109      	b.n	80024da <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f009 f940 	bl	800b560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2203      	movs	r2, #3
 80022e4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f005 f81f 	bl	8007330 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	687e      	ldr	r6, [r7, #4]
 80022fa:	466d      	mov	r5, sp
 80022fc:	f106 0410 	add.w	r4, r6, #16
 8002300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002304:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002308:	e885 0003 	stmia.w	r5, {r0, r1}
 800230c:	1d33      	adds	r3, r6, #4
 800230e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f004 ffe5 	bl	80072e0 <USB_CoreInit>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0d8      	b.n	80024da <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f005 f819 	bl	8007366 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e04d      	b.n	80023d6 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	3305      	adds	r3, #5
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	3304      	adds	r3, #4
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	b298      	uxth	r0, r3
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	333a      	adds	r3, #58	; 0x3a
 800237a:	4602      	mov	r2, r0
 800237c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3307      	adds	r3, #7
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	333c      	adds	r3, #60	; 0x3c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3340      	adds	r3, #64	; 0x40
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3344      	adds	r3, #68	; 0x44
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3ac      	bcc.n	800233a <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	e044      	b.n	8002470 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	440b      	add	r3, r1
 8002462:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	3301      	adds	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	d3b5      	bcc.n	80023e6 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	687e      	ldr	r6, [r7, #4]
 8002482:	466d      	mov	r5, sp
 8002484:	f106 0410 	add.w	r4, r6, #16
 8002488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002490:	e885 0003 	stmia.w	r5, {r0, r1}
 8002494:	1d33      	adds	r3, r6, #4
 8002496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f004 ff71 	bl	8007380 <USB_DevInit>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e014      	b.n	80024da <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d102      	bne.n	80024ce <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f001 fc55 	bl	8003d78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f007 f97d 	bl	80097d2 <USB_DevDisconnect>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_PCD_Start+0x16>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e012      	b.n	800251e <HAL_PCD_Start+0x3c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f004 fefc 	bl	8007302 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f007 f948 	bl	80097a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f007 f962 	bl	80097fc <USB_ReadInterrupts>
 8002538:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fb3e 	bl	8002bc6 <PCD_EP_ISR_Handler>

    return;
 800254a:	e110      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d013      	beq.n	800257e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002568:	b292      	uxth	r2, r2
 800256a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f009 f8c1 	bl	800b6f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002574:	2100      	movs	r1, #0
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8fc 	bl	8002774 <HAL_PCD_SetAddress>

    return;
 800257c:	e0f7      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00c      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002590:	b29a      	uxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800259a:	b292      	uxth	r2, r2
 800259c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80025a0:	e0e5      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00c      	beq.n	80025c6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025be:	b292      	uxth	r2, r2
 80025c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80025c4:	e0d3      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d034      	beq.n	800263a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	b292      	uxth	r2, r2
 80025e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0208 	bic.w	r2, r2, #8
 80025fa:	b292      	uxth	r2, r2
 80025fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002612:	2100      	movs	r1, #0
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f009 fb1f 	bl	800bc58 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f009 f8a4 	bl	800b768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002628:	b29a      	uxth	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002632:	b292      	uxth	r2, r2
 8002634:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002638:	e099      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002640:	2b00      	cmp	r3, #0
 8002642:	d027      	beq.n	8002694 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0208 	orr.w	r2, r2, #8
 8002656:	b292      	uxth	r2, r2
 8002658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266e:	b292      	uxth	r2, r2
 8002670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0204 	orr.w	r2, r2, #4
 8002686:	b292      	uxth	r2, r2
 8002688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f009 f851 	bl	800b734 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002692:	e06c      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d040      	beq.n	8002720 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b0:	b292      	uxth	r2, r2
 80026b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d12b      	bne.n	8002718 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0204 	orr.w	r2, r2, #4
 80026d2:	b292      	uxth	r2, r2
 80026d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0208 	orr.w	r2, r2, #8
 80026ea:	b292      	uxth	r2, r2
 80026ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002700:	b29b      	uxth	r3, r3
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800270e:	2101      	movs	r1, #1
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f009 faa1 	bl	800bc58 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002716:	e02a      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f009 f80b 	bl	800b734 <HAL_PCD_SuspendCallback>
    return;
 800271e:	e026      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00f      	beq.n	800274a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800273c:	b292      	uxth	r2, r2
 800273e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f008 ffc9 	bl	800b6da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002748:	e011      	b.n	800276e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002766:	b292      	uxth	r2, r2
 8002768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800276c:	bf00      	nop
  }
}
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_PCD_SetAddress+0x1a>
 800278a:	2302      	movs	r3, #2
 800278c:	e013      	b.n	80027b6 <HAL_PCD_SetAddress+0x42>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f006 ffe8 	bl	800977c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	4608      	mov	r0, r1
 80027c8:	4611      	mov	r1, r2
 80027ca:	461a      	mov	r2, r3
 80027cc:	4603      	mov	r3, r0
 80027ce:	70fb      	strb	r3, [r7, #3]
 80027d0:	460b      	mov	r3, r1
 80027d2:	803b      	strh	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da0f      	bge.n	8002804 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	705a      	strb	r2, [r3, #1]
 8002802:	e00f      	b.n	8002824 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	f003 0207 	and.w	r2, r3, #7
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002830:	883a      	ldrh	r2, [r7, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	78ba      	ldrb	r2, [r7, #2]
 800283a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	785b      	ldrb	r3, [r3, #1]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800284e:	78bb      	ldrb	r3, [r7, #2]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d102      	bne.n	800285a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_PCD_EP_Open+0xaa>
 8002864:	2302      	movs	r3, #2
 8002866:	e00e      	b.n	8002886 <HAL_PCD_EP_Open+0xc8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	4618      	mov	r0, r3
 8002878:	f004 fda4 	bl	80073c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8002884:	7afb      	ldrb	r3, [r7, #11]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800289a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da0f      	bge.n	80028c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00f      	b.n	80028e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 0207 	and.w	r2, r3, #7
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_PCD_EP_Close+0x6e>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e00e      	b.n	800291a <HAL_PCD_EP_Close+0x8c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	4618      	mov	r0, r3
 800290c:	f005 f914 	bl	8007b38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	460b      	mov	r3, r1
 8002930:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	f003 0207 	and.w	r2, r3, #7
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	3304      	adds	r3, #4
 800294a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002964:	7afb      	ldrb	r3, [r7, #11]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	b2da      	uxtb	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002970:	7afb      	ldrb	r3, [r7, #11]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6979      	ldr	r1, [r7, #20]
 8002980:	4618      	mov	r0, r3
 8002982:	f005 fac6 	bl	8007f12 <USB_EPStartXfer>
 8002986:	e005      	b.n	8002994 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6979      	ldr	r1, [r7, #20]
 800298e:	4618      	mov	r0, r3
 8002990:	f005 fabf 	bl	8007f12 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 0207 	and.w	r2, r3, #7
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029c0:	681b      	ldr	r3, [r3, #0]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	460b      	mov	r3, r1
 80029dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029de:	7afb      	ldrb	r3, [r7, #11]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a28:	7afb      	ldrb	r3, [r7, #11]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6979      	ldr	r1, [r7, #20]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 fa6a 	bl	8007f12 <USB_EPStartXfer>
 8002a3e:	e005      	b.n	8002a4c <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6979      	ldr	r1, [r7, #20]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f005 fa63 	bl	8007f12 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 0207 	and.w	r2, r3, #7
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d901      	bls.n	8002a74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e04e      	b.n	8002b12 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da0f      	bge.n	8002a9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	3304      	adds	r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	705a      	strb	r2, [r3, #1]
 8002a9a:	e00d      	b.n	8002ab8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_PCD_EP_SetStall+0x82>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e01c      	b.n	8002b12 <HAL_PCD_EP_SetStall+0xbc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f006 fd49 	bl	800957e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f006 fe8a 	bl	800981c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 020f 	and.w	r2, r3, #15
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d901      	bls.n	8002b38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e042      	b.n	8002bbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	da0f      	bge.n	8002b60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	705a      	strb	r2, [r3, #1]
 8002b5e:	e00f      	b.n	8002b80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	f003 0207 	and.w	r2, r3, #7
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	3304      	adds	r3, #4
 8002b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_PCD_EP_ClrStall+0x86>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e00e      	b.n	8002bbe <HAL_PCD_EP_ClrStall+0xa4>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f006 fd36 	bl	8009620 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b096      	sub	sp, #88	; 0x58
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bce:	e3a9      	b.n	8003324 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bdc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002bea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 8169 	bne.w	8002ec6 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d150      	bne.n	8002ca2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	89fb      	ldrh	r3, [r7, #14]
 8002c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	332c      	adds	r3, #44	; 0x2c
 8002c28:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	441a      	add	r2, r3
 8002c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c60:	2100      	movs	r1, #0
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f008 fd1f 	bl	800b6a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8357 	beq.w	8003324 <PCD_EP_ISR_Handler+0x75e>
 8002c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 8352 	bne.w	8003324 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b292      	uxth	r2, r2
 8002c94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002ca0:	e340      	b.n	8003324 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002cb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d032      	beq.n	8002d26 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8002cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f006 fddc 	bl	80098b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	823b      	strh	r3, [r7, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	8a3a      	ldrh	r2, [r7, #16]
 8002d16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d1a:	b292      	uxth	r2, r2
 8002d1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f008 fc94 	bl	800b64c <HAL_PCD_SetupStageCallback>
 8002d24:	e2fe      	b.n	8003324 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d26:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f280 82fa 	bge.w	8003324 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	83fb      	strh	r3, [r7, #30]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	8bfa      	ldrh	r2, [r7, #30]
 8002d46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d019      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x1ec>
 8002d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8c:	6959      	ldr	r1, [r3, #20]
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f006 fd8e 	bl	80098b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	441a      	add	r2, r3
 8002da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002daa:	2100      	movs	r1, #0
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f008 fc5f 	bl	800b670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002dbc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 82ad 	bne.w	8003324 <PCD_EP_ISR_Handler+0x75e>
 8002dca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002dce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dd6:	f000 82a5 	beq.w	8003324 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8002e00:	d918      	bls.n	8002e34 <PCD_EP_ISR_Handler+0x26e>
 8002e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <PCD_EP_ISR_Handler+0x256>
 8002e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	029b      	lsls	r3, r3, #10
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	e029      	b.n	8002e88 <PCD_EP_ISR_Handler+0x2c2>
 8002e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d112      	bne.n	8002e62 <PCD_EP_ISR_Handler+0x29c>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	e012      	b.n	8002e88 <PCD_EP_ISR_Handler+0x2c2>
 8002e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <PCD_EP_ISR_Handler+0x2b6>
 8002e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e78:	3301      	adds	r3, #1
 8002e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	029b      	lsls	r3, r3, #10
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e98:	827b      	strh	r3, [r7, #18]
 8002e9a:	8a7b      	ldrh	r3, [r7, #18]
 8002e9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ea0:	827b      	strh	r3, [r7, #18]
 8002ea2:	8a7b      	ldrh	r3, [r7, #18]
 8002ea4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ea8:	827b      	strh	r3, [r7, #18]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	8a7b      	ldrh	r3, [r7, #18]
 8002eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	8013      	strh	r3, [r2, #0]
 8002ec4:	e22e      	b.n	8003324 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002eda:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f280 80f7 	bge.w	80030d2 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002efa:	4013      	ands	r3, r2
 8002efc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f16:	b292      	uxth	r2, r2
 8002f18:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f1a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f34:	7b1b      	ldrb	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d123      	bne.n	8002f82 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002f62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 808e 	beq.w	8003088 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f72:	6959      	ldr	r1, [r3, #20]
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	88da      	ldrh	r2, [r3, #6]
 8002f78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f7c:	f006 fc9c 	bl	80098b8 <USB_ReadPMA>
 8002f80:	e082      	b.n	8003088 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f84:	78db      	ldrb	r3, [r3, #3]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d10a      	bne.n	8002fa0 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f8a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f9d4 	bl	8003340 <HAL_PCD_EP_DB_Receive>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002f9e:	e073      	b.n	8003088 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d022      	beq.n	8003044 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	4413      	add	r3, r2
 8003018:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003022:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003026:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02c      	beq.n	8003088 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003034:	6959      	ldr	r1, [r3, #20]
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	891a      	ldrh	r2, [r3, #8]
 800303a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800303e:	f006 fc3b 	bl	80098b8 <USB_ReadPMA>
 8003042:	e021      	b.n	8003088 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304c:	b29b      	uxth	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4413      	add	r3, r2
 800305e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003068:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800306c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307a:	6959      	ldr	r1, [r3, #20]
 800307c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307e:	895a      	ldrh	r2, [r3, #10]
 8003080:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003084:	f006 fc18 	bl	80098b8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003090:	441a      	add	r2, r3
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800309e:	441a      	add	r2, r3
 80030a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <PCD_EP_ISR_Handler+0x4f2>
 80030ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d206      	bcs.n	80030c6 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f008 fad6 	bl	800b670 <HAL_PCD_DataOutStageCallback>
 80030c4:	e005      	b.n	80030d2 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 ff20 	bl	8007f12 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8122 	beq.w	8003324 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80030e0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800310c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003110:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800312a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800312e:	b29b      	uxth	r3, r3
 8003130:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003134:	78db      	ldrb	r3, [r3, #3]
 8003136:	2b01      	cmp	r3, #1
 8003138:	f040 80a2 	bne.w	8003280 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313e:	2200      	movs	r2, #0
 8003140:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	7b1b      	ldrb	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8093 	beq.w	8003272 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800314c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d046      	beq.n	80031e6 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d126      	bne.n	80031ae <PCD_EP_ISR_Handler+0x5e8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	4413      	add	r3, r2
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	00da      	lsls	r2, r3, #3
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	4413      	add	r3, r2
 8003182:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003192:	b29a      	uxth	r2, r3
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	801a      	strh	r2, [r3, #0]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	e061      	b.n	8003272 <PCD_EP_ISR_Handler+0x6ac>
 80031ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d15d      	bne.n	8003272 <PCD_EP_ISR_Handler+0x6ac>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	4413      	add	r3, r2
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	00da      	lsls	r2, r3, #3
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	4413      	add	r3, r2
 80031d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	2200      	movs	r2, #0
 80031e2:	801a      	strh	r2, [r3, #0]
 80031e4:	e045      	b.n	8003272 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d126      	bne.n	8003242 <PCD_EP_ISR_Handler+0x67c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	637b      	str	r3, [r7, #52]	; 0x34
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	4413      	add	r3, r2
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
 800320c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	00da      	lsls	r2, r3, #3
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	4413      	add	r3, r2
 8003216:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003226:	b29a      	uxth	r2, r3
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800323a:	b29a      	uxth	r2, r3
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	e017      	b.n	8003272 <PCD_EP_ISR_Handler+0x6ac>
 8003242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003244:	785b      	ldrb	r3, [r3, #1]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d113      	bne.n	8003272 <PCD_EP_ISR_Handler+0x6ac>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003258:	4413      	add	r3, r2
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800325c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	00da      	lsls	r2, r3, #3
 8003262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003264:	4413      	add	r3, r2
 8003266:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	2200      	movs	r2, #0
 8003270:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f008 fa14 	bl	800b6a6 <HAL_PCD_DataInStageCallback>
 800327e:	e051      	b.n	8003324 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003280:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d144      	bne.n	8003316 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003294:	b29b      	uxth	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80032b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032bc:	429a      	cmp	r2, r3
 80032be:	d907      	bls.n	80032d0 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80032c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032c8:	1ad2      	subs	r2, r2, r3
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	619a      	str	r2, [r3, #24]
 80032ce:	e002      	b.n	80032d6 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80032d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d2:	2200      	movs	r2, #0
 80032d4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f008 f9de 	bl	800b6a6 <HAL_PCD_DataInStageCallback>
 80032ea:	e01b      	b.n	8003324 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80032ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032f4:	441a      	add	r2, r3
 80032f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80032fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003302:	441a      	add	r2, r3
 8003304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003306:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800330e:	4618      	mov	r0, r3
 8003310:	f004 fdff 	bl	8007f12 <USB_EPStartXfer>
 8003314:	e006      	b.n	8003324 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003316:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800331a:	461a      	mov	r2, r3
 800331c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f917 	bl	8003552 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800332c:	b29b      	uxth	r3, r3
 800332e:	b21b      	sxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f6ff ac4d 	blt.w	8002bd0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3758      	adds	r7, #88	; 0x58
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d07c      	beq.n	8003452 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003360:	b29b      	uxth	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	4413      	add	r3, r2
 8003372:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800337c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	8b7b      	ldrh	r3, [r7, #26]
 8003384:	429a      	cmp	r2, r3
 8003386:	d306      	bcc.n	8003396 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	1ad2      	subs	r2, r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	619a      	str	r2, [r3, #24]
 8003394:	e002      	b.n	800339c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d123      	bne.n	80033ec <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	833b      	strh	r3, [r7, #24]
 80033c0:	8b3b      	ldrh	r3, [r7, #24]
 80033c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033c6:	833b      	strh	r3, [r7, #24]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	8b3b      	ldrh	r3, [r7, #24]
 80033d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01f      	beq.n	8003436 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003410:	82fb      	strh	r3, [r7, #22]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	8afb      	ldrh	r3, [r7, #22]
 8003422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003436:	8b7b      	ldrh	r3, [r7, #26]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8085 	beq.w	8003548 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6959      	ldr	r1, [r3, #20]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	891a      	ldrh	r2, [r3, #8]
 800344a:	8b7b      	ldrh	r3, [r7, #26]
 800344c:	f006 fa34 	bl	80098b8 <USB_ReadPMA>
 8003450:	e07a      	b.n	8003548 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4413      	add	r3, r2
 800346c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003476:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	8b7b      	ldrh	r3, [r7, #26]
 800347e:	429a      	cmp	r2, r3
 8003480:	d306      	bcc.n	8003490 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	8b7b      	ldrh	r3, [r7, #26]
 8003488:	1ad2      	subs	r2, r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	619a      	str	r2, [r3, #24]
 800348e:	e002      	b.n	8003496 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d123      	bne.n	80034e6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	83fb      	strh	r3, [r7, #30]
 80034ba:	8bfb      	ldrh	r3, [r7, #30]
 80034bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034c0:	83fb      	strh	r3, [r7, #30]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	441a      	add	r2, r3
 80034d0:	8bfb      	ldrh	r3, [r7, #30]
 80034d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11f      	bne.n	8003530 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350a:	83bb      	strh	r3, [r7, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	441a      	add	r2, r3
 800351a:	8bbb      	ldrh	r3, [r7, #28]
 800351c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003530:	8b7b      	ldrh	r3, [r7, #26]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6959      	ldr	r1, [r3, #20]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	895a      	ldrh	r2, [r3, #10]
 8003542:	8b7b      	ldrh	r3, [r7, #26]
 8003544:	f006 f9b8 	bl	80098b8 <USB_ReadPMA>
    }
  }

  return count;
 8003548:	8b7b      	ldrh	r3, [r7, #26]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b0a2      	sub	sp, #136	; 0x88
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 81c5 	beq.w	80038f6 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003574:	b29b      	uxth	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	4413      	add	r3, r2
 8003586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003590:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800359c:	429a      	cmp	r2, r3
 800359e:	d907      	bls.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	619a      	str	r2, [r3, #24]
 80035ae:	e002      	b.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2200      	movs	r2, #0
 80035b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 80b9 	bne.w	8003732 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	785b      	ldrb	r3, [r3, #1]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d126      	bne.n	8003616 <HAL_PCD_EP_DB_Transmit+0xc4>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	4413      	add	r3, r2
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	00da      	lsls	r2, r3, #3
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	4413      	add	r3, r2
 80035ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360e:	b29a      	uxth	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	801a      	strh	r2, [r3, #0]
 8003614:	e01a      	b.n	800364c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	785b      	ldrb	r3, [r3, #1]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d116      	bne.n	800364c <HAL_PCD_EP_DB_Transmit+0xfa>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362c:	b29b      	uxth	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	4413      	add	r3, r2
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	00da      	lsls	r2, r3, #3
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	4413      	add	r3, r2
 8003640:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d126      	bne.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x156>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003668:	b29b      	uxth	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	4413      	add	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	00da      	lsls	r2, r3, #3
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800368c:	b29a      	uxth	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	801a      	strh	r2, [r3, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	e017      	b.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x186>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d113      	bne.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x186>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	4413      	add	r3, r2
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	00da      	lsls	r2, r3, #3
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	4413      	add	r3, r2
 80036cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2200      	movs	r2, #0
 80036d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	4619      	mov	r1, r3
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f007 ffe1 	bl	800b6a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 82d2 	beq.w	8003c94 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	827b      	strh	r3, [r7, #18]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	8a7b      	ldrh	r3, [r7, #18]
 800371c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372c:	b29b      	uxth	r3, r3
 800372e:	8013      	strh	r3, [r2, #0]
 8003730:	e2b0      	b.n	8003c94 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d021      	beq.n	8003780 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	441a      	add	r2, r3
 8003768:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800376c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800377c:	b29b      	uxth	r3, r3
 800377e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003786:	2b01      	cmp	r3, #1
 8003788:	f040 8284 	bne.w	8003c94 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003794:	441a      	add	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037a2:	441a      	add	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d309      	bcc.n	80037c8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	1ad2      	subs	r2, r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	621a      	str	r2, [r3, #32]
 80037c6:	e015      	b.n	80037f4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d107      	bne.n	80037e0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80037d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037de:	e009      	b.n	80037f4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2200      	movs	r2, #0
 80037f2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d155      	bne.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x356>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	63bb      	str	r3, [r7, #56]	; 0x38
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	4413      	add	r3, r2
 8003812:	63bb      	str	r3, [r7, #56]	; 0x38
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	00da      	lsls	r2, r3, #3
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	4413      	add	r3, r2
 800381e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003822:	637b      	str	r3, [r7, #52]	; 0x34
 8003824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003826:	2b3e      	cmp	r3, #62	; 0x3e
 8003828:	d916      	bls.n	8003858 <HAL_PCD_EP_DB_Transmit+0x306>
 800382a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800383a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383c:	3b01      	subs	r3, #1
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003842:	b29b      	uxth	r3, r3
 8003844:	029b      	lsls	r3, r3, #10
 8003846:	b29b      	uxth	r3, r3
 8003848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003850:	b29a      	uxth	r2, r3
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	e043      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d112      	bne.n	8003884 <HAL_PCD_EP_DB_Transmit+0x332>
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003868:	b29a      	uxth	r2, r3
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387c:	b29a      	uxth	r2, r3
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	e02d      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
 800388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_PCD_EP_DB_Transmit+0x348>
 8003894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003896:	3301      	adds	r3, #1
 8003898:	64bb      	str	r3, [r7, #72]	; 0x48
 800389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389c:	b29b      	uxth	r3, r3
 800389e:	029b      	lsls	r3, r3, #10
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e01b      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d117      	bne.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	643b      	str	r3, [r7, #64]	; 0x40
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038be:	b29b      	uxth	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c4:	4413      	add	r3, r2
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	00da      	lsls	r2, r3, #3
 80038ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d0:	4413      	add	r3, r2
 80038d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038da:	b29a      	uxth	r2, r3
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6959      	ldr	r1, [r3, #20]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	891a      	ldrh	r2, [r3, #8]
 80038ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f005 ffa0 	bl	8009834 <USB_WritePMA>
 80038f4:	e1ce      	b.n	8003c94 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	4413      	add	r3, r2
 8003910:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003926:	429a      	cmp	r2, r3
 8003928:	d307      	bcc.n	800393a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003932:	1ad2      	subs	r2, r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	619a      	str	r2, [r3, #24]
 8003938:	e002      	b.n	8003940 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 80c4 	bne.w	8003ad2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d126      	bne.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	66bb      	str	r3, [r7, #104]	; 0x68
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003966:	4413      	add	r3, r2
 8003968:	66bb      	str	r3, [r7, #104]	; 0x68
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	00da      	lsls	r2, r3, #3
 8003970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003972:	4413      	add	r3, r2
 8003974:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003978:	667b      	str	r3, [r7, #100]	; 0x64
 800397a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003984:	b29a      	uxth	r2, r3
 8003986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003998:	b29a      	uxth	r2, r3
 800399a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	e01a      	b.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x484>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d116      	bne.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x484>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	673b      	str	r3, [r7, #112]	; 0x70
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039bc:	4413      	add	r3, r2
 80039be:	673b      	str	r3, [r7, #112]	; 0x70
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	00da      	lsls	r2, r3, #3
 80039c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c8:	4413      	add	r3, r2
 80039ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	2200      	movs	r2, #0
 80039d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d12f      	bne.n	8003a44 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039fc:	4413      	add	r3, r2
 80039fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	00da      	lsls	r2, r3, #3
 8003a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	e017      	b.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d113      	bne.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a5a:	4413      	add	r3, r2
 8003a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	00da      	lsls	r2, r3, #3
 8003a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a66:	4413      	add	r3, r2
 8003a68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a70:	2200      	movs	r2, #0
 8003a72:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f007 fe13 	bl	800b6a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 8104 	bne.w	8003c94 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	8013      	strh	r3, [r2, #0]
 8003ad0:	e0e0      	b.n	8003c94 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d121      	bne.n	8003b20 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	441a      	add	r2, r3
 8003b08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	f040 80b4 	bne.w	8003c94 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b34:	441a      	add	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b42:	441a      	add	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d309      	bcc.n	8003b68 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b60:	1ad2      	subs	r2, r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	621a      	str	r2, [r3, #32]
 8003b66:	e015      	b.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003b70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b7e:	e009      	b.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d155      	bne.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb6:	4413      	add	r3, r2
 8003bb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	00da      	lsls	r2, r3, #3
 8003bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8003bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8003bce:	d916      	bls.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	677b      	str	r3, [r7, #116]	; 0x74
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x694>
 8003be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be2:	3b01      	subs	r3, #1
 8003be4:	677b      	str	r3, [r7, #116]	; 0x74
 8003be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfa:	801a      	strh	r2, [r3, #0]
 8003bfc:	e040      	b.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d112      	bne.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c26:	801a      	strh	r2, [r3, #0]
 8003c28:	e02a      	b.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	677b      	str	r3, [r7, #116]	; 0x74
 8003c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	029b      	lsls	r3, r3, #10
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	e018      	b.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	785b      	ldrb	r3, [r3, #1]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d114      	bne.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c64:	4413      	add	r3, r2
 8003c66:	663b      	str	r3, [r7, #96]	; 0x60
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	00da      	lsls	r2, r3, #3
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c70:	4413      	add	r3, r2
 8003c72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6959      	ldr	r1, [r3, #20]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	895a      	ldrh	r2, [r3, #10]
 8003c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	f005 fdd0 	bl	8009834 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cae:	823b      	strh	r3, [r7, #16]
 8003cb0:	8a3b      	ldrh	r3, [r7, #16]
 8003cb2:	f083 0310 	eor.w	r3, r3, #16
 8003cb6:	823b      	strh	r3, [r7, #16]
 8003cb8:	8a3b      	ldrh	r3, [r7, #16]
 8003cba:	f083 0320 	eor.w	r3, r3, #32
 8003cbe:	823b      	strh	r3, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	8a3b      	ldrh	r3, [r7, #16]
 8003cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3788      	adds	r7, #136	; 0x88
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	817b      	strh	r3, [r7, #10]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d00:	897b      	ldrh	r3, [r7, #10]
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d0c:	897b      	ldrh	r3, [r7, #10]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	3304      	adds	r3, #4
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e00a      	b.n	8003d3c <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d26:	897a      	ldrh	r2, [r7, #10]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	3304      	adds	r3, #4
 8003d3a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d3c:	893b      	ldrh	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	80da      	strh	r2, [r3, #6]
 8003d50:	e00b      	b.n	8003d6a <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2201      	movs	r2, #1
 8003d56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40007000 	.word	0x40007000

08003de8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df6:	d130      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d038      	beq.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2232      	movs	r2, #50	; 0x32
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0c9b      	lsrs	r3, r3, #18
 8003e28:	3301      	adds	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e2c:	e002      	b.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d102      	bne.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f2      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d110      	bne.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e00f      	b.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d007      	beq.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e70:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	20000000 	.word	0x20000000
 8003e90:	431bde83 	.word	0x431bde83

08003e94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ea2:	6053      	str	r3, [r2, #4]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40007000 	.word	0x40007000

08003eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f000 bc02 	b.w	80046cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec8:	4b96      	ldr	r3, [pc, #600]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed2:	4b94      	ldr	r3, [pc, #592]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80e4 	beq.w	80040b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4c>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	f040 808b 	bne.w	800400e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	f040 8087 	bne.w	800400e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f00:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_OscConfig+0x64>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e3d9      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	4b81      	ldr	r3, [pc, #516]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <HAL_RCC_OscConfig+0x7e>
 8003f28:	4b7e      	ldr	r3, [pc, #504]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f30:	e005      	b.n	8003f3e <HAL_RCC_OscConfig+0x8a>
 8003f32:	4b7c      	ldr	r3, [pc, #496]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d223      	bcs.n	8003f8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fd8c 	bl	8004a64 <RCC_SetFlashLatencyFromMSIRange>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e3ba      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f56:	4b73      	ldr	r3, [pc, #460]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a72      	ldr	r2, [pc, #456]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	f043 0308 	orr.w	r3, r3, #8
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b70      	ldr	r3, [pc, #448]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	496d      	ldr	r1, [pc, #436]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f74:	4b6b      	ldr	r3, [pc, #428]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	4968      	ldr	r1, [pc, #416]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
 8003f88:	e025      	b.n	8003fd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f8a:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a65      	ldr	r2, [pc, #404]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f90:	f043 0308 	orr.w	r3, r3, #8
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b63      	ldr	r3, [pc, #396]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	4960      	ldr	r1, [pc, #384]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa8:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	495b      	ldr	r1, [pc, #364]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd4c 	bl	8004a64 <RCC_SetFlashLatencyFromMSIRange>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e37a      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fd6:	f000 fc81 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b51      	ldr	r3, [pc, #324]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	4950      	ldr	r1, [pc, #320]	; (8004128 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	4a4e      	ldr	r2, [pc, #312]	; (800412c <HAL_RCC_OscConfig+0x278>)
 8003ff4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd fa20 	bl	8001440 <HAL_InitTick>
 8004000:	4603      	mov	r3, r0
 8004002:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d052      	beq.n	80040b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	e35e      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d032      	beq.n	800407c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004016:	4b43      	ldr	r3, [pc, #268]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a42      	ldr	r2, [pc, #264]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004022:	f7fd fa5d 	bl	80014e0 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800402a:	f7fd fa59 	bl	80014e0 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e347      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800403c:	4b39      	ldr	r3, [pc, #228]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a35      	ldr	r2, [pc, #212]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800404e:	f043 0308 	orr.w	r3, r3, #8
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4930      	ldr	r1, [pc, #192]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004066:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	492b      	ldr	r1, [pc, #172]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
 800407a:	e01a      	b.n	80040b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800407c:	4b29      	ldr	r3, [pc, #164]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004088:	f7fd fa2a 	bl	80014e0 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004090:	f7fd fa26 	bl	80014e0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e314      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1dc>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d073      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_OscConfig+0x21c>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d10e      	bne.n	80040e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d10b      	bne.n	80040e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	4b14      	ldr	r3, [pc, #80]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d063      	beq.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d15f      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e2f1      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d106      	bne.n	8004100 <HAL_RCC_OscConfig+0x24c>
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a0b      	ldr	r2, [pc, #44]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e025      	b.n	800414c <HAL_RCC_OscConfig+0x298>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004108:	d114      	bne.n	8004134 <HAL_RCC_OscConfig+0x280>
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a05      	ldr	r2, [pc, #20]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a02      	ldr	r2, [pc, #8]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e013      	b.n	800414c <HAL_RCC_OscConfig+0x298>
 8004124:	40021000 	.word	0x40021000
 8004128:	0800bdb8 	.word	0x0800bdb8
 800412c:	20000000 	.word	0x20000000
 8004130:	20000004 	.word	0x20000004
 8004134:	4ba0      	ldr	r3, [pc, #640]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a9f      	ldr	r2, [pc, #636]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b9d      	ldr	r3, [pc, #628]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a9c      	ldr	r2, [pc, #624]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd f9c4 	bl	80014e0 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd f9c0 	bl	80014e0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e2ae      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416e:	4b92      	ldr	r3, [pc, #584]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x2a8>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd f9b0 	bl	80014e0 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fd f9ac 	bl	80014e0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e29a      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004196:	4b88      	ldr	r3, [pc, #544]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x2d0>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d060      	beq.n	8004274 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_OscConfig+0x310>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d119      	bne.n	80041f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d116      	bne.n	80041f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c4:	4b7c      	ldr	r3, [pc, #496]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_OscConfig+0x328>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e277      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b76      	ldr	r3, [pc, #472]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	4973      	ldr	r1, [pc, #460]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f0:	e040      	b.n	8004274 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d023      	beq.n	8004242 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041fa:	4b6f      	ldr	r3, [pc, #444]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6e      	ldr	r2, [pc, #440]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fd f96b 	bl	80014e0 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420e:	f7fd f967 	bl	80014e0 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e255      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004220:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b62      	ldr	r3, [pc, #392]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	495f      	ldr	r1, [pc, #380]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	e018      	b.n	8004274 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004242:	4b5d      	ldr	r3, [pc, #372]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5c      	ldr	r2, [pc, #368]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800424c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fd f947 	bl	80014e0 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004256:	f7fd f943 	bl	80014e0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e231      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d03c      	beq.n	80042fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01c      	beq.n	80042c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004288:	4b4b      	ldr	r3, [pc, #300]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428e:	4a4a      	ldr	r2, [pc, #296]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fd f922 	bl	80014e0 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fd f91e 	bl	80014e0 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e20c      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b2:	4b41      	ldr	r3, [pc, #260]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ef      	beq.n	80042a0 <HAL_RCC_OscConfig+0x3ec>
 80042c0:	e01b      	b.n	80042fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c2:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80042c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c8:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fd f905 	bl	80014e0 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042da:	f7fd f901 	bl	80014e0 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1ef      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ec:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ef      	bne.n	80042da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80a6 	beq.w	8004454 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004318:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6593      	str	r3, [r2, #88]	; 0x58
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004330:	2301      	movs	r3, #1
 8004332:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004334:	4b21      	ldr	r3, [pc, #132]	; (80043bc <HAL_RCC_OscConfig+0x508>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d118      	bne.n	8004372 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004340:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <HAL_RCC_OscConfig+0x508>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <HAL_RCC_OscConfig+0x508>)
 8004346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434c:	f7fd f8c8 	bl	80014e0 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004354:	f7fd f8c4 	bl	80014e0 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e1b2      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <HAL_RCC_OscConfig+0x508>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <HAL_RCC_OscConfig+0x4d8>
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	4a0d      	ldr	r2, [pc, #52]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800438a:	e029      	b.n	80043e0 <HAL_RCC_OscConfig+0x52c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d115      	bne.n	80043c0 <HAL_RCC_OscConfig+0x50c>
 8004394:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	4a07      	ldr	r2, [pc, #28]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a03      	ldr	r2, [pc, #12]	; (80043b8 <HAL_RCC_OscConfig+0x504>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b4:	e014      	b.n	80043e0 <HAL_RCC_OscConfig+0x52c>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40007000 	.word	0x40007000
 80043c0:	4b9a      	ldr	r3, [pc, #616]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	4a99      	ldr	r2, [pc, #612]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d0:	4b96      	ldr	r3, [pc, #600]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	4a95      	ldr	r2, [pc, #596]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d016      	beq.n	8004416 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fd f87a 	bl	80014e0 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fd f876 	bl	80014e0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e162      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCC_OscConfig+0x778>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ed      	beq.n	80043f0 <HAL_RCC_OscConfig+0x53c>
 8004414:	e015      	b.n	8004442 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004416:	f7fd f863 	bl	80014e0 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800441c:	e00a      	b.n	8004434 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441e:	f7fd f85f 	bl	80014e0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f241 3288 	movw	r2, #5000	; 0x1388
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e14b      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004434:	4b7d      	ldr	r3, [pc, #500]	; (800462c <HAL_RCC_OscConfig+0x778>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ed      	bne.n	800441e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004442:	7ffb      	ldrb	r3, [r7, #31]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b78      	ldr	r3, [pc, #480]	; (800462c <HAL_RCC_OscConfig+0x778>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	4a77      	ldr	r2, [pc, #476]	; (800462c <HAL_RCC_OscConfig+0x778>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d03c      	beq.n	80044da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004468:	4b70      	ldr	r3, [pc, #448]	; (800462c <HAL_RCC_OscConfig+0x778>)
 800446a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800446e:	4a6f      	ldr	r2, [pc, #444]	; (800462c <HAL_RCC_OscConfig+0x778>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fd f832 	bl	80014e0 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004480:	f7fd f82e 	bl	80014e0 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e11c      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004492:	4b66      	ldr	r3, [pc, #408]	; (800462c <HAL_RCC_OscConfig+0x778>)
 8004494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0ef      	beq.n	8004480 <HAL_RCC_OscConfig+0x5cc>
 80044a0:	e01b      	b.n	80044da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044a2:	4b62      	ldr	r3, [pc, #392]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80044a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a8:	4a60      	ldr	r2, [pc, #384]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b2:	f7fd f815 	bl	80014e0 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ba:	f7fd f811 	bl	80014e0 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e0ff      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044cc:	4b57      	ldr	r3, [pc, #348]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80044ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ef      	bne.n	80044ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80f3 	beq.w	80046ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	f040 80c9 	bne.w	8004680 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044ee:	4b4f      	ldr	r3, [pc, #316]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 0203 	and.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d12c      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	3b01      	subs	r3, #1
 800450e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d123      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d11b      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d113      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	3b01      	subs	r3, #1
 8004542:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d109      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	3b01      	subs	r3, #1
 8004556:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d06b      	beq.n	8004634 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d062      	beq.n	8004628 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004562:	4b32      	ldr	r3, [pc, #200]	; (800462c <HAL_RCC_OscConfig+0x778>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0ac      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004572:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_RCC_OscConfig+0x778>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2d      	ldr	r2, [pc, #180]	; (800462c <HAL_RCC_OscConfig+0x778>)
 8004578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800457e:	f7fc ffaf 	bl	80014e0 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fc ffab 	bl	80014e0 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e099      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCC_OscConfig+0x778>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCC_OscConfig+0x77c>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045b4:	3a01      	subs	r2, #1
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	4311      	orrs	r1, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045be:	0212      	lsls	r2, r2, #8
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045c6:	0852      	lsrs	r2, r2, #1
 80045c8:	3a01      	subs	r2, #1
 80045ca:	0552      	lsls	r2, r2, #21
 80045cc:	4311      	orrs	r1, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045d2:	0852      	lsrs	r2, r2, #1
 80045d4:	3a01      	subs	r2, #1
 80045d6:	0652      	lsls	r2, r2, #25
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045de:	06d2      	lsls	r2, r2, #27
 80045e0:	430a      	orrs	r2, r1
 80045e2:	4912      	ldr	r1, [pc, #72]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045e8:	4b10      	ldr	r3, [pc, #64]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0f      	ldr	r2, [pc, #60]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80045ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045f4:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a0c      	ldr	r2, [pc, #48]	; (800462c <HAL_RCC_OscConfig+0x778>)
 80045fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004600:	f7fc ff6e 	bl	80014e0 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fc ff6a 	bl	80014e0 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e058      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461a:	4b04      	ldr	r3, [pc, #16]	; (800462c <HAL_RCC_OscConfig+0x778>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004626:	e050      	b.n	80046ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e04f      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
 800462c:	40021000 	.word	0x40021000
 8004630:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004634:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d144      	bne.n	80046ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004640:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a23      	ldr	r2, [pc, #140]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800464c:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 8004652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004656:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004658:	f7fc ff42 	bl	80014e0 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004660:	f7fc ff3e 	bl	80014e0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e02c      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004672:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x7ac>
 800467e:	e024      	b.n	80046ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b0c      	cmp	r3, #12
 8004684:	d01f      	beq.n	80046c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b13      	ldr	r3, [pc, #76]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 800468c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fc ff25 	bl	80014e0 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469a:	f7fc ff21 	bl	80014e0 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e00f      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ac:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	4905      	ldr	r1, [pc, #20]	; (80046d4 <HAL_RCC_OscConfig+0x820>)
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_RCC_OscConfig+0x824>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	60cb      	str	r3, [r1, #12]
 80046c4:	e001      	b.n	80046ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	feeefffc 	.word	0xfeeefffc

080046dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0e7      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f0:	4b75      	ldr	r3, [pc, #468]	; (80048c8 <HAL_RCC_ClockConfig+0x1ec>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d910      	bls.n	8004720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b72      	ldr	r3, [pc, #456]	; (80048c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 0207 	bic.w	r2, r3, #7
 8004706:	4970      	ldr	r1, [pc, #448]	; (80048c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470e:	4b6e      	ldr	r3, [pc, #440]	; (80048c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0cf      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d010      	beq.n	800474e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4b66      	ldr	r3, [pc, #408]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004738:	429a      	cmp	r2, r3
 800473a:	d908      	bls.n	800474e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800473c:	4b63      	ldr	r3, [pc, #396]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4960      	ldr	r1, [pc, #384]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04c      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b03      	cmp	r3, #3
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	4b5a      	ldr	r3, [pc, #360]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d121      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0a6      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477a:	4b54      	ldr	r3, [pc, #336]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d115      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e09a      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004792:	4b4e      	ldr	r3, [pc, #312]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e08e      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a2:	4b4a      	ldr	r3, [pc, #296]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e086      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047b2:	4b46      	ldr	r3, [pc, #280]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4943      	ldr	r1, [pc, #268]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fc fe8c 	bl	80014e0 <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7fc fe88 	bl	80014e0 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e06e      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	4b3a      	ldr	r3, [pc, #232]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 020c 	and.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d1eb      	bne.n	80047cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d010      	beq.n	8004822 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	4b31      	ldr	r3, [pc, #196]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480c:	429a      	cmp	r2, r3
 800480e:	d208      	bcs.n	8004822 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	492b      	ldr	r1, [pc, #172]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004822:	4b29      	ldr	r3, [pc, #164]	; (80048c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d210      	bcs.n	8004852 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 0207 	bic.w	r2, r3, #7
 8004838:	4923      	ldr	r1, [pc, #140]	; (80048c8 <HAL_RCC_ClockConfig+0x1ec>)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d001      	beq.n	8004852 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e036      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485e:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	4918      	ldr	r1, [pc, #96]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4910      	ldr	r1, [pc, #64]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004890:	f000 f824 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <HAL_RCC_ClockConfig+0x1f0>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	490b      	ldr	r1, [pc, #44]	; (80048d0 <HAL_RCC_ClockConfig+0x1f4>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <HAL_RCC_ClockConfig+0x1f8>)
 80048ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCC_ClockConfig+0x1fc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fc fdc3 	bl	8001440 <HAL_InitTick>
 80048ba:	4603      	mov	r3, r0
 80048bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80048be:	7afb      	ldrb	r3, [r7, #11]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40022000 	.word	0x40022000
 80048cc:	40021000 	.word	0x40021000
 80048d0:	0800bdb8 	.word	0x0800bdb8
 80048d4:	20000000 	.word	0x20000000
 80048d8:	20000004 	.word	0x20000004

080048dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	; 0x24
 80048e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ea:	4b3e      	ldr	r3, [pc, #248]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f4:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x34>
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d121      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d11e      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004910:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800491c:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800491e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e005      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800492c:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004938:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004940:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10d      	bne.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800494c:	e00a      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d102      	bne.n	800495a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e004      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d101      	bne.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004960:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004962:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d134      	bne.n	80049d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d003      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0xa6>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d003      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0xac>
 8004980:	e005      	b.n	800498e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004984:	617b      	str	r3, [r7, #20]
      break;
 8004986:	e005      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004988:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800498a:	617b      	str	r3, [r7, #20]
      break;
 800498c:	e002      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	617b      	str	r3, [r7, #20]
      break;
 8004992:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	3301      	adds	r3, #1
 80049a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049a2:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	fb03 f202 	mul.w	r2, r3, r2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	0e5b      	lsrs	r3, r3, #25
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	3301      	adds	r3, #1
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049d4:	69bb      	ldr	r3, [r7, #24]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3724      	adds	r7, #36	; 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	0800bdd0 	.word	0x0800bdd0
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	007a1200 	.word	0x007a1200

080049f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000000 	.word	0x20000000

08004a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a10:	f7ff fff0 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4904      	ldr	r1, [pc, #16]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	0800bdc8 	.word	0x0800bdc8

08004a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a3c:	f7ff ffda 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	0adb      	lsrs	r3, r3, #11
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4904      	ldr	r1, [pc, #16]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	0800bdc8 	.word	0x0800bdc8

08004a64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a70:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a7c:	f7ff f9a6 	bl	8003dcc <HAL_PWREx_GetVoltageRange>
 8004a80:	6178      	str	r0, [r7, #20]
 8004a82:	e014      	b.n	8004aae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	4a24      	ldr	r2, [pc, #144]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a90:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a9c:	f7ff f996 	bl	8003dcc <HAL_PWREx_GetVoltageRange>
 8004aa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab4:	d10b      	bne.n	8004ace <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d919      	bls.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2ba0      	cmp	r3, #160	; 0xa0
 8004ac0:	d902      	bls.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	e013      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ac8:	2301      	movs	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	e010      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d902      	bls.n	8004ada <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e00a      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d102      	bne.n	8004ae6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e004      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b70      	cmp	r3, #112	; 0x70
 8004aea:	d101      	bne.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aec:	2301      	movs	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 0207 	bic.w	r2, r3, #7
 8004af8:	4909      	ldr	r1, [pc, #36]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d001      	beq.n	8004b12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40022000 	.word	0x40022000

08004b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b30:	2300      	movs	r3, #0
 8004b32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d031      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b48:	d01a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b4e:	d814      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b58:	d10f      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b5a:	4b5d      	ldr	r3, [pc, #372]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4a5c      	ldr	r2, [pc, #368]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b66:	e00c      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fa44 	bl	8004ffc <RCCEx_PLLSAI1_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b78:	e003      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	74fb      	strb	r3, [r7, #19]
      break;
 8004b7e:	e000      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10b      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b88:	4b51      	ldr	r3, [pc, #324]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	494e      	ldr	r1, [pc, #312]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b9e:	e001      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 809e 	beq.w	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bb6:	4b46      	ldr	r3, [pc, #280]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bcc:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	4a3f      	ldr	r2, [pc, #252]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be4:	2301      	movs	r3, #1
 8004be6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004be8:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a39      	ldr	r2, [pc, #228]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bf4:	f7fc fc74 	bl	80014e0 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bfa:	e009      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfc:	f7fc fc70 	bl	80014e0 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d902      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004c0e:	e005      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c10:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ef      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d15a      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c22:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01e      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d019      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c4a:	4b21      	ldr	r3, [pc, #132]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c6a:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d016      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fc fc30 	bl	80014e0 <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c82:	e00b      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c84:	f7fc fc2c 	bl	80014e0 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d902      	bls.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	74fb      	strb	r3, [r7, #19]
            break;
 8004c9a:	e006      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0ec      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004caa:	7cfb      	ldrb	r3, [r7, #19]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cbe:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cc6:	e009      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc8:	7cfb      	ldrb	r3, [r7, #19]
 8004cca:	74bb      	strb	r3, [r7, #18]
 8004ccc:	e006      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	7cfb      	ldrb	r3, [r7, #19]
 8004cda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cdc:	7c7b      	ldrb	r3, [r7, #17]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d105      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce6:	4a9d      	ldr	r2, [pc, #628]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cfa:	4b98      	ldr	r3, [pc, #608]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f023 0203 	bic.w	r2, r3, #3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4994      	ldr	r1, [pc, #592]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d1c:	4b8f      	ldr	r3, [pc, #572]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d22:	f023 020c 	bic.w	r2, r3, #12
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	498c      	ldr	r1, [pc, #560]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d3e:	4b87      	ldr	r3, [pc, #540]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	4983      	ldr	r1, [pc, #524]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d60:	4b7e      	ldr	r3, [pc, #504]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	497b      	ldr	r1, [pc, #492]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d82:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	4972      	ldr	r1, [pc, #456]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004da4:	4b6d      	ldr	r3, [pc, #436]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	496a      	ldr	r1, [pc, #424]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dc6:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd4:	4961      	ldr	r1, [pc, #388]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004de8:	4b5c      	ldr	r3, [pc, #368]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	4959      	ldr	r1, [pc, #356]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e0a:	4b54      	ldr	r3, [pc, #336]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	4950      	ldr	r1, [pc, #320]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e2c:	4b4b      	ldr	r3, [pc, #300]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	4948      	ldr	r1, [pc, #288]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e4e:	4b43      	ldr	r3, [pc, #268]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e54:	f023 0203 	bic.w	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	493f      	ldr	r1, [pc, #252]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d028      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e70:	4b3a      	ldr	r3, [pc, #232]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	4937      	ldr	r1, [pc, #220]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e90:	4b32      	ldr	r3, [pc, #200]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a31      	ldr	r2, [pc, #196]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9a:	60d3      	str	r3, [r2, #12]
 8004e9c:	e011      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	2101      	movs	r1, #1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f8a4 	bl	8004ffc <RCCEx_PLLSAI1_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004eb8:	7cfb      	ldrb	r3, [r7, #19]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d028      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004edc:	491f      	ldr	r1, [pc, #124]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eec:	d106      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eee:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef8:	60d3      	str	r3, [r2, #12]
 8004efa:	e011      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 f875 	bl	8004ffc <RCCEx_PLLSAI1_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f16:	7cfb      	ldrb	r3, [r7, #19]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d02b      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3a:	4908      	ldr	r1, [pc, #32]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4a02      	ldr	r2, [pc, #8]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f56:	60d3      	str	r3, [r2, #12]
 8004f58:	e014      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f843 	bl	8004ffc <RCCEx_PLLSAI1_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01c      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f90:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	4916      	ldr	r1, [pc, #88]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fae:	d10c      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f820 	bl	8004ffc <RCCEx_PLLSAI1_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fc0:	7cfb      	ldrb	r3, [r7, #19]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fd6:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	.word	0x40021000

08004ffc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800500a:	4b74      	ldr	r3, [pc, #464]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d018      	beq.n	8005048 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005016:	4b71      	ldr	r3, [pc, #452]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0203 	and.w	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d10d      	bne.n	8005042 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
       ||
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800502e:	4b6b      	ldr	r3, [pc, #428]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
       ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d047      	beq.n	80050d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
 8005046:	e044      	b.n	80050d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d018      	beq.n	8005082 <RCCEx_PLLSAI1_Config+0x86>
 8005050:	2b03      	cmp	r3, #3
 8005052:	d825      	bhi.n	80050a0 <RCCEx_PLLSAI1_Config+0xa4>
 8005054:	2b01      	cmp	r3, #1
 8005056:	d002      	beq.n	800505e <RCCEx_PLLSAI1_Config+0x62>
 8005058:	2b02      	cmp	r3, #2
 800505a:	d009      	beq.n	8005070 <RCCEx_PLLSAI1_Config+0x74>
 800505c:	e020      	b.n	80050a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800505e:	4b5f      	ldr	r3, [pc, #380]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d11d      	bne.n	80050a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800506e:	e01a      	b.n	80050a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005070:	4b5a      	ldr	r3, [pc, #360]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d116      	bne.n	80050aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005080:	e013      	b.n	80050aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005082:	4b56      	ldr	r3, [pc, #344]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10f      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800508e:	4b53      	ldr	r3, [pc, #332]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800509e:	e006      	b.n	80050ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
      break;
 80050a4:	e004      	b.n	80050b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10d      	bne.n	80050d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050b6:	4b49      	ldr	r3, [pc, #292]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	430b      	orrs	r3, r1
 80050cc:	4943      	ldr	r1, [pc, #268]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d17c      	bne.n	80051d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050d8:	4b40      	ldr	r3, [pc, #256]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3f      	ldr	r2, [pc, #252]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e4:	f7fc f9fc 	bl	80014e0 <HAL_GetTick>
 80050e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ea:	e009      	b.n	8005100 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ec:	f7fc f9f8 	bl	80014e0 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d902      	bls.n	8005100 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	73fb      	strb	r3, [r7, #15]
        break;
 80050fe:	e005      	b.n	800510c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005100:	4b36      	ldr	r3, [pc, #216]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1ef      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d15f      	bne.n	80051d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d110      	bne.n	800513a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005118:	4b30      	ldr	r3, [pc, #192]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005120:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6892      	ldr	r2, [r2, #8]
 8005128:	0211      	lsls	r1, r2, #8
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68d2      	ldr	r2, [r2, #12]
 800512e:	06d2      	lsls	r2, r2, #27
 8005130:	430a      	orrs	r2, r1
 8005132:	492a      	ldr	r1, [pc, #168]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005134:	4313      	orrs	r3, r2
 8005136:	610b      	str	r3, [r1, #16]
 8005138:	e027      	b.n	800518a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d112      	bne.n	8005166 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005140:	4b26      	ldr	r3, [pc, #152]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6892      	ldr	r2, [r2, #8]
 8005150:	0211      	lsls	r1, r2, #8
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6912      	ldr	r2, [r2, #16]
 8005156:	0852      	lsrs	r2, r2, #1
 8005158:	3a01      	subs	r2, #1
 800515a:	0552      	lsls	r2, r2, #21
 800515c:	430a      	orrs	r2, r1
 800515e:	491f      	ldr	r1, [pc, #124]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005160:	4313      	orrs	r3, r2
 8005162:	610b      	str	r3, [r1, #16]
 8005164:	e011      	b.n	800518a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005166:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800516e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6892      	ldr	r2, [r2, #8]
 8005176:	0211      	lsls	r1, r2, #8
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6952      	ldr	r2, [r2, #20]
 800517c:	0852      	lsrs	r2, r2, #1
 800517e:	3a01      	subs	r2, #1
 8005180:	0652      	lsls	r2, r2, #25
 8005182:	430a      	orrs	r2, r1
 8005184:	4915      	ldr	r1, [pc, #84]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005186:	4313      	orrs	r3, r2
 8005188:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005194:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fc f9a3 	bl	80014e0 <HAL_GetTick>
 800519a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800519c:	e009      	b.n	80051b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800519e:	f7fc f99f 	bl	80014e0 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d902      	bls.n	80051b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	73fb      	strb	r3, [r7, #15]
          break;
 80051b0:	e005      	b.n	80051be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0ef      	beq.n	800519e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	4903      	ldr	r1, [pc, #12]	; (80051dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40021000 	.word	0x40021000

080051e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e095      	b.n	800531e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d108      	bne.n	800520c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005202:	d009      	beq.n	8005218 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	61da      	str	r2, [r3, #28]
 800520a:	e005      	b.n	8005218 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb fd18 	bl	8000c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005258:	d902      	bls.n	8005260 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e002      	b.n	8005266 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005264:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800526e:	d007      	beq.n	8005280 <HAL_SPI_Init+0xa0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005278:	d002      	beq.n	8005280 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	ea42 0103 	orr.w	r1, r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	0c1b      	lsrs	r3, r3, #16
 80052dc:	f003 0204 	and.w	r2, r3, #4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052fc:	ea42 0103 	orr.w	r1, r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10f      	bne.n	800536c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	099b      	lsrs	r3, r3, #6
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
    return;
 800536a:	e0d7      	b.n	800551c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_SPI_IRQHandler+0x66>
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	09db      	lsrs	r3, r3, #7
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
    return;
 800538c:	e0c6      	b.n	800551c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <HAL_SPI_IRQHandler+0x8c>
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	099b      	lsrs	r3, r3, #6
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 80b4 	beq.w	800551c <HAL_SPI_IRQHandler+0x1f4>
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80ad 	beq.w	800551c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	099b      	lsrs	r3, r3, #6
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d023      	beq.n	8005416 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d011      	beq.n	80053fe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	f043 0204 	orr.w	r2, r3, #4
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	e00b      	b.n	8005416 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	693b      	ldr	r3, [r7, #16]
        return;
 8005414:	e082      	b.n	800551c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d014      	beq.n	800544c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005426:	f043 0201 	orr.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00c      	beq.n	8005472 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545c:	f043 0208 	orr.w	r2, r3, #8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005464:	2300      	movs	r3, #0
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	2b00      	cmp	r3, #0
 8005478:	d04f      	beq.n	800551a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005488:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <HAL_SPI_IRQHandler+0x17e>
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d034      	beq.n	8005510 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0203 	bic.w	r2, r2, #3
 80054b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_SPI_IRQHandler+0x1fc>)
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fc fb06 	bl	8001adc <HAL_DMA_Abort_IT>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d016      	beq.n	8005518 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <HAL_SPI_IRQHandler+0x1fc>)
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fc faf0 	bl	8001adc <HAL_DMA_Abort_IT>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800550e:	e003      	b.n	8005518 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f809 	bl	8005528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005516:	e000      	b.n	800551a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005518:	bf00      	nop
    return;
 800551a:	bf00      	nop
  }
}
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	0800553d 	.word	0x0800553d

08005528 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff ffe5 	bl	8005528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e049      	b.n	800560c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7fb fd35 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 fa75 	bl	8005a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e049      	b.n	80056ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f841 	bl	80056c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f000 fa1e 	bl	8005a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0ff      	b.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b14      	cmp	r3, #20
 8005702:	f200 80f0 	bhi.w	80058e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005761 	.word	0x08005761
 8005710:	080058e7 	.word	0x080058e7
 8005714:	080058e7 	.word	0x080058e7
 8005718:	080058e7 	.word	0x080058e7
 800571c:	080057a1 	.word	0x080057a1
 8005720:	080058e7 	.word	0x080058e7
 8005724:	080058e7 	.word	0x080058e7
 8005728:	080058e7 	.word	0x080058e7
 800572c:	080057e3 	.word	0x080057e3
 8005730:	080058e7 	.word	0x080058e7
 8005734:	080058e7 	.word	0x080058e7
 8005738:	080058e7 	.word	0x080058e7
 800573c:	08005823 	.word	0x08005823
 8005740:	080058e7 	.word	0x080058e7
 8005744:	080058e7 	.word	0x080058e7
 8005748:	080058e7 	.word	0x080058e7
 800574c:	08005865 	.word	0x08005865
 8005750:	080058e7 	.word	0x080058e7
 8005754:	080058e7 	.word	0x080058e7
 8005758:	080058e7 	.word	0x080058e7
 800575c:	080058a5 	.word	0x080058a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fa02 	bl	8005b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0208 	orr.w	r2, r2, #8
 800577a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0204 	bic.w	r2, r2, #4
 800578a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6999      	ldr	r1, [r3, #24]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	619a      	str	r2, [r3, #24]
      break;
 800579e:	e0a5      	b.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fa5e 	bl	8005c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6999      	ldr	r1, [r3, #24]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	021a      	lsls	r2, r3, #8
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	619a      	str	r2, [r3, #24]
      break;
 80057e0:	e084      	b.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fab7 	bl	8005d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0208 	orr.w	r2, r2, #8
 80057fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0204 	bic.w	r2, r2, #4
 800580c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69d9      	ldr	r1, [r3, #28]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	61da      	str	r2, [r3, #28]
      break;
 8005820:	e064      	b.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fb0f 	bl	8005e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800583c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69d9      	ldr	r1, [r3, #28]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	021a      	lsls	r2, r3, #8
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	61da      	str	r2, [r3, #28]
      break;
 8005862:	e043      	b.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fb4c 	bl	8005f08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0208 	orr.w	r2, r2, #8
 800587e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0204 	bic.w	r2, r2, #4
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058a2:	e023      	b.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fb84 	bl	8005fb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058e4:	e002      	b.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
      break;
 80058ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop

08005900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_TIM_ConfigClockSource+0x1c>
 8005918:	2302      	movs	r3, #2
 800591a:	e0b6      	b.n	8005a8a <HAL_TIM_ConfigClockSource+0x18a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800593e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005958:	d03e      	beq.n	80059d8 <HAL_TIM_ConfigClockSource+0xd8>
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595e:	f200 8087 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x170>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	f000 8086 	beq.w	8005a76 <HAL_TIM_ConfigClockSource+0x176>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d87f      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x170>
 8005970:	2b70      	cmp	r3, #112	; 0x70
 8005972:	d01a      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0xaa>
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	d87b      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x170>
 8005978:	2b60      	cmp	r3, #96	; 0x60
 800597a:	d050      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x11e>
 800597c:	2b60      	cmp	r3, #96	; 0x60
 800597e:	d877      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x170>
 8005980:	2b50      	cmp	r3, #80	; 0x50
 8005982:	d03c      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0xfe>
 8005984:	2b50      	cmp	r3, #80	; 0x50
 8005986:	d873      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x170>
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d058      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x13e>
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d86f      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x170>
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	d064      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x15e>
 8005994:	2b30      	cmp	r3, #48	; 0x30
 8005996:	d86b      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x170>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d060      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x15e>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d867      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x170>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d05c      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x15e>
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d05a      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x15e>
 80059a8:	e062      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6899      	ldr	r1, [r3, #8]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f000 fbd1 	bl	8006160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	609a      	str	r2, [r3, #8]
      break;
 80059d6:	e04f      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	6899      	ldr	r1, [r3, #8]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f000 fbba 	bl	8006160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059fa:	609a      	str	r2, [r3, #8]
      break;
 80059fc:	e03c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 fb2e 	bl	800606c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2150      	movs	r1, #80	; 0x50
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fb87 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005a1c:	e02c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 fb4d 	bl	80060ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2160      	movs	r1, #96	; 0x60
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fb77 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e01c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6859      	ldr	r1, [r3, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f000 fb0e 	bl	800606c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2140      	movs	r1, #64	; 0x40
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fb67 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005a5c:	e00c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f000 fb5e 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005a6e:	e003      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
      break;
 8005a74:	e000      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a2e      	ldr	r2, [pc, #184]	; (8005b60 <TIM_Base_SetConfig+0xcc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_Base_SetConfig+0x28>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0x28>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <TIM_Base_SetConfig+0xd0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d108      	bne.n	8005ace <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a23      	ldr	r2, [pc, #140]	; (8005b60 <TIM_Base_SetConfig+0xcc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00f      	beq.n	8005af6 <TIM_Base_SetConfig+0x62>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d00b      	beq.n	8005af6 <TIM_Base_SetConfig+0x62>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a20      	ldr	r2, [pc, #128]	; (8005b64 <TIM_Base_SetConfig+0xd0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <TIM_Base_SetConfig+0x62>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <TIM_Base_SetConfig+0xd4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_Base_SetConfig+0x62>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <TIM_Base_SetConfig+0xd8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d108      	bne.n	8005b08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <TIM_Base_SetConfig+0xcc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_Base_SetConfig+0xb0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a0c      	ldr	r2, [pc, #48]	; (8005b68 <TIM_Base_SetConfig+0xd4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_Base_SetConfig+0xb0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a0b      	ldr	r2, [pc, #44]	; (8005b6c <TIM_Base_SetConfig+0xd8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d103      	bne.n	8005b4c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	615a      	str	r2, [r3, #20]
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400

08005b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 0302 	bic.w	r3, r3, #2
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <TIM_OC1_SetConfig+0xec>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d007      	beq.n	8005be0 <TIM_OC1_SetConfig+0x70>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <TIM_OC1_SetConfig+0xf0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC1_SetConfig+0x70>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <TIM_OC1_SetConfig+0xf4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10c      	bne.n	8005bfa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0308 	bic.w	r3, r3, #8
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <TIM_OC1_SetConfig+0xec>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d007      	beq.n	8005c12 <TIM_OC1_SetConfig+0xa2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <TIM_OC1_SetConfig+0xf0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC1_SetConfig+0xa2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <TIM_OC1_SetConfig+0xf4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d111      	bne.n	8005c36 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400

08005c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f023 0210 	bic.w	r2, r3, #16
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f023 0320 	bic.w	r3, r3, #32
 8005cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <TIM_OC2_SetConfig+0xe8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10d      	bne.n	8005ce8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <TIM_OC2_SetConfig+0xe8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_OC2_SetConfig+0x98>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <TIM_OC2_SetConfig+0xec>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC2_SetConfig+0x98>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <TIM_OC2_SetConfig+0xf0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d113      	bne.n	8005d28 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400

08005d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0303 	bic.w	r3, r3, #3
 8005d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <TIM_OC3_SetConfig+0xe4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d10d      	bne.n	8005dda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <TIM_OC3_SetConfig+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_OC3_SetConfig+0x96>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <TIM_OC3_SetConfig+0xe8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_OC3_SetConfig+0x96>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a16      	ldr	r2, [pc, #88]	; (8005e48 <TIM_OC3_SetConfig+0xec>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d113      	bne.n	8005e1a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	621a      	str	r2, [r3, #32]
}
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400

08005e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	031b      	lsls	r3, r3, #12
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a14      	ldr	r2, [pc, #80]	; (8005efc <TIM_OC4_SetConfig+0xb0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x74>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <TIM_OC4_SetConfig+0xb4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x74>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <TIM_OC4_SetConfig+0xb8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d109      	bne.n	8005ed4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40014000 	.word	0x40014000
 8005f04:	40014400 	.word	0x40014400

08005f08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a13      	ldr	r2, [pc, #76]	; (8005fac <TIM_OC5_SetConfig+0xa4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d007      	beq.n	8005f72 <TIM_OC5_SetConfig+0x6a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <TIM_OC5_SetConfig+0xa8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d003      	beq.n	8005f72 <TIM_OC5_SetConfig+0x6a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <TIM_OC5_SetConfig+0xac>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d109      	bne.n	8005f86 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40012c00 	.word	0x40012c00
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400

08005fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	051b      	lsls	r3, r3, #20
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a14      	ldr	r2, [pc, #80]	; (8006060 <TIM_OC6_SetConfig+0xa8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d007      	beq.n	8006024 <TIM_OC6_SetConfig+0x6c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a13      	ldr	r2, [pc, #76]	; (8006064 <TIM_OC6_SetConfig+0xac>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_OC6_SetConfig+0x6c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a12      	ldr	r2, [pc, #72]	; (8006068 <TIM_OC6_SetConfig+0xb0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d109      	bne.n	8006038 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800602a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	029b      	lsls	r3, r3, #10
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400

0800606c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f023 0201 	bic.w	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 030a 	bic.w	r3, r3, #10
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b087      	sub	sp, #28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0210 	bic.w	r2, r3, #16
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	031b      	lsls	r3, r3, #12
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800612a:	b480      	push	{r7}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	f043 0307 	orr.w	r3, r3, #7
 800614c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800617a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	431a      	orrs	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e054      	b.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a24      	ldr	r2, [pc, #144]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d108      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a17      	ldr	r2, [pc, #92]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d009      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a13      	ldr	r2, [pc, #76]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a11      	ldr	r2, [pc, #68]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10c      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800623c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	4313      	orrs	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40012c00 	.word	0x40012c00
 8006274:	40000400 	.word	0x40000400
 8006278:	40014000 	.word	0x40014000

0800627c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e040      	b.n	8006310 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fa ff94 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fb2e 	bl	800691c <UART_SetConfig>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e022      	b.n	8006310 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fda8 	bl	8006e28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fe2f 	bl	8006f6c <UART_CheckIdleState>
 800630e:	4603      	mov	r3, r0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b0ba      	sub	sp, #232	; 0xe8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800633e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006342:	f640 030f 	movw	r3, #2063	; 0x80f
 8006346:	4013      	ands	r3, r2
 8006348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800634c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d115      	bne.n	8006380 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00f      	beq.n	8006380 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 82a6 	beq.w	80068c2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
      }
      return;
 800637e:	e2a0      	b.n	80068c2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8117 	beq.w	80065b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800638a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006396:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800639a:	4b85      	ldr	r3, [pc, #532]	; (80065b0 <HAL_UART_IRQHandler+0x298>)
 800639c:	4013      	ands	r3, r2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 810a 	beq.w	80065b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d011      	beq.n	80063d4 <HAL_UART_IRQHandler+0xbc>
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2201      	movs	r2, #1
 80063c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ca:	f043 0201 	orr.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d011      	beq.n	8006404 <HAL_UART_IRQHandler+0xec>
 80063e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2202      	movs	r2, #2
 80063f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fa:	f043 0204 	orr.w	r2, r3, #4
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d011      	beq.n	8006434 <HAL_UART_IRQHandler+0x11c>
 8006410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2204      	movs	r2, #4
 8006422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800642a:	f043 0202 	orr.w	r2, r3, #2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006438:	f003 0308 	and.w	r3, r3, #8
 800643c:	2b00      	cmp	r3, #0
 800643e:	d017      	beq.n	8006470 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800644c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006450:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2208      	movs	r2, #8
 800645e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006466:	f043 0208 	orr.w	r2, r3, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006478:	2b00      	cmp	r3, #0
 800647a:	d012      	beq.n	80064a2 <HAL_UART_IRQHandler+0x18a>
 800647c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00c      	beq.n	80064a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006498:	f043 0220 	orr.w	r2, r3, #32
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 820c 	beq.w	80068c6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00d      	beq.n	80064d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d005      	beq.n	80064fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d04f      	beq.n	800659a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fe43 	bl	8007186 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d141      	bne.n	8006592 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3308      	adds	r3, #8
 8006514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3308      	adds	r3, #8
 8006536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800653a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800653e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1d9      	bne.n	800650e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655e:	2b00      	cmp	r3, #0
 8006560:	d013      	beq.n	800658a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006566:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <HAL_UART_IRQHandler+0x29c>)
 8006568:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	4618      	mov	r0, r3
 8006570:	f7fb fab4 	bl	8001adc <HAL_DMA_Abort_IT>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d017      	beq.n	80065aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	e00f      	b.n	80065aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9b0 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	e00b      	b.n	80065aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9ac 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	e007      	b.n	80065aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f9a8 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80065a8:	e18d      	b.n	80068c6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065aa:	bf00      	nop
    return;
 80065ac:	e18b      	b.n	80068c6 <HAL_UART_IRQHandler+0x5ae>
 80065ae:	bf00      	nop
 80065b0:	04000120 	.word	0x04000120
 80065b4:	0800724d 	.word	0x0800724d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065bc:	2b01      	cmp	r3, #1
 80065be:	f040 8146 	bne.w	800684e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 813f 	beq.w	800684e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8138 	beq.w	800684e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2210      	movs	r2, #16
 80065e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	f040 80b4 	bne.w	800675e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006602:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 815f 	beq.w	80068ca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006616:	429a      	cmp	r2, r3
 8006618:	f080 8157 	bcs.w	80068ca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 8085 	bne.w	8006742 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800664c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006666:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800666e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800667a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1da      	bne.n	8006638 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3308      	adds	r3, #8
 80066a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e1      	bne.n	8006682 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e3      	bne.n	80066be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006724:	65bb      	str	r3, [r7, #88]	; 0x58
 8006726:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800672a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e4      	bne.n	8006702 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4618      	mov	r0, r3
 800673e:	f7fb f98f 	bl	8001a60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800674e:	b29b      	uxth	r3, r3
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	b29b      	uxth	r3, r3
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f8d4 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800675c:	e0b5      	b.n	80068ca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800676a:	b29b      	uxth	r3, r3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80a7 	beq.w	80068ce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80a2 	beq.w	80068ce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800679e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067ac:	647b      	str	r3, [r7, #68]	; 0x44
 80067ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e4      	bne.n	800678a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	623b      	str	r3, [r7, #32]
   return(result);
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067e4:	633a      	str	r2, [r7, #48]	; 0x30
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e3      	bne.n	80067c0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	60fb      	str	r3, [r7, #12]
   return(result);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800682c:	61fb      	str	r3, [r7, #28]
 800682e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	69b9      	ldr	r1, [r7, #24]
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	617b      	str	r3, [r7, #20]
   return(result);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e4      	bne.n	800680a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f85c 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800684c:	e03f      	b.n	80068ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00e      	beq.n	8006878 <HAL_UART_IRQHandler+0x560>
 800685a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800685e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800686e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fd2b 	bl	80072cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006876:	e02d      	b.n	80068d4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00e      	beq.n	80068a2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688c:	2b00      	cmp	r3, #0
 800688e:	d008      	beq.n	80068a2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01c      	beq.n	80068d2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4798      	blx	r3
    }
    return;
 80068a0:	e017      	b.n	80068d2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d012      	beq.n	80068d4 <HAL_UART_IRQHandler+0x5bc>
 80068ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00c      	beq.n	80068d4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fcdc 	bl	8007278 <UART_EndTransmit_IT>
    return;
 80068c0:	e008      	b.n	80068d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80068c2:	bf00      	nop
 80068c4:	e006      	b.n	80068d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80068c6:	bf00      	nop
 80068c8:	e004      	b.n	80068d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80068ca:	bf00      	nop
 80068cc:	e002      	b.n	80068d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80068ce:	bf00      	nop
 80068d0:	e000      	b.n	80068d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80068d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80068d4:	37e8      	adds	r7, #232	; 0xe8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop

080068dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800691c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006920:	b08a      	sub	sp, #40	; 0x28
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	431a      	orrs	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	431a      	orrs	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	4313      	orrs	r3, r2
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4ba5      	ldr	r3, [pc, #660]	; (8006be0 <UART_SetConfig+0x2c4>)
 800694c:	4013      	ands	r3, r2
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006954:	430b      	orrs	r3, r1
 8006956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a9a      	ldr	r2, [pc, #616]	; (8006be4 <UART_SetConfig+0x2c8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006984:	4313      	orrs	r3, r2
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a91      	ldr	r2, [pc, #580]	; (8006be8 <UART_SetConfig+0x2cc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d126      	bne.n	80069f4 <UART_SetConfig+0xd8>
 80069a6:	4b91      	ldr	r3, [pc, #580]	; (8006bec <UART_SetConfig+0x2d0>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d81b      	bhi.n	80069ec <UART_SetConfig+0xd0>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <UART_SetConfig+0xa0>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	080069e5 	.word	0x080069e5
 80069cc:	2301      	movs	r3, #1
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d2:	e0d6      	b.n	8006b82 <UART_SetConfig+0x266>
 80069d4:	2302      	movs	r3, #2
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	e0d2      	b.n	8006b82 <UART_SetConfig+0x266>
 80069dc:	2304      	movs	r3, #4
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e2:	e0ce      	b.n	8006b82 <UART_SetConfig+0x266>
 80069e4:	2308      	movs	r3, #8
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e0ca      	b.n	8006b82 <UART_SetConfig+0x266>
 80069ec:	2310      	movs	r3, #16
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e0c6      	b.n	8006b82 <UART_SetConfig+0x266>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a7d      	ldr	r2, [pc, #500]	; (8006bf0 <UART_SetConfig+0x2d4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d138      	bne.n	8006a70 <UART_SetConfig+0x154>
 80069fe:	4b7b      	ldr	r3, [pc, #492]	; (8006bec <UART_SetConfig+0x2d0>)
 8006a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a04:	f003 030c 	and.w	r3, r3, #12
 8006a08:	2b0c      	cmp	r3, #12
 8006a0a:	d82d      	bhi.n	8006a68 <UART_SetConfig+0x14c>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0xf8>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a49 	.word	0x08006a49
 8006a18:	08006a69 	.word	0x08006a69
 8006a1c:	08006a69 	.word	0x08006a69
 8006a20:	08006a69 	.word	0x08006a69
 8006a24:	08006a59 	.word	0x08006a59
 8006a28:	08006a69 	.word	0x08006a69
 8006a2c:	08006a69 	.word	0x08006a69
 8006a30:	08006a69 	.word	0x08006a69
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	08006a69 	.word	0x08006a69
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	08006a69 	.word	0x08006a69
 8006a44:	08006a61 	.word	0x08006a61
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4e:	e098      	b.n	8006b82 <UART_SetConfig+0x266>
 8006a50:	2302      	movs	r3, #2
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a56:	e094      	b.n	8006b82 <UART_SetConfig+0x266>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5e:	e090      	b.n	8006b82 <UART_SetConfig+0x266>
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a66:	e08c      	b.n	8006b82 <UART_SetConfig+0x266>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6e:	e088      	b.n	8006b82 <UART_SetConfig+0x266>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a5f      	ldr	r2, [pc, #380]	; (8006bf4 <UART_SetConfig+0x2d8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d125      	bne.n	8006ac6 <UART_SetConfig+0x1aa>
 8006a7a:	4b5c      	ldr	r3, [pc, #368]	; (8006bec <UART_SetConfig+0x2d0>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d016      	beq.n	8006ab6 <UART_SetConfig+0x19a>
 8006a88:	2b30      	cmp	r3, #48	; 0x30
 8006a8a:	d818      	bhi.n	8006abe <UART_SetConfig+0x1a2>
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d00a      	beq.n	8006aa6 <UART_SetConfig+0x18a>
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	d814      	bhi.n	8006abe <UART_SetConfig+0x1a2>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <UART_SetConfig+0x182>
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d008      	beq.n	8006aae <UART_SetConfig+0x192>
 8006a9c:	e00f      	b.n	8006abe <UART_SetConfig+0x1a2>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa4:	e06d      	b.n	8006b82 <UART_SetConfig+0x266>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aac:	e069      	b.n	8006b82 <UART_SetConfig+0x266>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab4:	e065      	b.n	8006b82 <UART_SetConfig+0x266>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006abc:	e061      	b.n	8006b82 <UART_SetConfig+0x266>
 8006abe:	2310      	movs	r3, #16
 8006ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac4:	e05d      	b.n	8006b82 <UART_SetConfig+0x266>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a4b      	ldr	r2, [pc, #300]	; (8006bf8 <UART_SetConfig+0x2dc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d125      	bne.n	8006b1c <UART_SetConfig+0x200>
 8006ad0:	4b46      	ldr	r3, [pc, #280]	; (8006bec <UART_SetConfig+0x2d0>)
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ada:	2bc0      	cmp	r3, #192	; 0xc0
 8006adc:	d016      	beq.n	8006b0c <UART_SetConfig+0x1f0>
 8006ade:	2bc0      	cmp	r3, #192	; 0xc0
 8006ae0:	d818      	bhi.n	8006b14 <UART_SetConfig+0x1f8>
 8006ae2:	2b80      	cmp	r3, #128	; 0x80
 8006ae4:	d00a      	beq.n	8006afc <UART_SetConfig+0x1e0>
 8006ae6:	2b80      	cmp	r3, #128	; 0x80
 8006ae8:	d814      	bhi.n	8006b14 <UART_SetConfig+0x1f8>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <UART_SetConfig+0x1d8>
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d008      	beq.n	8006b04 <UART_SetConfig+0x1e8>
 8006af2:	e00f      	b.n	8006b14 <UART_SetConfig+0x1f8>
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e042      	b.n	8006b82 <UART_SetConfig+0x266>
 8006afc:	2302      	movs	r3, #2
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e03e      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b04:	2304      	movs	r3, #4
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e03a      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b12:	e036      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b14:	2310      	movs	r3, #16
 8006b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1a:	e032      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a30      	ldr	r2, [pc, #192]	; (8006be4 <UART_SetConfig+0x2c8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d12a      	bne.n	8006b7c <UART_SetConfig+0x260>
 8006b26:	4b31      	ldr	r3, [pc, #196]	; (8006bec <UART_SetConfig+0x2d0>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b34:	d01a      	beq.n	8006b6c <UART_SetConfig+0x250>
 8006b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b3a:	d81b      	bhi.n	8006b74 <UART_SetConfig+0x258>
 8006b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b40:	d00c      	beq.n	8006b5c <UART_SetConfig+0x240>
 8006b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b46:	d815      	bhi.n	8006b74 <UART_SetConfig+0x258>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <UART_SetConfig+0x238>
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b50:	d008      	beq.n	8006b64 <UART_SetConfig+0x248>
 8006b52:	e00f      	b.n	8006b74 <UART_SetConfig+0x258>
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e012      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e00e      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b64:	2304      	movs	r3, #4
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e00a      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	e006      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e002      	b.n	8006b82 <UART_SetConfig+0x266>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <UART_SetConfig+0x2c8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	f040 808b 	bne.w	8006ca4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d834      	bhi.n	8006c00 <UART_SetConfig+0x2e4>
 8006b96:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0x280>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006c01 	.word	0x08006c01
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006bcf 	.word	0x08006bcf
 8006bb0:	08006c01 	.word	0x08006c01
 8006bb4:	08006c01 	.word	0x08006c01
 8006bb8:	08006c01 	.word	0x08006c01
 8006bbc:	08006bd7 	.word	0x08006bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc0:	f7fd ff24 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8006bc4:	61f8      	str	r0, [r7, #28]
        break;
 8006bc6:	e021      	b.n	8006c0c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <UART_SetConfig+0x2e0>)
 8006bca:	61fb      	str	r3, [r7, #28]
        break;
 8006bcc:	e01e      	b.n	8006c0c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bce:	f7fd fe85 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006bd2:	61f8      	str	r0, [r7, #28]
        break;
 8006bd4:	e01a      	b.n	8006c0c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bda:	61fb      	str	r3, [r7, #28]
        break;
 8006bdc:	e016      	b.n	8006c0c <UART_SetConfig+0x2f0>
 8006bde:	bf00      	nop
 8006be0:	efff69f3 	.word	0xefff69f3
 8006be4:	40008000 	.word	0x40008000
 8006be8:	40013800 	.word	0x40013800
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	40004400 	.word	0x40004400
 8006bf4:	40004800 	.word	0x40004800
 8006bf8:	40004c00 	.word	0x40004c00
 8006bfc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80fa 	beq.w	8006e08 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d305      	bcc.n	8006c30 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d903      	bls.n	8006c38 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c36:	e0e7      	b.n	8006e08 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	461c      	mov	r4, r3
 8006c3e:	4615      	mov	r5, r2
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	022b      	lsls	r3, r5, #8
 8006c4a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c4e:	0222      	lsls	r2, r4, #8
 8006c50:	68f9      	ldr	r1, [r7, #12]
 8006c52:	6849      	ldr	r1, [r1, #4]
 8006c54:	0849      	lsrs	r1, r1, #1
 8006c56:	2000      	movs	r0, #0
 8006c58:	4688      	mov	r8, r1
 8006c5a:	4681      	mov	r9, r0
 8006c5c:	eb12 0a08 	adds.w	sl, r2, r8
 8006c60:	eb43 0b09 	adc.w	fp, r3, r9
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c72:	4650      	mov	r0, sl
 8006c74:	4659      	mov	r1, fp
 8006c76:	f7f9 faad 	bl	80001d4 <__aeabi_uldivmod>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4613      	mov	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c88:	d308      	bcc.n	8006c9c <UART_SetConfig+0x380>
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c90:	d204      	bcs.n	8006c9c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	e0b5      	b.n	8006e08 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ca2:	e0b1      	b.n	8006e08 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cac:	d15d      	bne.n	8006d6a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8006cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d827      	bhi.n	8006d06 <UART_SetConfig+0x3ea>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x3a0>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006cf1 	.word	0x08006cf1
 8006cc8:	08006d07 	.word	0x08006d07
 8006ccc:	08006cf7 	.word	0x08006cf7
 8006cd0:	08006d07 	.word	0x08006d07
 8006cd4:	08006d07 	.word	0x08006d07
 8006cd8:	08006d07 	.word	0x08006d07
 8006cdc:	08006cff 	.word	0x08006cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7fd fe94 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8006ce4:	61f8      	str	r0, [r7, #28]
        break;
 8006ce6:	e014      	b.n	8006d12 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce8:	f7fd fea6 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8006cec:	61f8      	str	r0, [r7, #28]
        break;
 8006cee:	e010      	b.n	8006d12 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf0:	4b4c      	ldr	r3, [pc, #304]	; (8006e24 <UART_SetConfig+0x508>)
 8006cf2:	61fb      	str	r3, [r7, #28]
        break;
 8006cf4:	e00d      	b.n	8006d12 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf6:	f7fd fdf1 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006cfa:	61f8      	str	r0, [r7, #28]
        break;
 8006cfc:	e009      	b.n	8006d12 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d02:	61fb      	str	r3, [r7, #28]
        break;
 8006d04:	e005      	b.n	8006d12 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d077      	beq.n	8006e08 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	005a      	lsls	r2, r3, #1
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	441a      	add	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b0f      	cmp	r3, #15
 8006d32:	d916      	bls.n	8006d62 <UART_SetConfig+0x446>
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d212      	bcs.n	8006d62 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f023 030f 	bic.w	r3, r3, #15
 8006d44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	8afb      	ldrh	r3, [r7, #22]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	8afa      	ldrh	r2, [r7, #22]
 8006d5e:	60da      	str	r2, [r3, #12]
 8006d60:	e052      	b.n	8006e08 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d68:	e04e      	b.n	8006e08 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d827      	bhi.n	8006dc2 <UART_SetConfig+0x4a6>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <UART_SetConfig+0x45c>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006d9d 	.word	0x08006d9d
 8006d7c:	08006da5 	.word	0x08006da5
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	08006dc3 	.word	0x08006dc3
 8006d88:	08006db3 	.word	0x08006db3
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006dc3 	.word	0x08006dc3
 8006d94:	08006dc3 	.word	0x08006dc3
 8006d98:	08006dbb 	.word	0x08006dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d9c:	f7fd fe36 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8006da0:	61f8      	str	r0, [r7, #28]
        break;
 8006da2:	e014      	b.n	8006dce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da4:	f7fd fe48 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8006da8:	61f8      	str	r0, [r7, #28]
        break;
 8006daa:	e010      	b.n	8006dce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dac:	4b1d      	ldr	r3, [pc, #116]	; (8006e24 <UART_SetConfig+0x508>)
 8006dae:	61fb      	str	r3, [r7, #28]
        break;
 8006db0:	e00d      	b.n	8006dce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db2:	f7fd fd93 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006db6:	61f8      	str	r0, [r7, #28]
        break;
 8006db8:	e009      	b.n	8006dce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dbe:	61fb      	str	r3, [r7, #28]
        break;
 8006dc0:	e005      	b.n	8006dce <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dcc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d019      	beq.n	8006e08 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	085a      	lsrs	r2, r3, #1
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	441a      	add	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d909      	bls.n	8006e02 <UART_SetConfig+0x4e6>
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d205      	bcs.n	8006e02 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60da      	str	r2, [r3, #12]
 8006e00:	e002      	b.n	8006e08 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3728      	adds	r7, #40	; 0x28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e22:	bf00      	nop
 8006e24:	00f42400 	.word	0x00f42400

08006e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00a      	beq.n	8006e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01a      	beq.n	8006f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f26:	d10a      	bne.n	8006f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
  }
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f7c:	f7fa fab0 	bl	80014e0 <HAL_GetTick>
 8006f80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d10e      	bne.n	8006fae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f82d 	bl	8006ffe <UART_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e023      	b.n	8006ff6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d10e      	bne.n	8006fda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f817 	bl	8006ffe <UART_WaitOnFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e00d      	b.n	8006ff6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b09c      	sub	sp, #112	; 0x70
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700e:	e0a5      	b.n	800715c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	f000 80a1 	beq.w	800715c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701a:	f7fa fa61 	bl	80014e0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x32>
 800702a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800702c:	2b00      	cmp	r3, #0
 800702e:	d13e      	bne.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800703e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007044:	667b      	str	r3, [r7, #100]	; 0x64
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800704e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007050:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007054:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800705c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e6      	bne.n	8007030 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	663b      	str	r3, [r7, #96]	; 0x60
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3308      	adds	r3, #8
 8007080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007082:	64ba      	str	r2, [r7, #72]	; 0x48
 8007084:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e5      	bne.n	8007062 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e067      	b.n	800717e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d04f      	beq.n	800715c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ca:	d147      	bne.n	800715c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
 80070f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e6      	bne.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3308      	adds	r3, #8
 800710e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	613b      	str	r3, [r7, #16]
   return(result);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007128:	623a      	str	r2, [r7, #32]
 800712a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	69f9      	ldr	r1, [r7, #28]
 800712e:	6a3a      	ldr	r2, [r7, #32]
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	61bb      	str	r3, [r7, #24]
   return(result);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e5      	bne.n	8007108 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2220      	movs	r2, #32
 8007146:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e010      	b.n	800717e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69da      	ldr	r2, [r3, #28]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4013      	ands	r3, r2
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	429a      	cmp	r2, r3
 800716a:	bf0c      	ite	eq
 800716c:	2301      	moveq	r3, #1
 800716e:	2300      	movne	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	429a      	cmp	r2, r3
 8007178:	f43f af4a 	beq.w	8007010 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3770      	adds	r7, #112	; 0x70
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007186:	b480      	push	{r7}
 8007188:	b095      	sub	sp, #84	; 0x54
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ac:	643b      	str	r3, [r7, #64]	; 0x40
 80071ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e6      	bne.n	800718e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3308      	adds	r3, #8
 80071c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f023 0301 	bic.w	r3, r3, #1
 80071d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3308      	adds	r3, #8
 80071de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e5      	bne.n	80071c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d118      	bne.n	800722e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	60bb      	str	r3, [r7, #8]
   return(result);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f023 0310 	bic.w	r3, r3, #16
 8007210:	647b      	str	r3, [r7, #68]	; 0x44
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6979      	ldr	r1, [r7, #20]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	613b      	str	r3, [r7, #16]
   return(result);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e6      	bne.n	80071fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007240:	bf00      	nop
 8007242:	3754      	adds	r7, #84	; 0x54
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff fb40 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	60bb      	str	r3, [r7, #8]
   return(result);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6979      	ldr	r1, [r7, #20]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	613b      	str	r3, [r7, #16]
   return(result);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e6      	bne.n	8007280 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff fb0c 	bl	80068dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072c4:	bf00      	nop
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072e0:	b084      	sub	sp, #16
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	f107 0014 	add.w	r0, r7, #20
 80072ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	b004      	add	sp, #16
 8007300:	4770      	bx	lr

08007302 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007312:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007316:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	b29a      	uxth	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007338:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800733c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	b29b      	uxth	r3, r3
 800734a:	43db      	mvns	r3, r3
 800734c:	b29b      	uxth	r3, r3
 800734e:	4013      	ands	r3, r2
 8007350:	b29a      	uxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007380:	b084      	sub	sp, #16
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	f107 0014 	add.w	r0, r7, #20
 800738e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	b004      	add	sp, #16
 80073c0:	4770      	bx	lr
	...

080073c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b09d      	sub	sp, #116	; 0x74
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	78db      	ldrb	r3, [r3, #3]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d81f      	bhi.n	8007436 <USB_ActivateEndpoint+0x72>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <USB_ActivateEndpoint+0x38>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	08007429 	.word	0x08007429
 8007404:	0800743f 	.word	0x0800743f
 8007408:	0800741b 	.word	0x0800741b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800740c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007414:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007418:	e012      	b.n	8007440 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800741a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800741e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007422:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007426:	e00b      	b.n	8007440 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007428:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800742c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007430:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007434:	e004      	b.n	8007440 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800743c:	e000      	b.n	8007440 <USB_ActivateEndpoint+0x7c>
      break;
 800743e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	b21b      	sxth	r3, r3
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	b21a      	sxth	r2, r3
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b21b      	sxth	r3, r3
 8007482:	4313      	orrs	r3, r2
 8007484:	b21b      	sxth	r3, r3
 8007486:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	441a      	add	r2, r3
 8007494:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	7b1b      	ldrb	r3, [r3, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 816e 	bne.w	8007792 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 8084 	beq.w	80075c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	61bb      	str	r3, [r7, #24]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	4413      	add	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	00da      	lsls	r2, r3, #3
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	88db      	ldrh	r3, [r3, #6]
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	827b      	strh	r3, [r7, #18]
 8007502:	8a7b      	ldrh	r3, [r7, #18]
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01b      	beq.n	8007544 <USB_ActivateEndpoint+0x180>
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	823b      	strh	r3, [r7, #16]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	8a3b      	ldrh	r3, [r7, #16]
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	78db      	ldrb	r3, [r3, #3]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d020      	beq.n	800758e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007562:	81bb      	strh	r3, [r7, #12]
 8007564:	89bb      	ldrh	r3, [r7, #12]
 8007566:	f083 0320 	eor.w	r3, r3, #32
 800756a:	81bb      	strh	r3, [r7, #12]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	89bb      	ldrh	r3, [r7, #12]
 8007578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007588:	b29b      	uxth	r3, r3
 800758a:	8013      	strh	r3, [r2, #0]
 800758c:	e2cb      	b.n	8007b26 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a4:	81fb      	strh	r3, [r7, #14]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	441a      	add	r2, r3
 80075b0:	89fb      	ldrh	r3, [r7, #14]
 80075b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	8013      	strh	r3, [r2, #0]
 80075c6:	e2ae      	b.n	8007b26 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	633b      	str	r3, [r7, #48]	; 0x30
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	4413      	add	r3, r2
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	00da      	lsls	r2, r3, #3
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	4413      	add	r3, r2
 80075e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	88db      	ldrh	r3, [r3, #6]
 80075f0:	085b      	lsrs	r3, r3, #1
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007606:	b29b      	uxth	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	4413      	add	r3, r2
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	00da      	lsls	r2, r3, #3
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	4413      	add	r3, r2
 800761a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b3e      	cmp	r3, #62	; 0x3e
 8007626:	d918      	bls.n	800765a <USB_ActivateEndpoint+0x296>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <USB_ActivateEndpoint+0x27e>
 800763c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800763e:	3b01      	subs	r3, #1
 8007640:	66bb      	str	r3, [r7, #104]	; 0x68
 8007642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007644:	b29b      	uxth	r3, r3
 8007646:	029b      	lsls	r3, r3, #10
 8007648:	b29b      	uxth	r3, r3
 800764a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007652:	b29a      	uxth	r2, r3
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	801a      	strh	r2, [r3, #0]
 8007658:	e029      	b.n	80076ae <USB_ActivateEndpoint+0x2ea>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d112      	bne.n	8007688 <USB_ActivateEndpoint+0x2c4>
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800766c:	b29a      	uxth	r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007680:	b29a      	uxth	r2, r3
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	e012      	b.n	80076ae <USB_ActivateEndpoint+0x2ea>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <USB_ActivateEndpoint+0x2de>
 800769c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800769e:	3301      	adds	r3, #1
 80076a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80076a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	029b      	lsls	r3, r3, #10
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80076bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d01b      	beq.n	80076fe <USB_ActivateEndpoint+0x33a>
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076dc:	843b      	strh	r3, [r7, #32]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	441a      	add	r2, r3
 80076e8:	8c3b      	ldrh	r3, [r7, #32]
 80076ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d124      	bne.n	8007750 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771c:	83bb      	strh	r3, [r7, #28]
 800771e:	8bbb      	ldrh	r3, [r7, #28]
 8007720:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007724:	83bb      	strh	r3, [r7, #28]
 8007726:	8bbb      	ldrh	r3, [r7, #28]
 8007728:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800772c:	83bb      	strh	r3, [r7, #28]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	441a      	add	r2, r3
 8007738:	8bbb      	ldrh	r3, [r7, #28]
 800773a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	b29b      	uxth	r3, r3
 800774c:	8013      	strh	r3, [r2, #0]
 800774e:	e1ea      	b.n	8007b26 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	83fb      	strh	r3, [r7, #30]
 8007768:	8bfb      	ldrh	r3, [r7, #30]
 800776a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800776e:	83fb      	strh	r3, [r7, #30]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	441a      	add	r2, r3
 800777a:	8bfb      	ldrh	r3, [r7, #30]
 800777c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778c:	b29b      	uxth	r3, r3
 800778e:	8013      	strh	r3, [r2, #0]
 8007790:	e1c9      	b.n	8007b26 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	78db      	ldrb	r3, [r3, #3]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d11e      	bne.n	80077d8 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	441a      	add	r2, r3
 80077be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80077c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80077ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	8013      	strh	r3, [r2, #0]
 80077d6:	e01d      	b.n	8007814 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	441a      	add	r2, r3
 80077fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	b29b      	uxth	r3, r3
 8007812:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007824:	4413      	add	r3, r2
 8007826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	00da      	lsls	r2, r3, #3
 800782e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007830:	4413      	add	r3, r2
 8007832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007836:	65bb      	str	r3, [r7, #88]	; 0x58
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	891b      	ldrh	r3, [r3, #8]
 800783c:	085b      	lsrs	r3, r3, #1
 800783e:	b29b      	uxth	r3, r3
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007846:	801a      	strh	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	657b      	str	r3, [r7, #84]	; 0x54
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007852:	b29b      	uxth	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007858:	4413      	add	r3, r2
 800785a:	657b      	str	r3, [r7, #84]	; 0x54
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	00da      	lsls	r2, r3, #3
 8007862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007864:	4413      	add	r3, r2
 8007866:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800786a:	653b      	str	r3, [r7, #80]	; 0x50
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	895b      	ldrh	r3, [r3, #10]
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	b29b      	uxth	r3, r3
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800787a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 8093 	bne.w	80079ac <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007896:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800789a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01b      	beq.n	80078da <USB_ActivateEndpoint+0x516>
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	441a      	add	r2, r3
 80078c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80078c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80078e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80078ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01b      	beq.n	800792a <USB_ActivateEndpoint+0x566>
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007908:	877b      	strh	r3, [r7, #58]	; 0x3a
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	441a      	add	r2, r3
 8007914:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007926:	b29b      	uxth	r3, r3
 8007928:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800793c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007940:	873b      	strh	r3, [r7, #56]	; 0x38
 8007942:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007944:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007948:	873b      	strh	r3, [r7, #56]	; 0x38
 800794a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800794c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007950:	873b      	strh	r3, [r7, #56]	; 0x38
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	441a      	add	r2, r3
 800795c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800795e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796e:	b29b      	uxth	r3, r3
 8007970:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007988:	86fb      	strh	r3, [r7, #54]	; 0x36
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	441a      	add	r2, r3
 8007994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800799a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800799e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	8013      	strh	r3, [r2, #0]
 80079aa:	e0bc      	b.n	8007b26 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80079bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01d      	beq.n	8007a04 <USB_ActivateEndpoint+0x640>
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	441a      	add	r2, r3
 80079ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80079f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007a14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01d      	beq.n	8007a5c <USB_ActivateEndpoint+0x698>
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	441a      	add	r2, r3
 8007a44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	78db      	ldrb	r3, [r3, #3]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d024      	beq.n	8007aae <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007a7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007a82:	f083 0320 	eor.w	r3, r3, #32
 8007a86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	441a      	add	r2, r3
 8007a94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	8013      	strh	r3, [r2, #0]
 8007aac:	e01d      	b.n	8007aea <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	441a      	add	r2, r3
 8007ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	441a      	add	r2, r3
 8007b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007b26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3774      	adds	r7, #116	; 0x74
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop

08007b38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b08d      	sub	sp, #52	; 0x34
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	7b1b      	ldrb	r3, [r3, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f040 808e 	bne.w	8007c68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	785b      	ldrb	r3, [r3, #1]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d044      	beq.n	8007bde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	81bb      	strh	r3, [r7, #12]
 8007b62:	89bb      	ldrh	r3, [r7, #12]
 8007b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01b      	beq.n	8007ba4 <USB_DeactivateEndpoint+0x6c>
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	817b      	strh	r3, [r7, #10]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	897b      	ldrh	r3, [r7, #10]
 8007b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bba:	813b      	strh	r3, [r7, #8]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	893b      	ldrh	r3, [r7, #8]
 8007bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	8013      	strh	r3, [r2, #0]
 8007bdc:	e192      	b.n	8007f04 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	827b      	strh	r3, [r7, #18]
 8007bec:	8a7b      	ldrh	r3, [r7, #18]
 8007bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d01b      	beq.n	8007c2e <USB_DeactivateEndpoint+0xf6>
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	823b      	strh	r3, [r7, #16]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	8a3b      	ldrh	r3, [r7, #16]
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c44:	81fb      	strh	r3, [r7, #14]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	441a      	add	r2, r3
 8007c50:	89fb      	ldrh	r3, [r7, #14]
 8007c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	8013      	strh	r3, [r2, #0]
 8007c66:	e14d      	b.n	8007f04 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	785b      	ldrb	r3, [r3, #1]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 80a5 	bne.w	8007dbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	843b      	strh	r3, [r7, #32]
 8007c80:	8c3b      	ldrh	r3, [r7, #32]
 8007c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01b      	beq.n	8007cc2 <USB_DeactivateEndpoint+0x18a>
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca0:	83fb      	strh	r3, [r7, #30]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	441a      	add	r2, r3
 8007cac:	8bfb      	ldrh	r3, [r7, #30]
 8007cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	83bb      	strh	r3, [r7, #28]
 8007cd0:	8bbb      	ldrh	r3, [r7, #28]
 8007cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01b      	beq.n	8007d12 <USB_DeactivateEndpoint+0x1da>
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf0:	837b      	strh	r3, [r7, #26]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	441a      	add	r2, r3
 8007cfc:	8b7b      	ldrh	r3, [r7, #26]
 8007cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d28:	833b      	strh	r3, [r7, #24]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	441a      	add	r2, r3
 8007d34:	8b3b      	ldrh	r3, [r7, #24]
 8007d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d60:	82fb      	strh	r3, [r7, #22]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	441a      	add	r2, r3
 8007d6c:	8afb      	ldrh	r3, [r7, #22]
 8007d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d98:	82bb      	strh	r3, [r7, #20]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	441a      	add	r2, r3
 8007da4:	8abb      	ldrh	r3, [r7, #20]
 8007da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	8013      	strh	r3, [r2, #0]
 8007dba:	e0a3      	b.n	8007f04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01b      	beq.n	8007e0c <USB_DeactivateEndpoint+0x2d4>
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	441a      	add	r2, r3
 8007df6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007e1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01b      	beq.n	8007e5c <USB_DeactivateEndpoint+0x324>
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	441a      	add	r2, r3
 8007e46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	441a      	add	r2, r3
 8007e7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eaa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	441a      	add	r2, r3
 8007eb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee2:	847b      	strh	r3, [r7, #34]	; 0x22
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	441a      	add	r2, r3
 8007eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3734      	adds	r7, #52	; 0x34
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b0c2      	sub	sp, #264	; 0x108
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f20:	6018      	str	r0, [r3, #0]
 8007f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	f040 867b 	bne.w	8008c34 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d908      	bls.n	8007f6c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f6a:	e007      	b.n	8007f7c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	7b1b      	ldrb	r3, [r3, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d13a      	bne.n	8008002 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6959      	ldr	r1, [r3, #20]
 8007f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	88da      	ldrh	r2, [r3, #6]
 8007fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007fae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007fb2:	6800      	ldr	r0, [r0, #0]
 8007fb4:	f001 fc3e 	bl	8009834 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	4413      	add	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	00da      	lsls	r2, r3, #3
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	4413      	add	r3, r2
 8007fee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	f000 bde3 	b.w	8008bc8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	78db      	ldrb	r3, [r3, #3]
 800800e:	2b02      	cmp	r3, #2
 8008010:	f040 843a 	bne.w	8008888 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6a1a      	ldr	r2, [r3, #32]
 8008020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	429a      	cmp	r2, r3
 800802e:	f240 83b7 	bls.w	80087a0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008058:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	441a      	add	r2, r3
 8008076:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800807a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800807e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008082:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808a:	b29b      	uxth	r3, r3
 800808c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800808e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6a1a      	ldr	r2, [r3, #32]
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80080ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 81b3 	beq.w	800843a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	633b      	str	r3, [r7, #48]	; 0x30
 80080e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	785b      	ldrb	r3, [r3, #1]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d16d      	bne.n	80081cc <USB_EPStartXfer+0x2ba>
 80080f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80080fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800810a:	b29b      	uxth	r3, r3
 800810c:	461a      	mov	r2, r3
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	4413      	add	r3, r2
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
 8008114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	00da      	lsls	r2, r3, #3
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	4413      	add	r3, r2
 8008126:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008130:	2b3e      	cmp	r3, #62	; 0x3e
 8008132:	d91c      	bls.n	800816e <USB_EPStartXfer+0x25c>
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800813e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008142:	f003 031f 	and.w	r3, r3, #31
 8008146:	2b00      	cmp	r3, #0
 8008148:	d104      	bne.n	8008154 <USB_EPStartXfer+0x242>
 800814a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800814e:	3b01      	subs	r3, #1
 8008150:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008154:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008158:	b29b      	uxth	r3, r3
 800815a:	029b      	lsls	r3, r3, #10
 800815c:	b29b      	uxth	r3, r3
 800815e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008166:	b29a      	uxth	r2, r3
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e053      	b.n	8008216 <USB_EPStartXfer+0x304>
 800816e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008172:	2b00      	cmp	r3, #0
 8008174:	d112      	bne.n	800819c <USB_EPStartXfer+0x28a>
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008180:	b29a      	uxth	r2, r3
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008194:	b29a      	uxth	r2, r3
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	e03c      	b.n	8008216 <USB_EPStartXfer+0x304>
 800819c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <USB_EPStartXfer+0x2aa>
 80081b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081b6:	3301      	adds	r3, #1
 80081b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	029b      	lsls	r3, r3, #10
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	801a      	strh	r2, [r3, #0]
 80081ca:	e024      	b.n	8008216 <USB_EPStartXfer+0x304>
 80081cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d11c      	bne.n	8008216 <USB_EPStartXfer+0x304>
 80081dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	4413      	add	r3, r2
 80081f2:	633b      	str	r3, [r7, #48]	; 0x30
 80081f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	00da      	lsls	r2, r3, #3
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	4413      	add	r3, r2
 8008206:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800820c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008210:	b29a      	uxth	r2, r3
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	895b      	ldrh	r3, [r3, #10]
 8008222:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6959      	ldr	r1, [r3, #20]
 8008232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008236:	b29b      	uxth	r3, r3
 8008238:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800823c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008240:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008244:	6800      	ldr	r0, [r0, #0]
 8008246:	f001 faf5 	bl	8009834 <USB_WritePMA>
            ep->xfer_buff += len;
 800824a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825a:	441a      	add	r2, r3
 800825c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6a1a      	ldr	r2, [r3, #32]
 8008274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	429a      	cmp	r2, r3
 8008282:	d90f      	bls.n	80082a4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6a1a      	ldr	r2, [r3, #32]
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008294:	1ad2      	subs	r2, r2, r3
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	621a      	str	r2, [r3, #32]
 80082a2:	e00e      	b.n	80082c2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80082a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80082b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2200      	movs	r2, #0
 80082c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d16d      	bne.n	80083ae <USB_EPStartXfer+0x49c>
 80082d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	461a      	mov	r2, r3
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	4413      	add	r3, r2
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	00da      	lsls	r2, r3, #3
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	4413      	add	r3, r2
 8008308:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008312:	2b3e      	cmp	r3, #62	; 0x3e
 8008314:	d91c      	bls.n	8008350 <USB_EPStartXfer+0x43e>
 8008316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008324:	f003 031f 	and.w	r3, r3, #31
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <USB_EPStartXfer+0x424>
 800832c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008330:	3b01      	subs	r3, #1
 8008332:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800833a:	b29b      	uxth	r3, r3
 800833c:	029b      	lsls	r3, r3, #10
 800833e:	b29b      	uxth	r3, r3
 8008340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008348:	b29a      	uxth	r2, r3
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	801a      	strh	r2, [r3, #0]
 800834e:	e059      	b.n	8008404 <USB_EPStartXfer+0x4f2>
 8008350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008354:	2b00      	cmp	r3, #0
 8008356:	d112      	bne.n	800837e <USB_EPStartXfer+0x46c>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	b29b      	uxth	r3, r3
 800835e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008362:	b29a      	uxth	r2, r3
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	801a      	strh	r2, [r3, #0]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008376:	b29a      	uxth	r2, r3
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e042      	b.n	8008404 <USB_EPStartXfer+0x4f2>
 800837e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <USB_EPStartXfer+0x48c>
 8008394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008398:	3301      	adds	r3, #1
 800839a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800839e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	029b      	lsls	r3, r3, #10
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e02a      	b.n	8008404 <USB_EPStartXfer+0x4f2>
 80083ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d122      	bne.n	8008404 <USB_EPStartXfer+0x4f2>
 80083be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	623b      	str	r3, [r7, #32]
 80083ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083d8:	b29b      	uxth	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	4413      	add	r3, r2
 80083e0:	623b      	str	r3, [r7, #32]
 80083e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	00da      	lsls	r2, r3, #3
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	4413      	add	r3, r2
 80083f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fe:	b29a      	uxth	r2, r3
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	891b      	ldrh	r3, [r3, #8]
 8008410:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6959      	ldr	r1, [r3, #20]
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008424:	b29b      	uxth	r3, r3
 8008426:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800842a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800842e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008432:	6800      	ldr	r0, [r0, #0]
 8008434:	f001 f9fe 	bl	8009834 <USB_WritePMA>
 8008438:	e3c6      	b.n	8008bc8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800843a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800843e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d16d      	bne.n	8008526 <USB_EPStartXfer+0x614>
 800844a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	64bb      	str	r3, [r7, #72]	; 0x48
 8008456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008464:	b29b      	uxth	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800846a:	4413      	add	r3, r2
 800846c:	64bb      	str	r3, [r7, #72]	; 0x48
 800846e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	00da      	lsls	r2, r3, #3
 800847c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800847e:	4413      	add	r3, r2
 8008480:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008484:	647b      	str	r3, [r7, #68]	; 0x44
 8008486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848a:	2b3e      	cmp	r3, #62	; 0x3e
 800848c:	d91c      	bls.n	80084c8 <USB_EPStartXfer+0x5b6>
 800848e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800849c:	f003 031f 	and.w	r3, r3, #31
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <USB_EPStartXfer+0x59c>
 80084a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084a8:	3b01      	subs	r3, #1
 80084aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80084ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	029b      	lsls	r3, r3, #10
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c4:	801a      	strh	r2, [r3, #0]
 80084c6:	e059      	b.n	800857c <USB_EPStartXfer+0x66a>
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d112      	bne.n	80084f6 <USB_EPStartXfer+0x5e4>
 80084d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084da:	b29a      	uxth	r2, r3
 80084dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	e042      	b.n	800857c <USB_EPStartXfer+0x66a>
 80084f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <USB_EPStartXfer+0x604>
 800850c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008510:	3301      	adds	r3, #1
 8008512:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008516:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800851a:	b29b      	uxth	r3, r3
 800851c:	029b      	lsls	r3, r3, #10
 800851e:	b29a      	uxth	r2, r3
 8008520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e02a      	b.n	800857c <USB_EPStartXfer+0x66a>
 8008526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d122      	bne.n	800857c <USB_EPStartXfer+0x66a>
 8008536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	653b      	str	r3, [r7, #80]	; 0x50
 8008542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008550:	b29b      	uxth	r3, r3
 8008552:	461a      	mov	r2, r3
 8008554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008556:	4413      	add	r3, r2
 8008558:	653b      	str	r3, [r7, #80]	; 0x50
 800855a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	00da      	lsls	r2, r3, #3
 8008568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800856a:	4413      	add	r3, r2
 800856c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008576:	b29a      	uxth	r2, r3
 8008578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800857c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	891b      	ldrh	r3, [r3, #8]
 8008588:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800858c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6959      	ldr	r1, [r3, #20]
 8008598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859c:	b29b      	uxth	r3, r3
 800859e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80085a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80085aa:	6800      	ldr	r0, [r0, #0]
 80085ac:	f001 f942 	bl	8009834 <USB_WritePMA>
            ep->xfer_buff += len;
 80085b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	695a      	ldr	r2, [r3, #20]
 80085bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c0:	441a      	add	r2, r3
 80085c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80085ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6a1a      	ldr	r2, [r3, #32]
 80085da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d90f      	bls.n	800860a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80085ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6a1a      	ldr	r2, [r3, #32]
 80085f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	621a      	str	r2, [r3, #32]
 8008608:	e00e      	b.n	8008628 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800860a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800860e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800861a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2200      	movs	r2, #0
 8008626:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	643b      	str	r3, [r7, #64]	; 0x40
 8008634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d16d      	bne.n	8008720 <USB_EPStartXfer+0x80e>
 8008644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865e:	b29b      	uxth	r3, r3
 8008660:	461a      	mov	r2, r3
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	4413      	add	r3, r2
 8008666:	63bb      	str	r3, [r7, #56]	; 0x38
 8008668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	00da      	lsls	r2, r3, #3
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	4413      	add	r3, r2
 800867a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800867e:	637b      	str	r3, [r7, #52]	; 0x34
 8008680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008684:	2b3e      	cmp	r3, #62	; 0x3e
 8008686:	d91c      	bls.n	80086c2 <USB_EPStartXfer+0x7b0>
 8008688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	2b00      	cmp	r3, #0
 800869c:	d104      	bne.n	80086a8 <USB_EPStartXfer+0x796>
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a2:	3b01      	subs	r3, #1
 80086a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	029b      	lsls	r3, r3, #10
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	801a      	strh	r2, [r3, #0]
 80086c0:	e053      	b.n	800876a <USB_EPStartXfer+0x858>
 80086c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d112      	bne.n	80086f0 <USB_EPStartXfer+0x7de>
 80086ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d8:	801a      	strh	r2, [r3, #0]
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	801a      	strh	r2, [r3, #0]
 80086ee:	e03c      	b.n	800876a <USB_EPStartXfer+0x858>
 80086f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <USB_EPStartXfer+0x7fe>
 8008706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870a:	3301      	adds	r3, #1
 800870c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008714:	b29b      	uxth	r3, r3
 8008716:	029b      	lsls	r3, r3, #10
 8008718:	b29a      	uxth	r2, r3
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	e024      	b.n	800876a <USB_EPStartXfer+0x858>
 8008720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d11c      	bne.n	800876a <USB_EPStartXfer+0x858>
 8008730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800873e:	b29b      	uxth	r3, r3
 8008740:	461a      	mov	r2, r3
 8008742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008744:	4413      	add	r3, r2
 8008746:	643b      	str	r3, [r7, #64]	; 0x40
 8008748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	00da      	lsls	r2, r3, #3
 8008756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008758:	4413      	add	r3, r2
 800875a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008764:	b29a      	uxth	r2, r3
 8008766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800876a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	895b      	ldrh	r3, [r3, #10]
 8008776:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800877a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6959      	ldr	r1, [r3, #20]
 8008786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800878a:	b29b      	uxth	r3, r3
 800878c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008790:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008794:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008798:	6800      	ldr	r0, [r0, #0]
 800879a:	f001 f84b 	bl	8009834 <USB_WritePMA>
 800879e:	e213      	b.n	8008bc8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80087a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80087b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80087d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80087da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	441a      	add	r2, r3
 80087f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80087f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008808:	b29b      	uxth	r3, r3
 800880a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800880c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008826:	b29b      	uxth	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800882c:	4413      	add	r3, r2
 800882e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	00da      	lsls	r2, r3, #3
 800883e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008840:	4413      	add	r3, r2
 8008842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008846:	65bb      	str	r3, [r7, #88]	; 0x58
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884c:	b29a      	uxth	r2, r3
 800884e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008850:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	891b      	ldrh	r3, [r3, #8]
 800885e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6959      	ldr	r1, [r3, #20]
 800886e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008872:	b29b      	uxth	r3, r3
 8008874:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008878:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800887c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008880:	6800      	ldr	r0, [r0, #0]
 8008882:	f000 ffd7 	bl	8009834 <USB_WritePMA>
 8008886:	e19f      	b.n	8008bc8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6a1a      	ldr	r2, [r3, #32]
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008898:	1ad2      	subs	r2, r2, r3
 800889a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 80bc 	beq.w	8008a46 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	673b      	str	r3, [r7, #112]	; 0x70
 80088da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d16d      	bne.n	80089c6 <USB_EPStartXfer+0xab4>
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80088f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008904:	b29b      	uxth	r3, r3
 8008906:	461a      	mov	r2, r3
 8008908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800890a:	4413      	add	r3, r2
 800890c:	66bb      	str	r3, [r7, #104]	; 0x68
 800890e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	00da      	lsls	r2, r3, #3
 800891c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800891e:	4413      	add	r3, r2
 8008920:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008924:	667b      	str	r3, [r7, #100]	; 0x64
 8008926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892a:	2b3e      	cmp	r3, #62	; 0x3e
 800892c:	d91c      	bls.n	8008968 <USB_EPStartXfer+0xa56>
 800892e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008932:	095b      	lsrs	r3, r3, #5
 8008934:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <USB_EPStartXfer+0xa3c>
 8008944:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008948:	3b01      	subs	r3, #1
 800894a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800894e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008952:	b29b      	uxth	r3, r3
 8008954:	029b      	lsls	r3, r3, #10
 8008956:	b29b      	uxth	r3, r3
 8008958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008960:	b29a      	uxth	r2, r3
 8008962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008964:	801a      	strh	r2, [r3, #0]
 8008966:	e053      	b.n	8008a10 <USB_EPStartXfer+0xafe>
 8008968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896c:	2b00      	cmp	r3, #0
 800896e:	d112      	bne.n	8008996 <USB_EPStartXfer+0xa84>
 8008970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800897a:	b29a      	uxth	r2, r3
 800897c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29b      	uxth	r3, r3
 8008986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800898e:	b29a      	uxth	r2, r3
 8008990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	e03c      	b.n	8008a10 <USB_EPStartXfer+0xafe>
 8008996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <USB_EPStartXfer+0xaa4>
 80089ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089b0:	3301      	adds	r3, #1
 80089b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	029b      	lsls	r3, r3, #10
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	e024      	b.n	8008a10 <USB_EPStartXfer+0xafe>
 80089c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d11c      	bne.n	8008a10 <USB_EPStartXfer+0xafe>
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089ea:	4413      	add	r3, r2
 80089ec:	673b      	str	r3, [r7, #112]	; 0x70
 80089ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	00da      	lsls	r2, r3, #3
 80089fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089fe:	4413      	add	r3, r2
 8008a00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	895b      	ldrh	r3, [r3, #10]
 8008a1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6959      	ldr	r1, [r3, #20]
 8008a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a3e:	6800      	ldr	r0, [r0, #0]
 8008a40:	f000 fef8 	bl	8009834 <USB_WritePMA>
 8008a44:	e0c0      	b.n	8008bc8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d16d      	bne.n	8008b32 <USB_EPStartXfer+0xc20>
 8008a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a76:	4413      	add	r3, r2
 8008a78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	00da      	lsls	r2, r3, #3
 8008a88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a90:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a96:	2b3e      	cmp	r3, #62	; 0x3e
 8008a98:	d91c      	bls.n	8008ad4 <USB_EPStartXfer+0xbc2>
 8008a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a9e:	095b      	lsrs	r3, r3, #5
 8008aa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa8:	f003 031f 	and.w	r3, r3, #31
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <USB_EPStartXfer+0xba8>
 8008ab0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008aba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	029b      	lsls	r3, r3, #10
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	e05f      	b.n	8008b94 <USB_EPStartXfer+0xc82>
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d112      	bne.n	8008b02 <USB_EPStartXfer+0xbf0>
 8008adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aea:	801a      	strh	r2, [r3, #0]
 8008aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008afe:	801a      	strh	r2, [r3, #0]
 8008b00:	e048      	b.n	8008b94 <USB_EPStartXfer+0xc82>
 8008b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b06:	085b      	lsrs	r3, r3, #1
 8008b08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d004      	beq.n	8008b22 <USB_EPStartXfer+0xc10>
 8008b18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	029b      	lsls	r3, r3, #10
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	e030      	b.n	8008b94 <USB_EPStartXfer+0xc82>
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d128      	bne.n	8008b94 <USB_EPStartXfer+0xc82>
 8008b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b66:	4413      	add	r3, r2
 8008b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	00da      	lsls	r2, r3, #3
 8008b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b7e:	4413      	add	r3, r2
 8008b80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	891b      	ldrh	r3, [r3, #8]
 8008ba0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6959      	ldr	r1, [r3, #20]
 8008bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bbe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bc2:	6800      	ldr	r0, [r0, #0]
 8008bc4:	f000 fe36 	bl	8009834 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bee:	817b      	strh	r3, [r7, #10]
 8008bf0:	897b      	ldrh	r3, [r7, #10]
 8008bf2:	f083 0310 	eor.w	r3, r3, #16
 8008bf6:	817b      	strh	r3, [r7, #10]
 8008bf8:	897b      	ldrh	r3, [r7, #10]
 8008bfa:	f083 0320 	eor.w	r3, r3, #32
 8008bfe:	817b      	strh	r3, [r7, #10]
 8008c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	441a      	add	r2, r3
 8008c1a:	897b      	ldrh	r3, [r7, #10]
 8008c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	8013      	strh	r3, [r2, #0]
 8008c30:	f000 bc9f 	b.w	8009572 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	7b1b      	ldrb	r3, [r3, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f040 80ae 	bne.w	8008da2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d917      	bls.n	8008c92 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8008c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	619a      	str	r2, [r3, #24]
 8008c90:	e00e      	b.n	8008cb0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8008c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2200      	movs	r2, #0
 8008cae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	00da      	lsls	r2, r3, #3
 8008ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cec:	4413      	add	r3, r2
 8008cee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8008cfc:	d91d      	bls.n	8008d3a <USB_EPStartXfer+0xe28>
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0c:	f003 031f 	and.w	r3, r3, #31
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <USB_EPStartXfer+0xe0c>
 8008d14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	029b      	lsls	r3, r3, #10
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d36:	801a      	strh	r2, [r3, #0]
 8008d38:	e3e1      	b.n	80094fe <USB_EPStartXfer+0x15ec>
 8008d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d116      	bne.n	8008d70 <USB_EPStartXfer+0xe5e>
 8008d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d6c:	801a      	strh	r2, [r3, #0]
 8008d6e:	e3c6      	b.n	80094fe <USB_EPStartXfer+0x15ec>
 8008d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d74:	085b      	lsrs	r3, r3, #1
 8008d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d004      	beq.n	8008d90 <USB_EPStartXfer+0xe7e>
 8008d86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	029b      	lsls	r3, r3, #10
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d9e:	801a      	strh	r2, [r3, #0]
 8008da0:	e3ad      	b.n	80094fe <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	78db      	ldrb	r3, [r3, #3]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	f040 8200 	bne.w	80091b4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	785b      	ldrb	r3, [r3, #1]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f040 8091 	bne.w	8008ee8 <USB_EPStartXfer+0xfd6>
 8008dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dea:	4413      	add	r3, r2
 8008dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	00da      	lsls	r2, r3, #3
 8008dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e02:	4413      	add	r3, r2
 8008e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	2b3e      	cmp	r3, #62	; 0x3e
 8008e1a:	d925      	bls.n	8008e68 <USB_EPStartXfer+0xf56>
 8008e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d104      	bne.n	8008e4c <USB_EPStartXfer+0xf3a>
 8008e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e46:	3b01      	subs	r3, #1
 8008e48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	029b      	lsls	r3, r3, #10
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e64:	801a      	strh	r2, [r3, #0]
 8008e66:	e074      	b.n	8008f52 <USB_EPStartXfer+0x1040>
 8008e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d116      	bne.n	8008ea6 <USB_EPStartXfer+0xf94>
 8008e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e8a:	801a      	strh	r2, [r3, #0]
 8008e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ea2:	801a      	strh	r2, [r3, #0]
 8008ea4:	e055      	b.n	8008f52 <USB_EPStartXfer+0x1040>
 8008ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d004      	beq.n	8008ed6 <USB_EPStartXfer+0xfc4>
 8008ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	029b      	lsls	r3, r3, #10
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ee4:	801a      	strh	r2, [r3, #0]
 8008ee6:	e034      	b.n	8008f52 <USB_EPStartXfer+0x1040>
 8008ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d12c      	bne.n	8008f52 <USB_EPStartXfer+0x1040>
 8008ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	461a      	mov	r2, r3
 8008f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	00da      	lsls	r2, r3, #3
 8008f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f34:	4413      	add	r3, r2
 8008f36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f50:	801a      	strh	r2, [r3, #0]
 8008f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	785b      	ldrb	r3, [r3, #1]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f040 8091 	bne.w	8009094 <USB_EPStartXfer+0x1182>
 8008f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f96:	4413      	add	r3, r2
 8008f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	00da      	lsls	r2, r3, #3
 8008faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fae:	4413      	add	r3, r2
 8008fb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8008fc6:	d925      	bls.n	8009014 <USB_EPStartXfer+0x1102>
 8008fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f003 031f 	and.w	r3, r3, #31
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d104      	bne.n	8008ff8 <USB_EPStartXfer+0x10e6>
 8008fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	029b      	lsls	r3, r3, #10
 8009000:	b29b      	uxth	r3, r3
 8009002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800900a:	b29a      	uxth	r2, r3
 800900c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009010:	801a      	strh	r2, [r3, #0]
 8009012:	e06d      	b.n	80090f0 <USB_EPStartXfer+0x11de>
 8009014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d116      	bne.n	8009052 <USB_EPStartXfer+0x1140>
 8009024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	b29b      	uxth	r3, r3
 800902c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009030:	b29a      	uxth	r2, r3
 8009032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	b29b      	uxth	r3, r3
 8009040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009048:	b29a      	uxth	r2, r3
 800904a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800904e:	801a      	strh	r2, [r3, #0]
 8009050:	e04e      	b.n	80090f0 <USB_EPStartXfer+0x11de>
 8009052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	085b      	lsrs	r3, r3, #1
 8009060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b00      	cmp	r3, #0
 8009076:	d004      	beq.n	8009082 <USB_EPStartXfer+0x1170>
 8009078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800907c:	3301      	adds	r3, #1
 800907e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009086:	b29b      	uxth	r3, r3
 8009088:	029b      	lsls	r3, r3, #10
 800908a:	b29a      	uxth	r2, r3
 800908c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009090:	801a      	strh	r2, [r3, #0]
 8009092:	e02d      	b.n	80090f0 <USB_EPStartXfer+0x11de>
 8009094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	785b      	ldrb	r3, [r3, #1]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d125      	bne.n	80090f0 <USB_EPStartXfer+0x11de>
 80090a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	461a      	mov	r2, r3
 80090b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80090ba:	4413      	add	r3, r2
 80090bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80090c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	00da      	lsls	r2, r3, #3
 80090ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80090d2:	4413      	add	r3, r2
 80090d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090ee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80090f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 81fe 	beq.w	80094fe <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009122:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d005      	beq.n	800913a <USB_EPStartXfer+0x1228>
 800912e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10d      	bne.n	8009156 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800913a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800913e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 81db 	bne.w	80094fe <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009148:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800914c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	f040 81d4 	bne.w	80094fe <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	b29b      	uxth	r3, r3
 8009174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	441a      	add	r2, r3
 800919a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800919e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	8013      	strh	r3, [r2, #0]
 80091b2:	e1a4      	b.n	80094fe <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80091b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	78db      	ldrb	r3, [r3, #3]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	f040 819a 	bne.w	80094fa <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	699a      	ldr	r2, [r3, #24]
 80091d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d917      	bls.n	8009212 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80091e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80091f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699a      	ldr	r2, [r3, #24]
 80091fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009202:	1ad2      	subs	r2, r2, r3
 8009204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	619a      	str	r2, [r3, #24]
 8009210:	e00e      	b.n	8009230 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8009212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2200      	movs	r2, #0
 800922e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	785b      	ldrb	r3, [r3, #1]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d178      	bne.n	8009332 <USB_EPStartXfer+0x1420>
 8009240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800924e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800925c:	b29b      	uxth	r3, r3
 800925e:	461a      	mov	r2, r3
 8009260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009264:	4413      	add	r3, r2
 8009266:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800926a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	00da      	lsls	r2, r3, #3
 8009278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800927c:	4413      	add	r3, r2
 800927e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800928a:	2b3e      	cmp	r3, #62	; 0x3e
 800928c:	d91d      	bls.n	80092ca <USB_EPStartXfer+0x13b8>
 800928e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d104      	bne.n	80092ae <USB_EPStartXfer+0x139c>
 80092a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092a8:	3b01      	subs	r3, #1
 80092aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80092ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	029b      	lsls	r3, r3, #10
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092c6:	801a      	strh	r2, [r3, #0]
 80092c8:	e064      	b.n	8009394 <USB_EPStartXfer+0x1482>
 80092ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d116      	bne.n	8009300 <USB_EPStartXfer+0x13ee>
 80092d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092de:	b29a      	uxth	r2, r3
 80092e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092fc:	801a      	strh	r2, [r3, #0]
 80092fe:	e049      	b.n	8009394 <USB_EPStartXfer+0x1482>
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009304:	085b      	lsrs	r3, r3, #1
 8009306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800930a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d004      	beq.n	8009320 <USB_EPStartXfer+0x140e>
 8009316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800931a:	3301      	adds	r3, #1
 800931c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009324:	b29b      	uxth	r3, r3
 8009326:	029b      	lsls	r3, r3, #10
 8009328:	b29a      	uxth	r2, r3
 800932a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800932e:	801a      	strh	r2, [r3, #0]
 8009330:	e030      	b.n	8009394 <USB_EPStartXfer+0x1482>
 8009332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d128      	bne.n	8009394 <USB_EPStartXfer+0x1482>
 8009342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800935e:	b29b      	uxth	r3, r3
 8009360:	461a      	mov	r2, r3
 8009362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009366:	4413      	add	r3, r2
 8009368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800936c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	00da      	lsls	r2, r3, #3
 800937a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800937e:	4413      	add	r3, r2
 8009380:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800938c:	b29a      	uxth	r2, r3
 800938e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	785b      	ldrb	r3, [r3, #1]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d178      	bne.n	80094a4 <USB_EPStartXfer+0x1592>
 80093b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093d6:	4413      	add	r3, r2
 80093d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	00da      	lsls	r2, r3, #3
 80093ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093ee:	4413      	add	r3, r2
 80093f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fc:	2b3e      	cmp	r3, #62	; 0x3e
 80093fe:	d91d      	bls.n	800943c <USB_EPStartXfer+0x152a>
 8009400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <USB_EPStartXfer+0x150e>
 8009416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800941a:	3b01      	subs	r3, #1
 800941c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009424:	b29b      	uxth	r3, r3
 8009426:	029b      	lsls	r3, r3, #10
 8009428:	b29b      	uxth	r3, r3
 800942a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800942e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009432:	b29a      	uxth	r2, r3
 8009434:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009438:	801a      	strh	r2, [r3, #0]
 800943a:	e060      	b.n	80094fe <USB_EPStartXfer+0x15ec>
 800943c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009440:	2b00      	cmp	r3, #0
 8009442:	d116      	bne.n	8009472 <USB_EPStartXfer+0x1560>
 8009444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009450:	b29a      	uxth	r2, r3
 8009452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009456:	801a      	strh	r2, [r3, #0]
 8009458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009468:	b29a      	uxth	r2, r3
 800946a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	e045      	b.n	80094fe <USB_EPStartXfer+0x15ec>
 8009472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009476:	085b      	lsrs	r3, r3, #1
 8009478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800947c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d004      	beq.n	8009492 <USB_EPStartXfer+0x1580>
 8009488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800948c:	3301      	adds	r3, #1
 800948e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009496:	b29b      	uxth	r3, r3
 8009498:	029b      	lsls	r3, r3, #10
 800949a:	b29a      	uxth	r2, r3
 800949c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094a0:	801a      	strh	r2, [r3, #0]
 80094a2:	e02c      	b.n	80094fe <USB_EPStartXfer+0x15ec>
 80094a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	785b      	ldrb	r3, [r3, #1]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d124      	bne.n	80094fe <USB_EPStartXfer+0x15ec>
 80094b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	461a      	mov	r2, r3
 80094c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094ca:	4413      	add	r3, r2
 80094cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	00da      	lsls	r2, r3, #3
 80094de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094e2:	4413      	add	r3, r2
 80094e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	e001      	b.n	80094fe <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e03a      	b.n	8009574 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	b29b      	uxth	r3, r3
 800951c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009524:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009528:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800952c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009530:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009534:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009538:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800953c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	441a      	add	r2, r3
 800955a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800955e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800956a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800956e:	b29b      	uxth	r3, r3
 8009570:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800957e:	b480      	push	{r7}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	785b      	ldrb	r3, [r3, #1]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d020      	beq.n	80095d2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	b29b      	uxth	r3, r3
 800959e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095a6:	81bb      	strh	r3, [r7, #12]
 80095a8:	89bb      	ldrh	r3, [r7, #12]
 80095aa:	f083 0310 	eor.w	r3, r3, #16
 80095ae:	81bb      	strh	r3, [r7, #12]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	441a      	add	r2, r3
 80095ba:	89bb      	ldrh	r3, [r7, #12]
 80095bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	8013      	strh	r3, [r2, #0]
 80095d0:	e01f      	b.n	8009612 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e8:	81fb      	strh	r3, [r7, #14]
 80095ea:	89fb      	ldrh	r3, [r7, #14]
 80095ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095f0:	81fb      	strh	r3, [r7, #14]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	441a      	add	r2, r3
 80095fc:	89fb      	ldrh	r3, [r7, #14]
 80095fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800960a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960e:	b29b      	uxth	r3, r3
 8009610:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	7b1b      	ldrb	r3, [r3, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 809d 	bne.w	800976e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	785b      	ldrb	r3, [r3, #1]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d04c      	beq.n	80096d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	823b      	strh	r3, [r7, #16]
 800964a:	8a3b      	ldrh	r3, [r7, #16]
 800964c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01b      	beq.n	800968c <USB_EPClearStall+0x6c>
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966a:	81fb      	strh	r3, [r7, #14]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	441a      	add	r2, r3
 8009676:	89fb      	ldrh	r3, [r7, #14]
 8009678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800967c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009688:	b29b      	uxth	r3, r3
 800968a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	78db      	ldrb	r3, [r3, #3]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d06c      	beq.n	800976e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096aa:	81bb      	strh	r3, [r7, #12]
 80096ac:	89bb      	ldrh	r3, [r7, #12]
 80096ae:	f083 0320 	eor.w	r3, r3, #32
 80096b2:	81bb      	strh	r3, [r7, #12]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	441a      	add	r2, r3
 80096be:	89bb      	ldrh	r3, [r7, #12]
 80096c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	8013      	strh	r3, [r2, #0]
 80096d4:	e04b      	b.n	800976e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	82fb      	strh	r3, [r7, #22]
 80096e4:	8afb      	ldrh	r3, [r7, #22]
 80096e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d01b      	beq.n	8009726 <USB_EPClearStall+0x106>
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009704:	82bb      	strh	r3, [r7, #20]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	441a      	add	r2, r3
 8009710:	8abb      	ldrh	r3, [r7, #20]
 8009712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800971a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800971e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009722:	b29b      	uxth	r3, r3
 8009724:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973c:	827b      	strh	r3, [r7, #18]
 800973e:	8a7b      	ldrh	r3, [r7, #18]
 8009740:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009744:	827b      	strh	r3, [r7, #18]
 8009746:	8a7b      	ldrh	r3, [r7, #18]
 8009748:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800974c:	827b      	strh	r3, [r7, #18]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	441a      	add	r2, r3
 8009758:	8a7b      	ldrh	r3, [r7, #18]
 800975a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800975e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800976a:	b29b      	uxth	r3, r3
 800976c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2280      	movs	r2, #128	; 0x80
 8009792:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800980a:	b29b      	uxth	r3, r3
 800980c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800980e:	68fb      	ldr	r3, [r7, #12]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009834:	b480      	push	{r7}
 8009836:	b08b      	sub	sp, #44	; 0x2c
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4611      	mov	r1, r2
 8009840:	461a      	mov	r2, r3
 8009842:	460b      	mov	r3, r1
 8009844:	80fb      	strh	r3, [r7, #6]
 8009846:	4613      	mov	r3, r2
 8009848:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800984a:	88bb      	ldrh	r3, [r7, #4]
 800984c:	3301      	adds	r3, #1
 800984e:	085b      	lsrs	r3, r3, #1
 8009850:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800985a:	88fa      	ldrh	r2, [r7, #6]
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009864:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	627b      	str	r3, [r7, #36]	; 0x24
 800986a:	e01b      	b.n	80098a4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	3301      	adds	r3, #1
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	021b      	lsls	r3, r3, #8
 800987a:	b21a      	sxth	r2, r3
 800987c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009880:	4313      	orrs	r3, r2
 8009882:	b21b      	sxth	r3, r3
 8009884:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	8a7a      	ldrh	r2, [r7, #18]
 800988a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	3302      	adds	r3, #2
 8009890:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	3301      	adds	r3, #1
 8009896:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	3301      	adds	r3, #1
 800989c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	3b01      	subs	r3, #1
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e0      	bne.n	800986c <USB_WritePMA+0x38>
  }
}
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	372c      	adds	r7, #44	; 0x2c
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b08b      	sub	sp, #44	; 0x2c
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	4611      	mov	r1, r2
 80098c4:	461a      	mov	r2, r3
 80098c6:	460b      	mov	r3, r1
 80098c8:	80fb      	strh	r3, [r7, #6]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80098ce:	88bb      	ldrh	r3, [r7, #4]
 80098d0:	085b      	lsrs	r3, r3, #1
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80098de:	88fa      	ldrh	r2, [r7, #6]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098e8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
 80098ee:	e018      	b.n	8009922 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	3302      	adds	r3, #2
 80098fc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	b2da      	uxtb	r2, r3
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	3301      	adds	r3, #1
 800990a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	b2da      	uxtb	r2, r3
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	3301      	adds	r3, #1
 800991a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	3b01      	subs	r3, #1
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e3      	bne.n	80098f0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009928:	88bb      	ldrh	r3, [r7, #4]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	b29b      	uxth	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d007      	beq.n	8009944 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	b29b      	uxth	r3, r3
 800993a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	b2da      	uxtb	r2, r3
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	701a      	strb	r2, [r3, #0]
  }
}
 8009944:	bf00      	nop
 8009946:	372c      	adds	r7, #44	; 0x2c
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800995c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009960:	f002 f9b0 	bl	800bcc4 <USBD_static_malloc>
 8009964:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d105      	bne.n	8009978 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009974:	2302      	movs	r3, #2
 8009976:	e066      	b.n	8009a46 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	7c1b      	ldrb	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d119      	bne.n	80099bc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800998c:	2202      	movs	r2, #2
 800998e:	2181      	movs	r1, #129	; 0x81
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 ff99 	bl	800b8c8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800999c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a0:	2202      	movs	r2, #2
 80099a2:	2101      	movs	r1, #1
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 ff8f 	bl	800b8c8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2210      	movs	r2, #16
 80099b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80099ba:	e016      	b.n	80099ea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	2202      	movs	r2, #2
 80099c0:	2181      	movs	r1, #129	; 0x81
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 ff80 	bl	800b8c8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099ce:	2340      	movs	r3, #64	; 0x40
 80099d0:	2202      	movs	r2, #2
 80099d2:	2101      	movs	r1, #1
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 ff77 	bl	800b8c8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2210      	movs	r2, #16
 80099e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099ea:	2308      	movs	r3, #8
 80099ec:	2203      	movs	r2, #3
 80099ee:	2182      	movs	r1, #130	; 0x82
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f001 ff69 	bl	800b8c8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	7c1b      	ldrb	r3, [r3, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d109      	bne.n	8009a34 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f002 f8c7 	bl	800bbc0 <USBD_LL_PrepareReceive>
 8009a32:	e007      	b.n	8009a44 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a3a:	2340      	movs	r3, #64	; 0x40
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f002 f8be 	bl	800bbc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009a5a:	2181      	movs	r1, #129	; 0x81
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 ff71 	bl	800b944 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009a68:	2101      	movs	r1, #1
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 ff6a 	bl	800b944 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009a78:	2182      	movs	r1, #130	; 0x82
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 ff62 	bl	800b944 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00e      	beq.n	8009ab8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f002 f918 	bl	800bce0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ad4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e0af      	b.n	8009c4c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d03f      	beq.n	8009b78 <USBD_CDC_Setup+0xb4>
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	f040 809f 	bne.w	8009c3c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	88db      	ldrh	r3, [r3, #6]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d02e      	beq.n	8009b64 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	b25b      	sxtb	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	da16      	bge.n	8009b3e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009b1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	88d2      	ldrh	r2, [r2, #6]
 8009b22:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	88db      	ldrh	r3, [r3, #6]
 8009b28:	2b07      	cmp	r3, #7
 8009b2a:	bf28      	it	cs
 8009b2c:	2307      	movcs	r3, #7
 8009b2e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	89fa      	ldrh	r2, [r7, #14]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 fa9f 	bl	800b07a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009b3c:	e085      	b.n	8009c4a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785a      	ldrb	r2, [r3, #1]
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	88db      	ldrh	r3, [r3, #6]
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009b54:	6939      	ldr	r1, [r7, #16]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	88db      	ldrh	r3, [r3, #6]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 fab8 	bl	800b0d2 <USBD_CtlPrepareRx>
      break;
 8009b62:	e072      	b.n	8009c4a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	7850      	ldrb	r0, [r2, #1]
 8009b70:	2200      	movs	r2, #0
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	4798      	blx	r3
      break;
 8009b76:	e068      	b.n	8009c4a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	785b      	ldrb	r3, [r3, #1]
 8009b7c:	2b0b      	cmp	r3, #11
 8009b7e:	d852      	bhi.n	8009c26 <USBD_CDC_Setup+0x162>
 8009b80:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <USBD_CDC_Setup+0xc4>)
 8009b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b86:	bf00      	nop
 8009b88:	08009bb9 	.word	0x08009bb9
 8009b8c:	08009c35 	.word	0x08009c35
 8009b90:	08009c27 	.word	0x08009c27
 8009b94:	08009c27 	.word	0x08009c27
 8009b98:	08009c27 	.word	0x08009c27
 8009b9c:	08009c27 	.word	0x08009c27
 8009ba0:	08009c27 	.word	0x08009c27
 8009ba4:	08009c27 	.word	0x08009c27
 8009ba8:	08009c27 	.word	0x08009c27
 8009bac:	08009c27 	.word	0x08009c27
 8009bb0:	08009be3 	.word	0x08009be3
 8009bb4:	08009c0d 	.word	0x08009c0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d107      	bne.n	8009bd4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009bc4:	f107 030a 	add.w	r3, r7, #10
 8009bc8:	2202      	movs	r2, #2
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 fa54 	bl	800b07a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bd2:	e032      	b.n	8009c3a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 f9de 	bl	800af98 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	75fb      	strb	r3, [r7, #23]
          break;
 8009be0:	e02b      	b.n	8009c3a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d107      	bne.n	8009bfe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009bee:	f107 030d 	add.w	r3, r7, #13
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 fa3f 	bl	800b07a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bfc:	e01d      	b.n	8009c3a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f001 f9c9 	bl	800af98 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c06:	2303      	movs	r3, #3
 8009c08:	75fb      	strb	r3, [r7, #23]
          break;
 8009c0a:	e016      	b.n	8009c3a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d00f      	beq.n	8009c38 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 f9bc 	bl	800af98 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c20:	2303      	movs	r3, #3
 8009c22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c24:	e008      	b.n	8009c38 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 f9b5 	bl	800af98 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	75fb      	strb	r3, [r7, #23]
          break;
 8009c32:	e002      	b.n	8009c3a <USBD_CDC_Setup+0x176>
          break;
 8009c34:	bf00      	nop
 8009c36:	e008      	b.n	8009c4a <USBD_CDC_Setup+0x186>
          break;
 8009c38:	bf00      	nop
      }
      break;
 8009c3a:	e006      	b.n	8009c4a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 f9aa 	bl	800af98 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c44:	2303      	movs	r3, #3
 8009c46:	75fb      	strb	r3, [r7, #23]
      break;
 8009c48:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e04f      	b.n	8009d16 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009c7e:	78fa      	ldrb	r2, [r7, #3]
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	3318      	adds	r3, #24
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d029      	beq.n	8009ce8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	440b      	add	r3, r1
 8009ca2:	3318      	adds	r3, #24
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	78f9      	ldrb	r1, [r7, #3]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	460b      	mov	r3, r1
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	440b      	add	r3, r1
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	4403      	add	r3, r0
 8009cb4:	333c      	adds	r3, #60	; 0x3c
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009cbc:	fb01 f303 	mul.w	r3, r1, r3
 8009cc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d110      	bne.n	8009ce8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009cc6:	78fa      	ldrb	r2, [r7, #3]
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	440b      	add	r3, r1
 8009cd4:	3318      	adds	r3, #24
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009cda:	78f9      	ldrb	r1, [r7, #3]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	2200      	movs	r2, #0
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 ff35 	bl	800bb50 <USBD_LL_Transmit>
 8009ce6:	e015      	b.n	8009d14 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009d10:	78fa      	ldrb	r2, [r7, #3]
 8009d12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e015      	b.n	8009d6c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d40:	78fb      	ldrb	r3, [r7, #3]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 ff73 	bl	800bc30 <USBD_LL_GetRxDataSize>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d66:	4611      	mov	r1, r2
 8009d68:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e01b      	b.n	8009dc6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d015      	beq.n	8009dc4 <USBD_CDC_EP0_RxReady+0x50>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d9e:	2bff      	cmp	r3, #255	; 0xff
 8009da0:	d010      	beq.n	8009dc4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009db0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009db8:	b292      	uxth	r2, r2
 8009dba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	22ff      	movs	r2, #255	; 0xff
 8009dc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2243      	movs	r2, #67	; 0x43
 8009ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009dde:	4b03      	ldr	r3, [pc, #12]	; (8009dec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	20000094 	.word	0x20000094

08009df0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2243      	movs	r2, #67	; 0x43
 8009dfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009dfe:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	20000050 	.word	0x20000050

08009e10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2243      	movs	r2, #67	; 0x43
 8009e1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009e1e:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	200000d8 	.word	0x200000d8

08009e30 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	220a      	movs	r2, #10
 8009e3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e3e:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	2000000c 	.word	0x2000000c

08009e50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e004      	b.n	8009e6e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b087      	sub	sp, #28
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e8c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e008      	b.n	8009eaa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	371c      	adds	r7, #28
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b085      	sub	sp, #20
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ec6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e004      	b.n	8009edc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e016      	b.n	8009f34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	7c1b      	ldrb	r3, [r3, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d109      	bne.n	8009f22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f18:	2101      	movs	r1, #1
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fe50 	bl	800bbc0 <USBD_LL_PrepareReceive>
 8009f20:	e007      	b.n	8009f32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f28:	2340      	movs	r3, #64	; 0x40
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 fe47 	bl	800bbc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	4613      	mov	r3, r2
 8009f48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e01f      	b.n	8009f94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d003      	beq.n	8009f7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	79fa      	ldrb	r2, [r7, #7]
 8009f86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f001 fc09 	bl	800b7a0 <USBD_LL_Init>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e016      	b.n	8009fe2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00b      	beq.n	8009fe0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	f107 020e 	add.w	r2, r7, #14
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4798      	blx	r3
 8009fd8:	4602      	mov	r2, r0
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 fc36 	bl	800b864 <USBD_LL_Start>
 8009ff8:	4603      	mov	r3, r0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a024:	2303      	movs	r3, #3
 800a026:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	78fa      	ldrb	r2, [r7, #3]
 800a03c:	4611      	mov	r1, r2
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	4798      	blx	r3
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a046:	7bfb      	ldrb	r3, [r7, #15]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	460b      	mov	r3, r1
 800a05a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a062:	2b00      	cmp	r3, #0
 800a064:	d007      	beq.n	800a076 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	78fa      	ldrb	r2, [r7, #3]
 800a070:	4611      	mov	r1, r2
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
  }

  return USBD_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	4618      	mov	r0, r3
 800a094:	f000 ff46 	bl	800af24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0b4:	f003 031f 	and.w	r3, r3, #31
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d01a      	beq.n	800a0f2 <USBD_LL_SetupStage+0x72>
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d822      	bhi.n	800a106 <USBD_LL_SetupStage+0x86>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <USBD_LL_SetupStage+0x4a>
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d00a      	beq.n	800a0de <USBD_LL_SetupStage+0x5e>
 800a0c8:	e01d      	b.n	800a106 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f9ee 	bl	800a4b4 <USBD_StdDevReq>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]
      break;
 800a0dc:	e020      	b.n	800a120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fa52 	bl	800a590 <USBD_StdItfReq>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f0:	e016      	b.n	800a120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fa91 	bl	800a622 <USBD_StdEPReq>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]
      break;
 800a104:	e00c      	b.n	800a120 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a10c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a110:	b2db      	uxtb	r3, r3
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f001 fc4b 	bl	800b9b0 <USBD_LL_StallEP>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]
      break;
 800a11e:	bf00      	nop
  }

  return ret;
 800a120:	7bfb      	ldrb	r3, [r7, #15]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b086      	sub	sp, #24
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	460b      	mov	r3, r1
 800a134:	607a      	str	r2, [r7, #4]
 800a136:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d138      	bne.n	800a1b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a144:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d14a      	bne.n	800a1e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	689a      	ldr	r2, [r3, #8]
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d913      	bls.n	800a184 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	1ad2      	subs	r2, r2, r3
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	4293      	cmp	r3, r2
 800a174:	bf28      	it	cs
 800a176:	4613      	movcs	r3, r2
 800a178:	461a      	mov	r2, r3
 800a17a:	6879      	ldr	r1, [r7, #4]
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 ffc5 	bl	800b10c <USBD_CtlContinueRx>
 800a182:	e030      	b.n	800a1e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d10b      	bne.n	800a1a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 ffc0 	bl	800b12e <USBD_CtlSendStatus>
 800a1ae:	e01a      	b.n	800a1e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d114      	bne.n	800a1e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00e      	beq.n	800a1e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	7afa      	ldrb	r2, [r7, #11]
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	4798      	blx	r3
 800a1d8:	4603      	mov	r3, r0
 800a1da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	e000      	b.n	800a1e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a1fe:	7afb      	ldrb	r3, [r7, #11]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d16b      	bne.n	800a2dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3314      	adds	r3, #20
 800a208:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a210:	2b02      	cmp	r3, #2
 800a212:	d156      	bne.n	800a2c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d914      	bls.n	800a24a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	689a      	ldr	r2, [r3, #8]
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	1ad2      	subs	r2, r2, r3
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	461a      	mov	r2, r3
 800a234:	6879      	ldr	r1, [r7, #4]
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 ff3a 	bl	800b0b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a23c:	2300      	movs	r3, #0
 800a23e:	2200      	movs	r2, #0
 800a240:	2100      	movs	r1, #0
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f001 fcbc 	bl	800bbc0 <USBD_LL_PrepareReceive>
 800a248:	e03b      	b.n	800a2c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	429a      	cmp	r2, r3
 800a254:	d11c      	bne.n	800a290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a25e:	429a      	cmp	r2, r3
 800a260:	d316      	bcc.n	800a290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d20f      	bcs.n	800a290 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a270:	2200      	movs	r2, #0
 800a272:	2100      	movs	r1, #0
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 ff1b 	bl	800b0b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a282:	2300      	movs	r3, #0
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f001 fc99 	bl	800bbc0 <USBD_LL_PrepareReceive>
 800a28e:	e018      	b.n	800a2c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d10b      	bne.n	800a2b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2b4:	2180      	movs	r1, #128	; 0x80
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f001 fb7a 	bl	800b9b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 ff49 	bl	800b154 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d122      	bne.n	800a312 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7ff fe98 	bl	800a002 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2da:	e01a      	b.n	800a312 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d114      	bne.n	800a312 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00e      	beq.n	800a312 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	7afa      	ldrb	r2, [r7, #11]
 800a2fe:	4611      	mov	r1, r2
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	4798      	blx	r3
 800a304:	4603      	mov	r3, r0
 800a306:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
 800a310:	e000      	b.n	800a314 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e02f      	b.n	800a3b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00f      	beq.n	800a37a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	6852      	ldr	r2, [r2, #4]
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	4611      	mov	r1, r2
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a37a:	2340      	movs	r3, #64	; 0x40
 800a37c:	2200      	movs	r2, #0
 800a37e:	2100      	movs	r1, #0
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 faa1 	bl	800b8c8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2240      	movs	r2, #64	; 0x40
 800a392:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a396:	2340      	movs	r3, #64	; 0x40
 800a398:	2200      	movs	r2, #0
 800a39a:	2180      	movs	r1, #128	; 0x80
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f001 fa93 	bl	800b8c8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2240      	movs	r2, #64	; 0x40
 800a3ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	78fa      	ldrb	r2, [r7, #3]
 800a3c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2204      	movs	r2, #4
 800a3f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b04      	cmp	r3, #4
 800a416:	d106      	bne.n	800a426 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a446:	2303      	movs	r3, #3
 800a448:	e012      	b.n	800a470 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b03      	cmp	r3, #3
 800a454:	d10b      	bne.n	800a46e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d005      	beq.n	800a46e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	3301      	adds	r3, #1
 800a48e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a496:	8a3b      	ldrh	r3, [r7, #16]
 800a498:	021b      	lsls	r3, r3, #8
 800a49a:	b21a      	sxth	r2, r3
 800a49c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	b21b      	sxth	r3, r3
 800a4a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4a6:	89fb      	ldrh	r3, [r7, #14]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	371c      	adds	r7, #28
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4ca:	2b40      	cmp	r3, #64	; 0x40
 800a4cc:	d005      	beq.n	800a4da <USBD_StdDevReq+0x26>
 800a4ce:	2b40      	cmp	r3, #64	; 0x40
 800a4d0:	d853      	bhi.n	800a57a <USBD_StdDevReq+0xc6>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00b      	beq.n	800a4ee <USBD_StdDevReq+0x3a>
 800a4d6:	2b20      	cmp	r3, #32
 800a4d8:	d14f      	bne.n	800a57a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	4798      	blx	r3
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ec:	e04a      	b.n	800a584 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	785b      	ldrb	r3, [r3, #1]
 800a4f2:	2b09      	cmp	r3, #9
 800a4f4:	d83b      	bhi.n	800a56e <USBD_StdDevReq+0xba>
 800a4f6:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <USBD_StdDevReq+0x48>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a551 	.word	0x0800a551
 800a500:	0800a565 	.word	0x0800a565
 800a504:	0800a56f 	.word	0x0800a56f
 800a508:	0800a55b 	.word	0x0800a55b
 800a50c:	0800a56f 	.word	0x0800a56f
 800a510:	0800a52f 	.word	0x0800a52f
 800a514:	0800a525 	.word	0x0800a525
 800a518:	0800a56f 	.word	0x0800a56f
 800a51c:	0800a547 	.word	0x0800a547
 800a520:	0800a539 	.word	0x0800a539
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f9de 	bl	800a8e8 <USBD_GetDescriptor>
          break;
 800a52c:	e024      	b.n	800a578 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fb6d 	bl	800ac10 <USBD_SetAddress>
          break;
 800a536:	e01f      	b.n	800a578 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fbac 	bl	800ac98 <USBD_SetConfig>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
          break;
 800a544:	e018      	b.n	800a578 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fc4b 	bl	800ade4 <USBD_GetConfig>
          break;
 800a54e:	e013      	b.n	800a578 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fc7c 	bl	800ae50 <USBD_GetStatus>
          break;
 800a558:	e00e      	b.n	800a578 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fcab 	bl	800aeb8 <USBD_SetFeature>
          break;
 800a562:	e009      	b.n	800a578 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fcba 	bl	800aee0 <USBD_ClrFeature>
          break;
 800a56c:	e004      	b.n	800a578 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fd11 	bl	800af98 <USBD_CtlError>
          break;
 800a576:	bf00      	nop
      }
      break;
 800a578:	e004      	b.n	800a584 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fd0b 	bl	800af98 <USBD_CtlError>
      break;
 800a582:	bf00      	nop
  }

  return ret;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop

0800a590 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5a6:	2b40      	cmp	r3, #64	; 0x40
 800a5a8:	d005      	beq.n	800a5b6 <USBD_StdItfReq+0x26>
 800a5aa:	2b40      	cmp	r3, #64	; 0x40
 800a5ac:	d82f      	bhi.n	800a60e <USBD_StdItfReq+0x7e>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <USBD_StdItfReq+0x26>
 800a5b2:	2b20      	cmp	r3, #32
 800a5b4:	d12b      	bne.n	800a60e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d81d      	bhi.n	800a600 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	889b      	ldrh	r3, [r3, #4]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d813      	bhi.n	800a5f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	88db      	ldrh	r3, [r3, #6]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d110      	bne.n	800a60a <USBD_StdItfReq+0x7a>
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10d      	bne.n	800a60a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fd9d 	bl	800b12e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a5f4:	e009      	b.n	800a60a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fccd 	bl	800af98 <USBD_CtlError>
          break;
 800a5fe:	e004      	b.n	800a60a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fcc8 	bl	800af98 <USBD_CtlError>
          break;
 800a608:	e000      	b.n	800a60c <USBD_StdItfReq+0x7c>
          break;
 800a60a:	bf00      	nop
      }
      break;
 800a60c:	e004      	b.n	800a618 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fcc1 	bl	800af98 <USBD_CtlError>
      break;
 800a616:	bf00      	nop
  }

  return ret;
 800a618:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	889b      	ldrh	r3, [r3, #4]
 800a634:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a63e:	2b40      	cmp	r3, #64	; 0x40
 800a640:	d007      	beq.n	800a652 <USBD_StdEPReq+0x30>
 800a642:	2b40      	cmp	r3, #64	; 0x40
 800a644:	f200 8145 	bhi.w	800a8d2 <USBD_StdEPReq+0x2b0>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00c      	beq.n	800a666 <USBD_StdEPReq+0x44>
 800a64c:	2b20      	cmp	r3, #32
 800a64e:	f040 8140 	bne.w	800a8d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
      break;
 800a664:	e13a      	b.n	800a8dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	785b      	ldrb	r3, [r3, #1]
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d007      	beq.n	800a67e <USBD_StdEPReq+0x5c>
 800a66e:	2b03      	cmp	r3, #3
 800a670:	f300 8129 	bgt.w	800a8c6 <USBD_StdEPReq+0x2a4>
 800a674:	2b00      	cmp	r3, #0
 800a676:	d07f      	beq.n	800a778 <USBD_StdEPReq+0x156>
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d03c      	beq.n	800a6f6 <USBD_StdEPReq+0xd4>
 800a67c:	e123      	b.n	800a8c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b02      	cmp	r3, #2
 800a688:	d002      	beq.n	800a690 <USBD_StdEPReq+0x6e>
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d016      	beq.n	800a6bc <USBD_StdEPReq+0x9a>
 800a68e:	e02c      	b.n	800a6ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a690:	7bbb      	ldrb	r3, [r7, #14]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00d      	beq.n	800a6b2 <USBD_StdEPReq+0x90>
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	2b80      	cmp	r3, #128	; 0x80
 800a69a:	d00a      	beq.n	800a6b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f001 f985 	bl	800b9b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6a6:	2180      	movs	r1, #128	; 0x80
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 f981 	bl	800b9b0 <USBD_LL_StallEP>
 800a6ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6b0:	e020      	b.n	800a6f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fc6f 	bl	800af98 <USBD_CtlError>
              break;
 800a6ba:	e01b      	b.n	800a6f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	885b      	ldrh	r3, [r3, #2]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10e      	bne.n	800a6e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00b      	beq.n	800a6e2 <USBD_StdEPReq+0xc0>
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	2b80      	cmp	r3, #128	; 0x80
 800a6ce:	d008      	beq.n	800a6e2 <USBD_StdEPReq+0xc0>
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	88db      	ldrh	r3, [r3, #6]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d104      	bne.n	800a6e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 f967 	bl	800b9b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fd23 	bl	800b12e <USBD_CtlSendStatus>

              break;
 800a6e8:	e004      	b.n	800a6f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fc53 	bl	800af98 <USBD_CtlError>
              break;
 800a6f2:	bf00      	nop
          }
          break;
 800a6f4:	e0ec      	b.n	800a8d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d002      	beq.n	800a708 <USBD_StdEPReq+0xe6>
 800a702:	2b03      	cmp	r3, #3
 800a704:	d016      	beq.n	800a734 <USBD_StdEPReq+0x112>
 800a706:	e030      	b.n	800a76a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00d      	beq.n	800a72a <USBD_StdEPReq+0x108>
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	2b80      	cmp	r3, #128	; 0x80
 800a712:	d00a      	beq.n	800a72a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f001 f949 	bl	800b9b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a71e:	2180      	movs	r1, #128	; 0x80
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f001 f945 	bl	800b9b0 <USBD_LL_StallEP>
 800a726:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a728:	e025      	b.n	800a776 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fc33 	bl	800af98 <USBD_CtlError>
              break;
 800a732:	e020      	b.n	800a776 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	885b      	ldrh	r3, [r3, #2]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d11b      	bne.n	800a774 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 f966 	bl	800ba1c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fcec 	bl	800b12e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	4798      	blx	r3
 800a764:	4603      	mov	r3, r0
 800a766:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a768:	e004      	b.n	800a774 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fc13 	bl	800af98 <USBD_CtlError>
              break;
 800a772:	e000      	b.n	800a776 <USBD_StdEPReq+0x154>
              break;
 800a774:	bf00      	nop
          }
          break;
 800a776:	e0ab      	b.n	800a8d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b02      	cmp	r3, #2
 800a782:	d002      	beq.n	800a78a <USBD_StdEPReq+0x168>
 800a784:	2b03      	cmp	r3, #3
 800a786:	d032      	beq.n	800a7ee <USBD_StdEPReq+0x1cc>
 800a788:	e097      	b.n	800a8ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d007      	beq.n	800a7a0 <USBD_StdEPReq+0x17e>
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	2b80      	cmp	r3, #128	; 0x80
 800a794:	d004      	beq.n	800a7a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fbfd 	bl	800af98 <USBD_CtlError>
                break;
 800a79e:	e091      	b.n	800a8c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	da0b      	bge.n	800a7c0 <USBD_StdEPReq+0x19e>
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	3310      	adds	r3, #16
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	3304      	adds	r3, #4
 800a7be:	e00b      	b.n	800a7d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fc47 	bl	800b07a <USBD_CtlSendData>
              break;
 800a7ec:	e06a      	b.n	800a8c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	da11      	bge.n	800a81a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	f003 020f 	and.w	r2, r3, #15
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	4613      	mov	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	440b      	add	r3, r1
 800a808:	3324      	adds	r3, #36	; 0x24
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d117      	bne.n	800a840 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fbc0 	bl	800af98 <USBD_CtlError>
                  break;
 800a818:	e054      	b.n	800a8c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
 800a81c:	f003 020f 	and.w	r2, r3, #15
 800a820:	6879      	ldr	r1, [r7, #4]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	440b      	add	r3, r1
 800a82c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d104      	bne.n	800a840 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fbad 	bl	800af98 <USBD_CtlError>
                  break;
 800a83e:	e041      	b.n	800a8c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a844:	2b00      	cmp	r3, #0
 800a846:	da0b      	bge.n	800a860 <USBD_StdEPReq+0x23e>
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a84e:	4613      	mov	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	3310      	adds	r3, #16
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	4413      	add	r3, r2
 800a85c:	3304      	adds	r3, #4
 800a85e:	e00b      	b.n	800a878 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	4413      	add	r3, r2
 800a876:	3304      	adds	r3, #4
 800a878:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <USBD_StdEPReq+0x264>
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d103      	bne.n	800a88e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	e00e      	b.n	800a8ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 f8f8 	bl	800ba88 <USBD_LL_IsStallEP>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	e002      	b.n	800a8ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fbe1 	bl	800b07a <USBD_CtlSendData>
              break;
 800a8b8:	e004      	b.n	800a8c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fb6b 	bl	800af98 <USBD_CtlError>
              break;
 800a8c2:	bf00      	nop
          }
          break;
 800a8c4:	e004      	b.n	800a8d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fb65 	bl	800af98 <USBD_CtlError>
          break;
 800a8ce:	bf00      	nop
      }
      break;
 800a8d0:	e004      	b.n	800a8dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fb5f 	bl	800af98 <USBD_CtlError>
      break;
 800a8da:	bf00      	nop
  }

  return ret;
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
	...

0800a8e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	885b      	ldrh	r3, [r3, #2]
 800a902:	0a1b      	lsrs	r3, r3, #8
 800a904:	b29b      	uxth	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	2b0e      	cmp	r3, #14
 800a90a:	f200 8152 	bhi.w	800abb2 <USBD_GetDescriptor+0x2ca>
 800a90e:	a201      	add	r2, pc, #4	; (adr r2, 800a914 <USBD_GetDescriptor+0x2c>)
 800a910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a914:	0800a985 	.word	0x0800a985
 800a918:	0800a99d 	.word	0x0800a99d
 800a91c:	0800a9dd 	.word	0x0800a9dd
 800a920:	0800abb3 	.word	0x0800abb3
 800a924:	0800abb3 	.word	0x0800abb3
 800a928:	0800ab53 	.word	0x0800ab53
 800a92c:	0800ab7f 	.word	0x0800ab7f
 800a930:	0800abb3 	.word	0x0800abb3
 800a934:	0800abb3 	.word	0x0800abb3
 800a938:	0800abb3 	.word	0x0800abb3
 800a93c:	0800abb3 	.word	0x0800abb3
 800a940:	0800abb3 	.word	0x0800abb3
 800a944:	0800abb3 	.word	0x0800abb3
 800a948:	0800abb3 	.word	0x0800abb3
 800a94c:	0800a951 	.word	0x0800a951
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	7c12      	ldrb	r2, [r2, #16]
 800a968:	f107 0108 	add.w	r1, r7, #8
 800a96c:	4610      	mov	r0, r2
 800a96e:	4798      	blx	r3
 800a970:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a972:	e126      	b.n	800abc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fb0e 	bl	800af98 <USBD_CtlError>
        err++;
 800a97c:	7afb      	ldrb	r3, [r7, #11]
 800a97e:	3301      	adds	r3, #1
 800a980:	72fb      	strb	r3, [r7, #11]
      break;
 800a982:	e11e      	b.n	800abc2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	7c12      	ldrb	r2, [r2, #16]
 800a990:	f107 0108 	add.w	r1, r7, #8
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
 800a998:	60f8      	str	r0, [r7, #12]
      break;
 800a99a:	e112      	b.n	800abc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	7c1b      	ldrb	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10d      	bne.n	800a9c0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	f107 0208 	add.w	r2, r7, #8
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	4798      	blx	r3
 800a9b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a9be:	e100      	b.n	800abc2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c8:	f107 0208 	add.w	r2, r7, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
 800a9d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	701a      	strb	r2, [r3, #0]
      break;
 800a9da:	e0f2      	b.n	800abc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	885b      	ldrh	r3, [r3, #2]
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b05      	cmp	r3, #5
 800a9e4:	f200 80ac 	bhi.w	800ab40 <USBD_GetDescriptor+0x258>
 800a9e8:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <USBD_GetDescriptor+0x108>)
 800a9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ee:	bf00      	nop
 800a9f0:	0800aa09 	.word	0x0800aa09
 800a9f4:	0800aa3d 	.word	0x0800aa3d
 800a9f8:	0800aa71 	.word	0x0800aa71
 800a9fc:	0800aaa5 	.word	0x0800aaa5
 800aa00:	0800aad9 	.word	0x0800aad9
 800aa04:	0800ab0d 	.word	0x0800ab0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	7c12      	ldrb	r2, [r2, #16]
 800aa20:	f107 0108 	add.w	r1, r7, #8
 800aa24:	4610      	mov	r0, r2
 800aa26:	4798      	blx	r3
 800aa28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2a:	e091      	b.n	800ab50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fab2 	bl	800af98 <USBD_CtlError>
            err++;
 800aa34:	7afb      	ldrb	r3, [r7, #11]
 800aa36:	3301      	adds	r3, #1
 800aa38:	72fb      	strb	r3, [r7, #11]
          break;
 800aa3a:	e089      	b.n	800ab50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	7c12      	ldrb	r2, [r2, #16]
 800aa54:	f107 0108 	add.w	r1, r7, #8
 800aa58:	4610      	mov	r0, r2
 800aa5a:	4798      	blx	r3
 800aa5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa5e:	e077      	b.n	800ab50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fa98 	bl	800af98 <USBD_CtlError>
            err++;
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa6e:	e06f      	b.n	800ab50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00b      	beq.n	800aa94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7c12      	ldrb	r2, [r2, #16]
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
 800aa90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa92:	e05d      	b.n	800ab50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fa7e 	bl	800af98 <USBD_CtlError>
            err++;
 800aa9c:	7afb      	ldrb	r3, [r7, #11]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa2:	e055      	b.n	800ab50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7c12      	ldrb	r2, [r2, #16]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aac6:	e043      	b.n	800ab50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fa64 	bl	800af98 <USBD_CtlError>
            err++;
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	3301      	adds	r3, #1
 800aad4:	72fb      	strb	r3, [r7, #11]
          break;
 800aad6:	e03b      	b.n	800ab50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00b      	beq.n	800aafc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	7c12      	ldrb	r2, [r2, #16]
 800aaf0:	f107 0108 	add.w	r1, r7, #8
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
 800aaf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafa:	e029      	b.n	800ab50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fa4a 	bl	800af98 <USBD_CtlError>
            err++;
 800ab04:	7afb      	ldrb	r3, [r7, #11]
 800ab06:	3301      	adds	r3, #1
 800ab08:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0a:	e021      	b.n	800ab50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00b      	beq.n	800ab30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	7c12      	ldrb	r2, [r2, #16]
 800ab24:	f107 0108 	add.w	r1, r7, #8
 800ab28:	4610      	mov	r0, r2
 800ab2a:	4798      	blx	r3
 800ab2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab2e:	e00f      	b.n	800ab50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa30 	bl	800af98 <USBD_CtlError>
            err++;
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab3e:	e007      	b.n	800ab50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fa28 	bl	800af98 <USBD_CtlError>
          err++;
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ab4e:	bf00      	nop
      }
      break;
 800ab50:	e037      	b.n	800abc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	7c1b      	ldrb	r3, [r3, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d109      	bne.n	800ab6e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab62:	f107 0208 	add.w	r2, r7, #8
 800ab66:	4610      	mov	r0, r2
 800ab68:	4798      	blx	r3
 800ab6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab6c:	e029      	b.n	800abc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fa11 	bl	800af98 <USBD_CtlError>
        err++;
 800ab76:	7afb      	ldrb	r3, [r7, #11]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab7c:	e021      	b.n	800abc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	7c1b      	ldrb	r3, [r3, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10d      	bne.n	800aba2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8e:	f107 0208 	add.w	r2, r7, #8
 800ab92:	4610      	mov	r0, r2
 800ab94:	4798      	blx	r3
 800ab96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	2207      	movs	r2, #7
 800ab9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aba0:	e00f      	b.n	800abc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f9f7 	bl	800af98 <USBD_CtlError>
        err++;
 800abaa:	7afb      	ldrb	r3, [r7, #11]
 800abac:	3301      	adds	r3, #1
 800abae:	72fb      	strb	r3, [r7, #11]
      break;
 800abb0:	e007      	b.n	800abc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f9ef 	bl	800af98 <USBD_CtlError>
      err++;
 800abba:	7afb      	ldrb	r3, [r7, #11]
 800abbc:	3301      	adds	r3, #1
 800abbe:	72fb      	strb	r3, [r7, #11]
      break;
 800abc0:	bf00      	nop
  }

  if (err != 0U)
 800abc2:	7afb      	ldrb	r3, [r7, #11]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d11e      	bne.n	800ac06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	88db      	ldrh	r3, [r3, #6]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d016      	beq.n	800abfe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800abd0:	893b      	ldrh	r3, [r7, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00e      	beq.n	800abf4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	88da      	ldrh	r2, [r3, #6]
 800abda:	893b      	ldrh	r3, [r7, #8]
 800abdc:	4293      	cmp	r3, r2
 800abde:	bf28      	it	cs
 800abe0:	4613      	movcs	r3, r2
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abe6:	893b      	ldrh	r3, [r7, #8]
 800abe8:	461a      	mov	r2, r3
 800abea:	68f9      	ldr	r1, [r7, #12]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fa44 	bl	800b07a <USBD_CtlSendData>
 800abf2:	e009      	b.n	800ac08 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f9ce 	bl	800af98 <USBD_CtlError>
 800abfc:	e004      	b.n	800ac08 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa95 	bl	800b12e <USBD_CtlSendStatus>
 800ac04:	e000      	b.n	800ac08 <USBD_GetDescriptor+0x320>
    return;
 800ac06:	bf00      	nop
  }
}
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop

0800ac10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	889b      	ldrh	r3, [r3, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d131      	bne.n	800ac86 <USBD_SetAddress+0x76>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	88db      	ldrh	r3, [r3, #6]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d12d      	bne.n	800ac86 <USBD_SetAddress+0x76>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	885b      	ldrh	r3, [r3, #2]
 800ac2e:	2b7f      	cmp	r3, #127	; 0x7f
 800ac30:	d829      	bhi.n	800ac86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	885b      	ldrh	r3, [r3, #2]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d104      	bne.n	800ac54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f9a3 	bl	800af98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac52:	e01d      	b.n	800ac90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	7bfa      	ldrb	r2, [r7, #15]
 800ac58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 ff3f 	bl	800bae4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fa61 	bl	800b12e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d004      	beq.n	800ac7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2202      	movs	r2, #2
 800ac76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac7a:	e009      	b.n	800ac90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac84:	e004      	b.n	800ac90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f985 	bl	800af98 <USBD_CtlError>
  }
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	885b      	ldrh	r3, [r3, #2]
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	4b4c      	ldr	r3, [pc, #304]	; (800ade0 <USBD_SetConfig+0x148>)
 800acae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800acb0:	4b4b      	ldr	r3, [pc, #300]	; (800ade0 <USBD_SetConfig+0x148>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d905      	bls.n	800acc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f96c 	bl	800af98 <USBD_CtlError>
    return USBD_FAIL;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e088      	b.n	800add6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b02      	cmp	r3, #2
 800acce:	d002      	beq.n	800acd6 <USBD_SetConfig+0x3e>
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d025      	beq.n	800ad20 <USBD_SetConfig+0x88>
 800acd4:	e071      	b.n	800adba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800acd6:	4b42      	ldr	r3, [pc, #264]	; (800ade0 <USBD_SetConfig+0x148>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d01c      	beq.n	800ad18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800acde:	4b40      	ldr	r3, [pc, #256]	; (800ade0 <USBD_SetConfig+0x148>)
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ace8:	4b3d      	ldr	r3, [pc, #244]	; (800ade0 <USBD_SetConfig+0x148>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff f992 	bl	800a018 <USBD_SetClassConfig>
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d004      	beq.n	800ad08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f949 	bl	800af98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad06:	e065      	b.n	800add4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa10 	bl	800b12e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2203      	movs	r2, #3
 800ad12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad16:	e05d      	b.n	800add4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fa08 	bl	800b12e <USBD_CtlSendStatus>
      break;
 800ad1e:	e059      	b.n	800add4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ad20:	4b2f      	ldr	r3, [pc, #188]	; (800ade0 <USBD_SetConfig+0x148>)
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d112      	bne.n	800ad4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ad30:	4b2b      	ldr	r3, [pc, #172]	; (800ade0 <USBD_SetConfig+0x148>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	461a      	mov	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad3a:	4b29      	ldr	r3, [pc, #164]	; (800ade0 <USBD_SetConfig+0x148>)
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff f985 	bl	800a050 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f9f1 	bl	800b12e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad4c:	e042      	b.n	800add4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ad4e:	4b24      	ldr	r3, [pc, #144]	; (800ade0 <USBD_SetConfig+0x148>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d02a      	beq.n	800adb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7ff f973 	bl	800a050 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad6a:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <USBD_SetConfig+0x148>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad74:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <USBD_SetConfig+0x148>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff f94c 	bl	800a018 <USBD_SetClassConfig>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00f      	beq.n	800adaa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f903 	bl	800af98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff f958 	bl	800a050 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ada8:	e014      	b.n	800add4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f9bf 	bl	800b12e <USBD_CtlSendStatus>
      break;
 800adb0:	e010      	b.n	800add4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f9bb 	bl	800b12e <USBD_CtlSendStatus>
      break;
 800adb8:	e00c      	b.n	800add4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f8eb 	bl	800af98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adc2:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <USBD_SetConfig+0x148>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff f941 	bl	800a050 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800adce:	2303      	movs	r3, #3
 800add0:	73fb      	strb	r3, [r7, #15]
      break;
 800add2:	bf00      	nop
  }

  return ret;
 800add4:	7bfb      	ldrb	r3, [r7, #15]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20000564 	.word	0x20000564

0800ade4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	88db      	ldrh	r3, [r3, #6]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d004      	beq.n	800ae00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f8cd 	bl	800af98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800adfe:	e023      	b.n	800ae48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	dc02      	bgt.n	800ae12 <USBD_GetConfig+0x2e>
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dc03      	bgt.n	800ae18 <USBD_GetConfig+0x34>
 800ae10:	e015      	b.n	800ae3e <USBD_GetConfig+0x5a>
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d00b      	beq.n	800ae2e <USBD_GetConfig+0x4a>
 800ae16:	e012      	b.n	800ae3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3308      	adds	r3, #8
 800ae22:	2201      	movs	r2, #1
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f927 	bl	800b07a <USBD_CtlSendData>
        break;
 800ae2c:	e00c      	b.n	800ae48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3304      	adds	r3, #4
 800ae32:	2201      	movs	r2, #1
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f91f 	bl	800b07a <USBD_CtlSendData>
        break;
 800ae3c:	e004      	b.n	800ae48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f8a9 	bl	800af98 <USBD_CtlError>
        break;
 800ae46:	bf00      	nop
}
 800ae48:	bf00      	nop
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	3b01      	subs	r3, #1
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d81e      	bhi.n	800aea6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	88db      	ldrh	r3, [r3, #6]
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d004      	beq.n	800ae7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f890 	bl	800af98 <USBD_CtlError>
        break;
 800ae78:	e01a      	b.n	800aeb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d005      	beq.n	800ae96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f043 0202 	orr.w	r2, r3, #2
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	330c      	adds	r3, #12
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f8eb 	bl	800b07a <USBD_CtlSendData>
      break;
 800aea4:	e004      	b.n	800aeb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f875 	bl	800af98 <USBD_CtlError>
      break;
 800aeae:	bf00      	nop
  }
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	885b      	ldrh	r3, [r3, #2]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d106      	bne.n	800aed8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f92b 	bl	800b12e <USBD_CtlSendStatus>
  }
}
 800aed8:	bf00      	nop
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	3b01      	subs	r3, #1
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d80b      	bhi.n	800af10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	885b      	ldrh	r3, [r3, #2]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d10c      	bne.n	800af1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f910 	bl	800b12e <USBD_CtlSendStatus>
      }
      break;
 800af0e:	e004      	b.n	800af1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f840 	bl	800af98 <USBD_CtlError>
      break;
 800af18:	e000      	b.n	800af1c <USBD_ClrFeature+0x3c>
      break;
 800af1a:	bf00      	nop
  }
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	781a      	ldrb	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3301      	adds	r3, #1
 800af3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	781a      	ldrb	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3301      	adds	r3, #1
 800af4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f7ff fa92 	bl	800a478 <SWAPBYTE>
 800af54:	4603      	mov	r3, r0
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3301      	adds	r3, #1
 800af60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3301      	adds	r3, #1
 800af66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f7ff fa85 	bl	800a478 <SWAPBYTE>
 800af6e:	4603      	mov	r3, r0
 800af70:	461a      	mov	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3301      	adds	r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	3301      	adds	r3, #1
 800af80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f7ff fa78 	bl	800a478 <SWAPBYTE>
 800af88:	4603      	mov	r3, r0
 800af8a:	461a      	mov	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	80da      	strh	r2, [r3, #6]
}
 800af90:	bf00      	nop
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800afa2:	2180      	movs	r1, #128	; 0x80
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fd03 	bl	800b9b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800afaa:	2100      	movs	r1, #0
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fcff 	bl	800b9b0 <USBD_LL_StallEP>
}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b086      	sub	sp, #24
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d036      	beq.n	800b03e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800afd4:	6938      	ldr	r0, [r7, #16]
 800afd6:	f000 f836 	bl	800b046 <USBD_GetLen>
 800afda:	4603      	mov	r3, r0
 800afdc:	3301      	adds	r3, #1
 800afde:	b29b      	uxth	r3, r3
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	4413      	add	r3, r2
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	7812      	ldrb	r2, [r2, #0]
 800aff2:	701a      	strb	r2, [r3, #0]
  idx++;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	3301      	adds	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	4413      	add	r3, r2
 800b000:	2203      	movs	r2, #3
 800b002:	701a      	strb	r2, [r3, #0]
  idx++;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	3301      	adds	r3, #1
 800b008:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b00a:	e013      	b.n	800b034 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	4413      	add	r3, r2
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	7812      	ldrb	r2, [r2, #0]
 800b016:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	3301      	adds	r3, #1
 800b01c:	613b      	str	r3, [r7, #16]
    idx++;
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	3301      	adds	r3, #1
 800b022:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	4413      	add	r3, r2
 800b02a:	2200      	movs	r2, #0
 800b02c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	3301      	adds	r3, #1
 800b032:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e7      	bne.n	800b00c <USBD_GetString+0x52>
 800b03c:	e000      	b.n	800b040 <USBD_GetString+0x86>
    return;
 800b03e:	bf00      	nop
  }
}
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b056:	e005      	b.n	800b064 <USBD_GetLen+0x1e>
  {
    len++;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	3301      	adds	r3, #1
 800b05c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	3301      	adds	r3, #1
 800b062:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1f5      	bne.n	800b058 <USBD_GetLen+0x12>
  }

  return len;
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	60f8      	str	r0, [r7, #12]
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2202      	movs	r2, #2
 800b08a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	2100      	movs	r1, #0
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 fd55 	bl	800bb50 <USBD_LL_Transmit>

  return USBD_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f000 fd44 	bl	800bb50 <USBD_LL_Transmit>

  return USBD_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2203      	movs	r2, #3
 800b0e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 fd5f 	bl	800bbc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	2100      	movs	r1, #0
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 fd4e 	bl	800bbc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2204      	movs	r2, #4
 800b13a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b13e:	2300      	movs	r3, #0
 800b140:	2200      	movs	r2, #0
 800b142:	2100      	movs	r1, #0
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fd03 	bl	800bb50 <USBD_LL_Transmit>

  return USBD_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2205      	movs	r2, #5
 800b160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b164:	2300      	movs	r3, #0
 800b166:	2200      	movs	r2, #0
 800b168:	2100      	movs	r1, #0
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fd28 	bl	800bbc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b180:	2200      	movs	r2, #0
 800b182:	4912      	ldr	r1, [pc, #72]	; (800b1cc <MX_USB_DEVICE_Init+0x50>)
 800b184:	4812      	ldr	r0, [pc, #72]	; (800b1d0 <MX_USB_DEVICE_Init+0x54>)
 800b186:	f7fe fed9 	bl	8009f3c <USBD_Init>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b190:	f7f5 fce8 	bl	8000b64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b194:	490f      	ldr	r1, [pc, #60]	; (800b1d4 <MX_USB_DEVICE_Init+0x58>)
 800b196:	480e      	ldr	r0, [pc, #56]	; (800b1d0 <MX_USB_DEVICE_Init+0x54>)
 800b198:	f7fe ff00 	bl	8009f9c <USBD_RegisterClass>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1a2:	f7f5 fcdf 	bl	8000b64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1a6:	490c      	ldr	r1, [pc, #48]	; (800b1d8 <MX_USB_DEVICE_Init+0x5c>)
 800b1a8:	4809      	ldr	r0, [pc, #36]	; (800b1d0 <MX_USB_DEVICE_Init+0x54>)
 800b1aa:	f7fe fe51 	bl	8009e50 <USBD_CDC_RegisterInterface>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1b4:	f7f5 fcd6 	bl	8000b64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1b8:	4805      	ldr	r0, [pc, #20]	; (800b1d0 <MX_USB_DEVICE_Init+0x54>)
 800b1ba:	f7fe ff16 	bl	8009fea <USBD_Start>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b1c4:	f7f5 fcce 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b1c8:	bf00      	nop
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20000130 	.word	0x20000130
 800b1d0:	20000568 	.word	0x20000568
 800b1d4:	20000018 	.word	0x20000018
 800b1d8:	2000011c 	.word	0x2000011c

0800b1dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4905      	ldr	r1, [pc, #20]	; (800b1f8 <CDC_Init_FS+0x1c>)
 800b1e4:	4805      	ldr	r0, [pc, #20]	; (800b1fc <CDC_Init_FS+0x20>)
 800b1e6:	f7fe fe48 	bl	8009e7a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1ea:	4905      	ldr	r1, [pc, #20]	; (800b200 <CDC_Init_FS+0x24>)
 800b1ec:	4803      	ldr	r0, [pc, #12]	; (800b1fc <CDC_Init_FS+0x20>)
 800b1ee:	f7fe fe62 	bl	8009eb6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b1f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20001038 	.word	0x20001038
 800b1fc:	20000568 	.word	0x20000568
 800b200:	20000838 	.word	0x20000838

0800b204 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b204:	b480      	push	{r7}
 800b206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b208:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	6039      	str	r1, [r7, #0]
 800b21e:	71fb      	strb	r3, [r7, #7]
 800b220:	4613      	mov	r3, r2
 800b222:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	2b23      	cmp	r3, #35	; 0x23
 800b228:	d84a      	bhi.n	800b2c0 <CDC_Control_FS+0xac>
 800b22a:	a201      	add	r2, pc, #4	; (adr r2, 800b230 <CDC_Control_FS+0x1c>)
 800b22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b230:	0800b2c1 	.word	0x0800b2c1
 800b234:	0800b2c1 	.word	0x0800b2c1
 800b238:	0800b2c1 	.word	0x0800b2c1
 800b23c:	0800b2c1 	.word	0x0800b2c1
 800b240:	0800b2c1 	.word	0x0800b2c1
 800b244:	0800b2c1 	.word	0x0800b2c1
 800b248:	0800b2c1 	.word	0x0800b2c1
 800b24c:	0800b2c1 	.word	0x0800b2c1
 800b250:	0800b2c1 	.word	0x0800b2c1
 800b254:	0800b2c1 	.word	0x0800b2c1
 800b258:	0800b2c1 	.word	0x0800b2c1
 800b25c:	0800b2c1 	.word	0x0800b2c1
 800b260:	0800b2c1 	.word	0x0800b2c1
 800b264:	0800b2c1 	.word	0x0800b2c1
 800b268:	0800b2c1 	.word	0x0800b2c1
 800b26c:	0800b2c1 	.word	0x0800b2c1
 800b270:	0800b2c1 	.word	0x0800b2c1
 800b274:	0800b2c1 	.word	0x0800b2c1
 800b278:	0800b2c1 	.word	0x0800b2c1
 800b27c:	0800b2c1 	.word	0x0800b2c1
 800b280:	0800b2c1 	.word	0x0800b2c1
 800b284:	0800b2c1 	.word	0x0800b2c1
 800b288:	0800b2c1 	.word	0x0800b2c1
 800b28c:	0800b2c1 	.word	0x0800b2c1
 800b290:	0800b2c1 	.word	0x0800b2c1
 800b294:	0800b2c1 	.word	0x0800b2c1
 800b298:	0800b2c1 	.word	0x0800b2c1
 800b29c:	0800b2c1 	.word	0x0800b2c1
 800b2a0:	0800b2c1 	.word	0x0800b2c1
 800b2a4:	0800b2c1 	.word	0x0800b2c1
 800b2a8:	0800b2c1 	.word	0x0800b2c1
 800b2ac:	0800b2c1 	.word	0x0800b2c1
 800b2b0:	0800b2c1 	.word	0x0800b2c1
 800b2b4:	0800b2c1 	.word	0x0800b2c1
 800b2b8:	0800b2c1 	.word	0x0800b2c1
 800b2bc:	0800b2c1 	.word	0x0800b2c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2c0:	bf00      	nop
  }

  return (USBD_OK);
 800b2c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	4805      	ldr	r0, [pc, #20]	; (800b2f4 <CDC_Receive_FS+0x24>)
 800b2de:	f7fe fdea 	bl	8009eb6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2e2:	4804      	ldr	r0, [pc, #16]	; (800b2f4 <CDC_Receive_FS+0x24>)
 800b2e4:	f7fe fe00 	bl	8009ee8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b2e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20000568 	.word	0x20000568

0800b2f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	4613      	mov	r3, r2
 800b304:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b30a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	371c      	adds	r7, #28
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
	...

0800b31c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	6039      	str	r1, [r7, #0]
 800b326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2212      	movs	r2, #18
 800b32c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b32e:	4b03      	ldr	r3, [pc, #12]	; (800b33c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b330:	4618      	mov	r0, r3
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	20000150 	.word	0x20000150

0800b340 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	6039      	str	r1, [r7, #0]
 800b34a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2204      	movs	r2, #4
 800b350:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b352:	4b03      	ldr	r3, [pc, #12]	; (800b360 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	20000170 	.word	0x20000170

0800b364 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	6039      	str	r1, [r7, #0]
 800b36e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d105      	bne.n	800b382 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	4907      	ldr	r1, [pc, #28]	; (800b398 <USBD_FS_ProductStrDescriptor+0x34>)
 800b37a:	4808      	ldr	r0, [pc, #32]	; (800b39c <USBD_FS_ProductStrDescriptor+0x38>)
 800b37c:	f7ff fe1d 	bl	800afba <USBD_GetString>
 800b380:	e004      	b.n	800b38c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	4904      	ldr	r1, [pc, #16]	; (800b398 <USBD_FS_ProductStrDescriptor+0x34>)
 800b386:	4805      	ldr	r0, [pc, #20]	; (800b39c <USBD_FS_ProductStrDescriptor+0x38>)
 800b388:	f7ff fe17 	bl	800afba <USBD_GetString>
  }
  return USBD_StrDesc;
 800b38c:	4b02      	ldr	r3, [pc, #8]	; (800b398 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20001838 	.word	0x20001838
 800b39c:	0800bd70 	.word	0x0800bd70

0800b3a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	4904      	ldr	r1, [pc, #16]	; (800b3c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3b0:	4804      	ldr	r0, [pc, #16]	; (800b3c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3b2:	f7ff fe02 	bl	800afba <USBD_GetString>
  return USBD_StrDesc;
 800b3b6:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20001838 	.word	0x20001838
 800b3c4:	0800bd88 	.word	0x0800bd88

0800b3c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	221a      	movs	r2, #26
 800b3d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3da:	f000 f855 	bl	800b488 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b3de:	4b02      	ldr	r3, [pc, #8]	; (800b3e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20000174 	.word	0x20000174

0800b3ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d105      	bne.n	800b40a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	4907      	ldr	r1, [pc, #28]	; (800b420 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b402:	4808      	ldr	r0, [pc, #32]	; (800b424 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b404:	f7ff fdd9 	bl	800afba <USBD_GetString>
 800b408:	e004      	b.n	800b414 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b40a:	683a      	ldr	r2, [r7, #0]
 800b40c:	4904      	ldr	r1, [pc, #16]	; (800b420 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b40e:	4805      	ldr	r0, [pc, #20]	; (800b424 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b410:	f7ff fdd3 	bl	800afba <USBD_GetString>
  }
  return USBD_StrDesc;
 800b414:	4b02      	ldr	r3, [pc, #8]	; (800b420 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20001838 	.word	0x20001838
 800b424:	0800bd9c 	.word	0x0800bd9c

0800b428 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d105      	bne.n	800b446 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	4907      	ldr	r1, [pc, #28]	; (800b45c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b43e:	4808      	ldr	r0, [pc, #32]	; (800b460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b440:	f7ff fdbb 	bl	800afba <USBD_GetString>
 800b444:	e004      	b.n	800b450 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	4904      	ldr	r1, [pc, #16]	; (800b45c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b44a:	4805      	ldr	r0, [pc, #20]	; (800b460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b44c:	f7ff fdb5 	bl	800afba <USBD_GetString>
  }
  return USBD_StrDesc;
 800b450:	4b02      	ldr	r3, [pc, #8]	; (800b45c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20001838 	.word	0x20001838
 800b460:	0800bda8 	.word	0x0800bda8

0800b464 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	220c      	movs	r2, #12
 800b474:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b476:	4b03      	ldr	r3, [pc, #12]	; (800b484 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b478:	4618      	mov	r0, r3
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	20000164 	.word	0x20000164

0800b488 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <Get_SerialNum+0x44>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b494:	4b0e      	ldr	r3, [pc, #56]	; (800b4d0 <Get_SerialNum+0x48>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b49a:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <Get_SerialNum+0x4c>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d009      	beq.n	800b4c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4ae:	2208      	movs	r2, #8
 800b4b0:	4909      	ldr	r1, [pc, #36]	; (800b4d8 <Get_SerialNum+0x50>)
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f000 f814 	bl	800b4e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4b8:	2204      	movs	r2, #4
 800b4ba:	4908      	ldr	r1, [pc, #32]	; (800b4dc <Get_SerialNum+0x54>)
 800b4bc:	68b8      	ldr	r0, [r7, #8]
 800b4be:	f000 f80f 	bl	800b4e0 <IntToUnicode>
  }
}
 800b4c2:	bf00      	nop
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	1fff7590 	.word	0x1fff7590
 800b4d0:	1fff7594 	.word	0x1fff7594
 800b4d4:	1fff7598 	.word	0x1fff7598
 800b4d8:	20000176 	.word	0x20000176
 800b4dc:	20000186 	.word	0x20000186

0800b4e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	75fb      	strb	r3, [r7, #23]
 800b4f6:	e027      	b.n	800b548 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	0f1b      	lsrs	r3, r3, #28
 800b4fc:	2b09      	cmp	r3, #9
 800b4fe:	d80b      	bhi.n	800b518 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	0f1b      	lsrs	r3, r3, #28
 800b504:	b2da      	uxtb	r2, r3
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	4619      	mov	r1, r3
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	440b      	add	r3, r1
 800b510:	3230      	adds	r2, #48	; 0x30
 800b512:	b2d2      	uxtb	r2, r2
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	e00a      	b.n	800b52e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	0f1b      	lsrs	r3, r3, #28
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
 800b520:	005b      	lsls	r3, r3, #1
 800b522:	4619      	mov	r1, r3
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	440b      	add	r3, r1
 800b528:	3237      	adds	r2, #55	; 0x37
 800b52a:	b2d2      	uxtb	r2, r2
 800b52c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	011b      	lsls	r3, r3, #4
 800b532:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	3301      	adds	r3, #1
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	4413      	add	r3, r2
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	3301      	adds	r3, #1
 800b546:	75fb      	strb	r3, [r7, #23]
 800b548:	7dfa      	ldrb	r2, [r7, #23]
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d3d3      	bcc.n	800b4f8 <IntToUnicode+0x18>
  }
}
 800b550:	bf00      	nop
 800b552:	bf00      	nop
 800b554:	371c      	adds	r7, #28
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
	...

0800b560 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b0a4      	sub	sp, #144	; 0x90
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b568:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	605a      	str	r2, [r3, #4]
 800b572:	609a      	str	r2, [r3, #8]
 800b574:	60da      	str	r2, [r3, #12]
 800b576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b578:	f107 0314 	add.w	r3, r7, #20
 800b57c:	2268      	movs	r2, #104	; 0x68
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f000 fbe1 	bl	800bd48 <memset>
  if(pcdHandle->Instance==USB)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a2e      	ldr	r2, [pc, #184]	; (800b644 <HAL_PCD_MspInit+0xe4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d154      	bne.n	800b63a <HAL_PCD_MspInit+0xda>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b594:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b596:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b59a:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b59c:	2301      	movs	r3, #1
 800b59e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b5a4:	2318      	movs	r3, #24
 800b5a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b5a8:	2307      	movs	r3, #7
 800b5aa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b5b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b5b8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b5ba:	f107 0314 	add.w	r3, r7, #20
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7f9 fab0 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800b5ca:	f7f5 facb 	bl	8000b64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5ce:	4b1e      	ldr	r3, [pc, #120]	; (800b648 <HAL_PCD_MspInit+0xe8>)
 800b5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d2:	4a1d      	ldr	r2, [pc, #116]	; (800b648 <HAL_PCD_MspInit+0xe8>)
 800b5d4:	f043 0301 	orr.w	r3, r3, #1
 800b5d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5da:	4b1b      	ldr	r3, [pc, #108]	; (800b648 <HAL_PCD_MspInit+0xe8>)
 800b5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	613b      	str	r3, [r7, #16]
 800b5e4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b5fe:	230a      	movs	r3, #10
 800b600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b604:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b608:	4619      	mov	r1, r3
 800b60a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b60e:	f7f6 fb55 	bl	8001cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b612:	4b0d      	ldr	r3, [pc, #52]	; (800b648 <HAL_PCD_MspInit+0xe8>)
 800b614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b616:	4a0c      	ldr	r2, [pc, #48]	; (800b648 <HAL_PCD_MspInit+0xe8>)
 800b618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b61c:	6593      	str	r3, [r2, #88]	; 0x58
 800b61e:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <HAL_PCD_MspInit+0xe8>)
 800b620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b622:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b62a:	2200      	movs	r2, #0
 800b62c:	2100      	movs	r1, #0
 800b62e:	2043      	movs	r0, #67	; 0x43
 800b630:	f7f6 f83d 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b634:	2043      	movs	r0, #67	; 0x43
 800b636:	f7f6 f856 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b63a:	bf00      	nop
 800b63c:	3790      	adds	r7, #144	; 0x90
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	40006800 	.word	0x40006800
 800b648:	40021000 	.word	0x40021000

0800b64c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f7fe fd0c 	bl	800a080 <USBD_LL_SetupStage>
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800b682:	78fa      	ldrb	r2, [r7, #3]
 800b684:	6879      	ldr	r1, [r7, #4]
 800b686:	4613      	mov	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	440b      	add	r3, r1
 800b690:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	78fb      	ldrb	r3, [r7, #3]
 800b698:	4619      	mov	r1, r3
 800b69a:	f7fe fd46 	bl	800a12a <USBD_LL_DataOutStage>
}
 800b69e:	bf00      	nop
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800b6b8:	78fa      	ldrb	r2, [r7, #3]
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3340      	adds	r3, #64	; 0x40
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7fe fd8f 	bl	800a1f0 <USBD_LL_DataInStage>
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7fe fea3 	bl	800a434 <USBD_LL_SOF>
}
 800b6ee:	bf00      	nop
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6fe:	2301      	movs	r3, #1
 800b700:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	2b02      	cmp	r3, #2
 800b708:	d001      	beq.n	800b70e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b70a:	f7f5 fa2b 	bl	8000b64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800b714:	7bfa      	ldrb	r2, [r7, #15]
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fe4d 	bl	800a3b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe fdf9 	bl	800a31c <USBD_LL_Reset>
}
 800b72a:	bf00      	nop
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fe48 	bl	800a3d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d005      	beq.n	800b75c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b750:	4b04      	ldr	r3, [pc, #16]	; (800b764 <HAL_PCD_SuspendCallback+0x30>)
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	4a03      	ldr	r2, [pc, #12]	; (800b764 <HAL_PCD_SuspendCallback+0x30>)
 800b756:	f043 0306 	orr.w	r3, r3, #6
 800b75a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	e000ed00 	.word	0xe000ed00

0800b768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d007      	beq.n	800b788 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b778:	4b08      	ldr	r3, [pc, #32]	; (800b79c <HAL_PCD_ResumeCallback+0x34>)
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	4a07      	ldr	r2, [pc, #28]	; (800b79c <HAL_PCD_ResumeCallback+0x34>)
 800b77e:	f023 0306 	bic.w	r3, r3, #6
 800b782:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b784:	f000 fab6 	bl	800bcf4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe fe38 	bl	800a404 <USBD_LL_Resume>
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	e000ed00 	.word	0xe000ed00

0800b7a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b7a8:	f7f8 fb74 	bl	8003e94 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b7ac:	4a2b      	ldr	r2, [pc, #172]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a29      	ldr	r2, [pc, #164]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b7bc:	4b27      	ldr	r3, [pc, #156]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7be:	4a28      	ldr	r2, [pc, #160]	; (800b860 <USBD_LL_Init+0xc0>)
 800b7c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b7c2:	4b26      	ldr	r3, [pc, #152]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7c4:	2208      	movs	r2, #8
 800b7c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b7c8:	4b24      	ldr	r3, [pc, #144]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b7ce:	4b23      	ldr	r3, [pc, #140]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b7d4:	4b21      	ldr	r3, [pc, #132]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b7da:	4b20      	ldr	r3, [pc, #128]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7e0:	4b1e      	ldr	r3, [pc, #120]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7e6:	4b1d      	ldr	r3, [pc, #116]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7ec:	481b      	ldr	r0, [pc, #108]	; (800b85c <USBD_LL_Init+0xbc>)
 800b7ee:	f7f6 fd61 	bl	80022b4 <HAL_PCD_Init>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d001      	beq.n	800b7fc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b7f8:	f7f5 f9b4 	bl	8000b64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b802:	2318      	movs	r3, #24
 800b804:	2200      	movs	r2, #0
 800b806:	2100      	movs	r1, #0
 800b808:	f7f8 fa71 	bl	8003cee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b812:	2358      	movs	r3, #88	; 0x58
 800b814:	2200      	movs	r2, #0
 800b816:	2180      	movs	r1, #128	; 0x80
 800b818:	f7f8 fa69 	bl	8003cee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b822:	23c0      	movs	r3, #192	; 0xc0
 800b824:	2200      	movs	r2, #0
 800b826:	2181      	movs	r1, #129	; 0x81
 800b828:	f7f8 fa61 	bl	8003cee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b832:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b836:	2200      	movs	r2, #0
 800b838:	2101      	movs	r1, #1
 800b83a:	f7f8 fa58 	bl	8003cee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b844:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b848:	2200      	movs	r2, #0
 800b84a:	2182      	movs	r1, #130	; 0x82
 800b84c:	f7f8 fa4f 	bl	8003cee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	20001a38 	.word	0x20001a38
 800b860:	40006800 	.word	0x40006800

0800b864 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7f6 fe31 	bl	80024e2 <HAL_PCD_Start>
 800b880:	4603      	mov	r3, r0
 800b882:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b03      	cmp	r3, #3
 800b888:	d816      	bhi.n	800b8b8 <USBD_LL_Start+0x54>
 800b88a:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <USBD_LL_Start+0x2c>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b8a1 	.word	0x0800b8a1
 800b894:	0800b8a7 	.word	0x0800b8a7
 800b898:	0800b8ad 	.word	0x0800b8ad
 800b89c:	0800b8b3 	.word	0x0800b8b3
    case HAL_OK :
      usb_status = USBD_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a4:	e00b      	b.n	800b8be <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b8aa:	e008      	b.n	800b8be <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b0:	e005      	b.n	800b8be <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b6:	e002      	b.n	800b8be <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b8bc:	bf00      	nop
  }
  return usb_status;
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	70fb      	strb	r3, [r7, #3]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	70bb      	strb	r3, [r7, #2]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b8f0:	78bb      	ldrb	r3, [r7, #2]
 800b8f2:	883a      	ldrh	r2, [r7, #0]
 800b8f4:	78f9      	ldrb	r1, [r7, #3]
 800b8f6:	f7f6 ff62 	bl	80027be <HAL_PCD_EP_Open>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b8fe:	7bbb      	ldrb	r3, [r7, #14]
 800b900:	2b03      	cmp	r3, #3
 800b902:	d817      	bhi.n	800b934 <USBD_LL_OpenEP+0x6c>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <USBD_LL_OpenEP+0x44>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800b91d 	.word	0x0800b91d
 800b910:	0800b923 	.word	0x0800b923
 800b914:	0800b929 	.word	0x0800b929
 800b918:	0800b92f 	.word	0x0800b92f
    case HAL_OK :
      usb_status = USBD_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	73fb      	strb	r3, [r7, #15]
    break;
 800b920:	e00b      	b.n	800b93a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b922:	2303      	movs	r3, #3
 800b924:	73fb      	strb	r3, [r7, #15]
    break;
 800b926:	e008      	b.n	800b93a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b928:	2301      	movs	r3, #1
 800b92a:	73fb      	strb	r3, [r7, #15]
    break;
 800b92c:	e005      	b.n	800b93a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b92e:	2303      	movs	r3, #3
 800b930:	73fb      	strb	r3, [r7, #15]
    break;
 800b932:	e002      	b.n	800b93a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b934:	2303      	movs	r3, #3
 800b936:	73fb      	strb	r3, [r7, #15]
    break;
 800b938:	bf00      	nop
  }
  return usb_status;
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	460b      	mov	r3, r1
 800b94e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b954:	2300      	movs	r3, #0
 800b956:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b95e:	78fa      	ldrb	r2, [r7, #3]
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f7f6 ff93 	bl	800288e <HAL_PCD_EP_Close>
 800b968:	4603      	mov	r3, r0
 800b96a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d816      	bhi.n	800b9a0 <USBD_LL_CloseEP+0x5c>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <USBD_LL_CloseEP+0x34>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b989 	.word	0x0800b989
 800b97c:	0800b98f 	.word	0x0800b98f
 800b980:	0800b995 	.word	0x0800b995
 800b984:	0800b99b 	.word	0x0800b99b
    case HAL_OK :
      usb_status = USBD_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
    break;
 800b98c:	e00b      	b.n	800b9a6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b98e:	2303      	movs	r3, #3
 800b990:	73fb      	strb	r3, [r7, #15]
    break;
 800b992:	e008      	b.n	800b9a6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b994:	2301      	movs	r3, #1
 800b996:	73fb      	strb	r3, [r7, #15]
    break;
 800b998:	e005      	b.n	800b9a6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b99a:	2303      	movs	r3, #3
 800b99c:	73fb      	strb	r3, [r7, #15]
    break;
 800b99e:	e002      	b.n	800b9a6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a4:	bf00      	nop
  }
  return usb_status;
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9ca:	78fa      	ldrb	r2, [r7, #3]
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7f7 f841 	bl	8002a56 <HAL_PCD_EP_SetStall>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d816      	bhi.n	800ba0c <USBD_LL_StallEP+0x5c>
 800b9de:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <USBD_LL_StallEP+0x34>)
 800b9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e4:	0800b9f5 	.word	0x0800b9f5
 800b9e8:	0800b9fb 	.word	0x0800b9fb
 800b9ec:	0800ba01 	.word	0x0800ba01
 800b9f0:	0800ba07 	.word	0x0800ba07
    case HAL_OK :
      usb_status = USBD_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f8:	e00b      	b.n	800ba12 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9fe:	e008      	b.n	800ba12 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba00:	2301      	movs	r3, #1
 800ba02:	73fb      	strb	r3, [r7, #15]
    break;
 800ba04:	e005      	b.n	800ba12 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba06:	2303      	movs	r3, #3
 800ba08:	73fb      	strb	r3, [r7, #15]
    break;
 800ba0a:	e002      	b.n	800ba12 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba10:	bf00      	nop
  }
  return usb_status;
 800ba12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba36:	78fa      	ldrb	r2, [r7, #3]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f7 f86d 	bl	8002b1a <HAL_PCD_EP_ClrStall>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d816      	bhi.n	800ba78 <USBD_LL_ClearStallEP+0x5c>
 800ba4a:	a201      	add	r2, pc, #4	; (adr r2, 800ba50 <USBD_LL_ClearStallEP+0x34>)
 800ba4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba50:	0800ba61 	.word	0x0800ba61
 800ba54:	0800ba67 	.word	0x0800ba67
 800ba58:	0800ba6d 	.word	0x0800ba6d
 800ba5c:	0800ba73 	.word	0x0800ba73
    case HAL_OK :
      usb_status = USBD_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73fb      	strb	r3, [r7, #15]
    break;
 800ba64:	e00b      	b.n	800ba7e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba66:	2303      	movs	r3, #3
 800ba68:	73fb      	strb	r3, [r7, #15]
    break;
 800ba6a:	e008      	b.n	800ba7e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba70:	e005      	b.n	800ba7e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba72:	2303      	movs	r3, #3
 800ba74:	73fb      	strb	r3, [r7, #15]
    break;
 800ba76:	e002      	b.n	800ba7e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba7c:	bf00      	nop
  }
  return usb_status;
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	da0c      	bge.n	800babe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800baa4:	78fb      	ldrb	r3, [r7, #3]
 800baa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baaa:	68f9      	ldr	r1, [r7, #12]
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	4613      	mov	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4413      	add	r3, r2
 800bab4:	00db      	lsls	r3, r3, #3
 800bab6:	440b      	add	r3, r1
 800bab8:	3306      	adds	r3, #6
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	e00b      	b.n	800bad6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800babe:	78fb      	ldrb	r3, [r7, #3]
 800bac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bac4:	68f9      	ldr	r1, [r7, #12]
 800bac6:	4613      	mov	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	4413      	add	r3, r2
 800bacc:	00db      	lsls	r3, r3, #3
 800bace:	440b      	add	r3, r1
 800bad0:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800bad4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
	...

0800bae4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bafe:	78fa      	ldrb	r2, [r7, #3]
 800bb00:	4611      	mov	r1, r2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f6 fe36 	bl	8002774 <HAL_PCD_SetAddress>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb0c:	7bbb      	ldrb	r3, [r7, #14]
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d816      	bhi.n	800bb40 <USBD_LL_SetUSBAddress+0x5c>
 800bb12:	a201      	add	r2, pc, #4	; (adr r2, 800bb18 <USBD_LL_SetUSBAddress+0x34>)
 800bb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb18:	0800bb29 	.word	0x0800bb29
 800bb1c:	0800bb2f 	.word	0x0800bb2f
 800bb20:	0800bb35 	.word	0x0800bb35
 800bb24:	0800bb3b 	.word	0x0800bb3b
    case HAL_OK :
      usb_status = USBD_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb2c:	e00b      	b.n	800bb46 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	73fb      	strb	r3, [r7, #15]
    break;
 800bb32:	e008      	b.n	800bb46 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb34:	2301      	movs	r3, #1
 800bb36:	73fb      	strb	r3, [r7, #15]
    break;
 800bb38:	e005      	b.n	800bb46 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb3e:	e002      	b.n	800bb46 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb40:	2303      	movs	r3, #3
 800bb42:	73fb      	strb	r3, [r7, #15]
    break;
 800bb44:	bf00      	nop
  }
  return usb_status;
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	607a      	str	r2, [r7, #4]
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb6e:	7af9      	ldrb	r1, [r7, #11]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	f7f6 ff2b 	bl	80029ce <HAL_PCD_EP_Transmit>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bb7c:	7dbb      	ldrb	r3, [r7, #22]
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d816      	bhi.n	800bbb0 <USBD_LL_Transmit+0x60>
 800bb82:	a201      	add	r2, pc, #4	; (adr r2, 800bb88 <USBD_LL_Transmit+0x38>)
 800bb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb88:	0800bb99 	.word	0x0800bb99
 800bb8c:	0800bb9f 	.word	0x0800bb9f
 800bb90:	0800bba5 	.word	0x0800bba5
 800bb94:	0800bbab 	.word	0x0800bbab
    case HAL_OK :
      usb_status = USBD_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	75fb      	strb	r3, [r7, #23]
    break;
 800bb9c:	e00b      	b.n	800bbb6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	75fb      	strb	r3, [r7, #23]
    break;
 800bba2:	e008      	b.n	800bbb6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bba4:	2301      	movs	r3, #1
 800bba6:	75fb      	strb	r3, [r7, #23]
    break;
 800bba8:	e005      	b.n	800bbb6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	75fb      	strb	r3, [r7, #23]
    break;
 800bbae:	e002      	b.n	800bbb6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	75fb      	strb	r3, [r7, #23]
    break;
 800bbb4:	bf00      	nop
  }
  return usb_status;
 800bbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3718      	adds	r7, #24
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	607a      	str	r2, [r7, #4]
 800bbca:	603b      	str	r3, [r7, #0]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbde:	7af9      	ldrb	r1, [r7, #11]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	f7f6 fe9d 	bl	8002922 <HAL_PCD_EP_Receive>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bbec:	7dbb      	ldrb	r3, [r7, #22]
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d816      	bhi.n	800bc20 <USBD_LL_PrepareReceive+0x60>
 800bbf2:	a201      	add	r2, pc, #4	; (adr r2, 800bbf8 <USBD_LL_PrepareReceive+0x38>)
 800bbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf8:	0800bc09 	.word	0x0800bc09
 800bbfc:	0800bc0f 	.word	0x0800bc0f
 800bc00:	0800bc15 	.word	0x0800bc15
 800bc04:	0800bc1b 	.word	0x0800bc1b
    case HAL_OK :
      usb_status = USBD_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	75fb      	strb	r3, [r7, #23]
    break;
 800bc0c:	e00b      	b.n	800bc26 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	75fb      	strb	r3, [r7, #23]
    break;
 800bc12:	e008      	b.n	800bc26 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc14:	2301      	movs	r3, #1
 800bc16:	75fb      	strb	r3, [r7, #23]
    break;
 800bc18:	e005      	b.n	800bc26 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	75fb      	strb	r3, [r7, #23]
    break;
 800bc1e:	e002      	b.n	800bc26 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bc20:	2303      	movs	r3, #3
 800bc22:	75fb      	strb	r3, [r7, #23]
    break;
 800bc24:	bf00      	nop
  }
  return usb_status;
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc42:	78fa      	ldrb	r2, [r7, #3]
 800bc44:	4611      	mov	r1, r2
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7f6 fea9 	bl	800299e <HAL_PCD_EP_GetRxCount>
 800bc4c:	4603      	mov	r3, r0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <HAL_PCDEx_LPM_Callback+0x18>
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d013      	beq.n	800bc96 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bc6e:	e023      	b.n	800bcb8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d007      	beq.n	800bc88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc78:	f000 f83c 	bl	800bcf4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc7c:	4b10      	ldr	r3, [pc, #64]	; (800bcc0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	4a0f      	ldr	r2, [pc, #60]	; (800bcc0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc82:	f023 0306 	bic.w	r3, r3, #6
 800bc86:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fbb8 	bl	800a404 <USBD_LL_Resume>
    break;
 800bc94:	e010      	b.n	800bcb8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fe fb9b 	bl	800a3d8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d005      	beq.n	800bcb6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcaa:	4b05      	ldr	r3, [pc, #20]	; (800bcc0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	4a04      	ldr	r2, [pc, #16]	; (800bcc0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bcb0:	f043 0306 	orr.w	r3, r3, #6
 800bcb4:	6113      	str	r3, [r2, #16]
    break;
 800bcb6:	bf00      	nop
}
 800bcb8:	bf00      	nop
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	e000ed00 	.word	0xe000ed00

0800bcc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bccc:	4b03      	ldr	r3, [pc, #12]	; (800bcdc <USBD_static_malloc+0x18>)
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20001d34 	.word	0x20001d34

0800bce0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]

}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bcf8:	f7f4 fedd 	bl	8000ab6 <SystemClock_Config>
}
 800bcfc:	bf00      	nop
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <__libc_init_array>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	4d0d      	ldr	r5, [pc, #52]	; (800bd38 <__libc_init_array+0x38>)
 800bd04:	4c0d      	ldr	r4, [pc, #52]	; (800bd3c <__libc_init_array+0x3c>)
 800bd06:	1b64      	subs	r4, r4, r5
 800bd08:	10a4      	asrs	r4, r4, #2
 800bd0a:	2600      	movs	r6, #0
 800bd0c:	42a6      	cmp	r6, r4
 800bd0e:	d109      	bne.n	800bd24 <__libc_init_array+0x24>
 800bd10:	4d0b      	ldr	r5, [pc, #44]	; (800bd40 <__libc_init_array+0x40>)
 800bd12:	4c0c      	ldr	r4, [pc, #48]	; (800bd44 <__libc_init_array+0x44>)
 800bd14:	f000 f820 	bl	800bd58 <_init>
 800bd18:	1b64      	subs	r4, r4, r5
 800bd1a:	10a4      	asrs	r4, r4, #2
 800bd1c:	2600      	movs	r6, #0
 800bd1e:	42a6      	cmp	r6, r4
 800bd20:	d105      	bne.n	800bd2e <__libc_init_array+0x2e>
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd28:	4798      	blx	r3
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	e7ee      	b.n	800bd0c <__libc_init_array+0xc>
 800bd2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd32:	4798      	blx	r3
 800bd34:	3601      	adds	r6, #1
 800bd36:	e7f2      	b.n	800bd1e <__libc_init_array+0x1e>
 800bd38:	0800be08 	.word	0x0800be08
 800bd3c:	0800be08 	.word	0x0800be08
 800bd40:	0800be08 	.word	0x0800be08
 800bd44:	0800be0c 	.word	0x0800be0c

0800bd48 <memset>:
 800bd48:	4402      	add	r2, r0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d100      	bne.n	800bd52 <memset+0xa>
 800bd50:	4770      	bx	lr
 800bd52:	f803 1b01 	strb.w	r1, [r3], #1
 800bd56:	e7f9      	b.n	800bd4c <memset+0x4>

0800bd58 <_init>:
 800bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5a:	bf00      	nop
 800bd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd5e:	bc08      	pop	{r3}
 800bd60:	469e      	mov	lr, r3
 800bd62:	4770      	bx	lr

0800bd64 <_fini>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	bf00      	nop
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr
